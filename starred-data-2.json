[
  {
    "id": 40,
    "title": "Example_1308B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Inductively define $G^n=G\\times G\\times\\cdots \\times G$, the product of $n$ same groups $G$. If $G$ is a finite group, prove that this group has order $|G|^n$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "--obvousily card (Π _: Fin n,G) equal to  ∏ _ : Fin n, (card G)= (card G) ^{ n }\nexample{G:Type*}[Fintype G][Group G] (n:ℕ) :  Fintype.card (Π _: Fin n,G) = (Fintype.card G)^n :=by \n   have:Fintype.card (Π _: Fin n,G)= ∏ _ : Fin n, (Fintype.card G) :=by exact Fintype.card_pi\n   rw[this]\n   exact Fin.prod_const n (Fintype.card G)\n",
    "informalProof": "--obvousily card (Π _: Fin n,G) equal to  ∏ _ : Fin n, (card G)= (card G) ^{ n }"
  },
  {
    "id": 162,
    "title": "Example_3217B",
    "lean_difficulty": "normal",
    "math_difficulty": "easy",
    "md": "Let $G$ be a cyclic group with generator $a$, and let $G^{\\prime}$ be a group isomorphic to $G$. If $\\phi: G \\rightarrow G^{\\prime}$ is an isomorphism, show that, for every $x \\in G, \\phi(x)$ is completely determined by the value $\\phi(a)$. That is, if $\\phi: G \\rightarrow G^{\\prime}$ and $\\psi: G \\rightarrow G^{\\prime}$ are two isomophisms such that $\\phi(a)=\\psi(a)$, then $\\phi(x)=\\psi(x)$ for all $x \\in G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nLet $G$ be a cyclic group with generator $a$, and $G'$ be a group isomorphic to $G$. If $\\varphi: G \\to G'$ is an isomorphism, we need to prove that for every $x \\in G$, $\\varphi(x)$ is completely determined by the value $\\varphi(a)$. That is, if $\\varphi: G \\to G'$ and $\\psi: G \\to G'$ are two isomorphisms such that $\\varphi(a) = \\psi(a)$, then $\\varphi(x) = \\psi(x)$ for all $x \\in G$.\n-/\nvariable {G G' : Type*}[Group G][ Group G'](a : G)\n\nexample (h : ∀ g : G, ∃ n, g = a ^ n)(f1 f2 : G →* G')(heq : f1 a = f2 a) : ∀ g : G, f1 g = f2 g := by\n  -- Since $G$ is a cyclic group, for any element $g \\in G$, there exists an integer $n$ such that $g = a^n$.\n  intro g\n  rcases h g with ⟨m, feq⟩\n  calc\n    -- For any $g \\in G$, let $g = a^m$, then we have $\\varphi(g) = \\varphi(a^m)$.\n    _ = f1 (a ^ m) := by rw [feq]\n    -- Since $\\varphi$ is a homomorphism, $\\varphi(a^m) = (\\varphi(a))^m$.\n    _ = (f1 a) ^ m := by exact MonoidHom.map_pow f1 a m\n    -- Since $\\varphi(a) = \\psi(a)$, we have $(\\varphi(a))^m = $(\\psi(a))^m$.\n    _ = (f2 a) ^ m := by rw [heq]\n    -- Since $\\psi$ is also a homomorphism, $(\\psi(a))^m = \\psi(a^m)$.\n    _ = f2 (a ^ m) := by exact Eq.symm (MonoidHom.map_pow f2 a m)\n    -- Therefore, $\\varphi(g) = \\psi(g)$.\n    _ = _ := by rw [feq]\n  -- Hence, we have proved that $\\varphi(x) = $\\psi(x)$ for all $x \\in G$.",
    "informalProof": "Proof:\n1. Let $G$ be a cyclic group with generator $a$, and $G'$ be a group isomorphic to $G$. If $\\varphi: G \\to G'$ is an isomorphism, we need to prove that for every $x \\in G$, $\\varphi(x)$ is completely determined by the value $\\varphi(a)$. That is, if $\\varphi: G \\to G'$ and $\\psi: G \\to G'$ are two isomorphisms such that $\\varphi(a) = \\psi(a)$, then $\\varphi(x) = \\psi(x)$ for all $x \\in G$.\n2. Since $G$ is a cyclic group, for any element $g \\in G$, there exists an integer $n$ such that $g = a^n$.\n3. Suppose $\\varphi$ and $\\psi$ are two isomorphisms, and $\\varphi(a) = \\psi(a)$.\n4. For any $g \\in G$, let $g = a^m$, then we have $\\varphi(g) = \\varphi(a^m)$.\n5. Since $\\varphi$ is a homomorphism, $\\varphi(a^m) = (\\varphi(a))^m$.\n6. Since $\\varphi(a) = \\psi(a)$, we have $(\\varphi(a))^m = $(\\psi(a))^m$.\n7. Since $\\psi$ is also a homomorphism, $(\\psi(a))^m = \\psi(a^m)$.\n8. Therefore, $\\varphi(g) = \\psi(g)$.\n9. Hence, we have proved that $\\varphi(x) = $\\psi(x)$ for all $x \\in G$."
  },
  {
    "id": 190,
    "title": "Example_3405B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "If $f: G\\rightarrow H_1$ and $g:G\\rightarrow H_2$ are group homomorphisms, and suppose, show that the kernel of the map $f\\times g: G\\to H_1\\times H_2,\\ x\\mapsto (f(x),g(x))$ is $\\operatorname{Ker}f\\cap\\operatorname{Ker}g$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable (G : Type*) {H1 : Type*} {H2 : Type*} [Group G] [Group H1] [Group H2] \n(f : G →* H1) (g : G→* H2)\n\ndef k : G →* H1 × H2 where\n  toFun := fun x ↦ \n    { fst := f x\n      snd := g x }\n  map_one' := by \n    simp\n  map_mul' := by \n    simp\n  -- we first give the function from $G$ to $H1 × H2$ and prove that it is a homomorphism.\n\nexample (G : Type*) (H1 : Type*) (H2 : Type*) [Group G] [Group H1] [Group H2] \n{f : G →* H1} {g : G→* H2} : (k G f g).ker = (f.ker) ⊓ (g.ker) := by \n  refine Subgroup.ext ?h\n  intro x\n  constructor\n  -- we use constructor to show that we only need to prove that if $x∈ k.ker$ then $x∈ f.ker ∩ g.ker$ and when $x∈ f.ker∩ g.ker$ then $x∈ k.ker$. \n  · intro m\n    simp\n    have w : (f x, g x) = (1, 1) := by \n      exact m\n    constructor\n    · refine (MonoidHom.mem_ker f).mpr ?h.mp.left.a\n      injection w\n    · refine (MonoidHom.mem_ker g).mpr ?h.mp.right.a\n      injection w\n    -- we use definition to show that if $x∈ k.ker$ then $f(x)=1$ and $g(x)=1$, and then prove that $x∈f.ker$, $x∈ g.ker$.\n  · intro m\n    rcases m with ⟨p,q⟩\n    have r : f x = 1 := by \n      exact p\n    have s : g x = 1 := by\n      exact q\n    refine (MonoidHom.mem_ker (k G f g)).mpr ?h.mpr.intro.a\n    exact Eq.symm (Prod.ext (id (Eq.symm r)) (id (Eq.symm s)))\n   -- In turn, we show that if $x∈ ker f ∩ ker g$ then $f(x)=1,g(x)=1$, so $(f(x),g(x))=(1,1)$ and $x∈ ker k$.",
    "informalProof": "-- we first give the function from $G$ to $H1 × H2$ and prove that it is a homomorphism.\n-- we use constructor to show that we only need to prove that if $x∈ k.ker$ then $x∈ f.ker ∩ g.ker$ and when $x∈ f.ker∩ g.ker$ then $x∈ k.ker$. \n- we use definition to show that if $x∈ k.ker$ then $f(x)=1$ and $g(x)=1$, and then prove that $x∈f.ker$, $x∈ g.ker$.\n-- In turn, we show that if $x∈ ker f ∩ ker g$ then $f(x)=1,g(x)=1$, so $(f(x),g(x))=(1,1)$ and $x∈ ker k$.\n"
  },
  {
    "id": 191,
    "title": "Example_3406B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "If $f:G\\to H$ and $g:H\\to K$ are surjective homomorphisms of groups, then the composition $g\\circ f:G\\to K$ is also a surjective homomorphism.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n-- informal proof\n\n/-\nProof:\nSuppose $k_{0}\\in K$.\nBy the surjectivity of $g$, there exists $h_{0}\\in H$ that $g(h_{0})=k_{0}$.\nBy the surjectivity of $f$, there exists $g_{0}\\in G$ that $f(g_{0})=h_{0}$.\nThen $g\\circ f(g_{0})=k_{0}$.\nThat is because $g\\circ f(g_{0})=g(f(g_{0}))=g(h_{0})=k_{0}$.\n-/\n\n-- formal proof\n\n/-\nIf $f:G\\to H$ and $g:H\\to K$ are surjective homomorphisms of groups, then the composition $g\\circ f:G\\to K$ is also a surjective homomorphism.\n-/\nexample {G H K: Type*} [Group G] [Group H] [Group K] (f : G →* H) (g : H →* K) (hf : Function.Surjective f) (hg : Function.Surjective g) : Function.Surjective (g.comp f) := by\n  -- Suppose $k_{0}\\in K$.\n  intro k\n  -- By the surjectivity of $g$, there exists $h_{0}\\in H$ that $g(h_{0})=k_{0}$.\n  obtain ⟨h, hk⟩ := hg k\n  -- By the surjectivity of $f$, there exists $g_{0}\\in G$ that $f(g_{0})=h_{0}$.\n  obtain ⟨g, gh⟩ := hf h\n  -- Then $g\\circ f(g_{0})=k_{0}$.\n  use g\n  -- That is because $g\\circ f(g_{0})=g(f(g_{0}))=g(h_{0})=k_{0}$.\n  simp only [MonoidHom.coe_comp, Function.comp_apply]\n  rw [gh, hk]",
    "informalProof": ""
  },
  {
    "id": 193,
    "title": "Example_3408B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $\\phi: G \\rightarrow G^{\\prime}$ be a group homomorphism. Show that $ab\\in \\operatorname{Ker}\\phi$ if and only if $ba\\in \\operatorname{Ker}\\phi$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem mul_mul'_one_eq_one_mul'_mul {G : Type*} [Group G] {a b : G} : (a * b = 1)  ↔ (b * a = 1) := by\n  constructor\n  · intro h\n    have : b * a = b * a * (b * a) := by\n        calc b * a\n          _ = b * 1 * a := by rw [mul_one]\n          _ = b * (a * b) * a := by rw [h]\n          _ = b * a * (b * a) := by group\n    symm at this\n    apply sq_cancel\n    rw [pow_two]\n    exact this\n  · intro h'\n    have : a * b = a * b * (a * b) := by\n        calc a * b\n          _ = a * 1 * b := by rw [mul_one]\n          _ = a * (b * a) * b := by rw [h']\n          _ = a * b * (a * b) := by group\n    symm at this\n    apply sq_cancel\n    rw [pow_two]\n    exact this\n\n\nexample {G G': Type*} [hG : Group G] [hG' : Group G'] (φ : G →* G') (a b : G) : a * b ∈ φ.ker ↔ b * a ∈ φ.ker := by \n    have h1 : a * b ∈ φ.ker ↔ φ a * φ b = 1 := by \n      rw [← map_mul] \n      exact MonoidHom.mem_ker φ\n    have h2 : b * a ∈ φ.ker ↔ φ b * φ a = 1 := by \n      rw [← map_mul] \n      exact MonoidHom.mem_ker φ\n    have h  : φ a * φ b = 1 ↔ φ b * φ a = 1 :=by \n      exact mul_mul'_one_eq_one_mul'_mul\n    exact (iff_congr (id (Iff.symm h1)) (id (Iff.symm h2))).mp h",
    "informalProof": "前面那个定理是直接抄的前面作业"
  },
  {
    "id": 195,
    "title": "Example_3410B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Prove that a homomorphism $\\phi: G \\rightarrow G^{\\prime}$ is an isomorphism(There exists a two-sided inverse map $\\phi^{-1}:G'\\to G$) if and only if it is injective and surjective.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample {G G' : Type*} [Group G] [Group G'] (φ : G →* G') : (∃ φ₁ : G' → G, Function.LeftInverse φ₁ φ ∧ Function.RightInverse φ₁ φ) ↔ (Function.Injective φ ∧ Function.Surjective φ) := by\n  constructor\n  · -- Necessity : If $\\phi$ has a left inverse, then $\\phi$ is a surjective.If $\\phi$ has a right inverse, then $\\phi$ is a injective.\n    rintro ⟨φ₁, h1, h2⟩\n    exact ⟨Function.LeftInverse.injective h1, Function.RightInverse.surjective h2⟩\n  · -- Adequacy : If $\\phi$ is a bijective, then it has a two-sided inverse.\n    rintro h\n    exact Function.bijective_iff_has_inverse.mp h\n",
    "informalProof": "    Necessity : If $\\phi$ has a left inverse, then $\\phi$ is a surjective.If $\\phi$ has a right inverse, then $\\phi$ is a injective.\n    Adequacy : If $\\phi$ is a bijective, then it has a two-sided inverse."
  },
  {
    "id": 196,
    "title": "Example_3411B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Prove that a if $G$ and $H$ are finite groups and their orders are coprime, then any homomorphism $f: G \\rightarrow H$ is trivial, i.e. $f(G) = \\{ 1_H \\}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G H: Type*} [Finite H] [Finite G][Group G] [Group H] (h: (Nat.card H).gcd (Nat.card G) =  1)(f : G →* H)  : ∀ p : G , f p = 1:= by \n  intro p\n  have hH: (f p) ^ (Nat.card H) = 1 := by exact pow_card_eq_one'\n  have hG: ( p ) ^ (Nat.card G) = 1 := by exact pow_card_eq_one'\n  have hfH: (f p) ^ (Nat.card G) = 1 := by \n    calc \n      _= f (p ^ (Nat.card G)) := by rw [map_pow]\n      _= f 1 := by rw [hG] \n      _= 1 := by exact MonoidHom.map_one f\n  rw [← pow_gcd_eq_one (f p) hH hfH]\n  simp only [h,pow_one]\n",
    "informalProof": ""
  },
  {
    "id": 197,
    "title": "Example_3412B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $\\phi: G \\rightarrow G^{\\prime}$ be a group homomorphism. Show that $\\phi(G)$ is Abelian if and only if $x y x^{-1} y^{-1} \\in \\operatorname{Ker}(\\phi)$ for all $x, y \\in G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Algebra.Group.Basic\nimport Mathlib.Tactic\nimport Init.Prelude\n\n-- Question:\n-- Let $\\phi: G \\rightarrow G^{\\prime}$ be a group homomorphism. Show that $\\phi(G)$ is Abelian\n-- if and only if $x y x^{-1} y^{-1} \\in \\operatorname{Ker}(\\phi)$ for all $x, y \\in G$.\n\n-- Ans:\n--\n-- (==>) just feed $f$ with $x$ and $y$, bu assumption we immediately obtain the result.\n-- (<==) since $x = f u$ for some $u$, feed the assumption with it and by the kernelity, all\n--       done.\n\n\n\nexample (G H : Type) [Group G] [Group H] (f : G →* H) :\n    (∀ x y : H, x ∈ f.range ∧ y ∈ f.range -> x * y = y * x)\n  ↔ ∀ x y : G, x * y * x⁻¹ * y⁻¹ ∈ f.ker := by\n    constructor\n    · intro foo\n      intro x y\n      apply (MonoidHom.mem_ker f).mpr\n      simp only [map_mul, map_inv]\n-- (==>) just feed $f$ with $x$ and $y$, bu assumption we immediately obtain the result.\n      have fx : f x ∈ f.range := by use x\n-- (==>) just feed $f$ with $x$ and $y$, bu assumption we immediately obtain the result.\n      have fy : f y ∈ f.range := by use y\n      obtain bar := foo (f x) (f y) ⟨fx, fy⟩\n      rw [bar]\n      group\n-- (<==) since $x = f u$ for some $u$, feed the assumption with it and by the kernelity, all\n--       done.\n    · intro foo\n      intro x y ⟨⟨u, ux⟩, ⟨v, vy⟩⟩\n      specialize foo u v\n      apply (MonoidHom.mem_ker f).mp at foo\n      simp only [map_mul, map_inv] at foo\n      rw [ux, vy] at foo\n      exact commutatorElement_eq_one_iff_mul_comm.mp foo\n\n",
    "informalProof": ""
  },
  {
    "id": 200,
    "title": "Example_3415B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $G$ be a group, for $g\\in G$, we set $f_g(x):=gxg^{-1}$ to be an isomorphism in $\\operatorname{Aut}(G)$, prove that the kernel of the homomorphism map $\\phi:G\\to\\operatorname{Aut}(G),\\ g\\mapsto f_g$ is the center of $G$, that is $\\operatorname{Ker}\\phi=Z(G)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Subgroup.Center\n\ntheorem kernal (G : Type*) [Group G] : MonoidHom.ker (@MulAut.conj G _) = Subgroup.center G := by\n--对于每个 g，证明共轭映射的核与中心子群相等\n  ext g\n  --应用核的定义和中心子群的定义。\n  rw [MonoidHom.mem_ker, Subgroup.mem_center_iff, DFunLike.ext_iff (f := MulAut.conj g) (g := 1)]\n  apply forall_congr'\n  --引入 x 并简化共轭映射的应用\n  intro x\n  simp only [MulAut.conj_apply, MulAut.one_apply, mul_inv_eq_iff_eq_mul, eq_comm (a := g * x)]\n",
    "informalProof": "         首先，假设 $g \\in \\operatorname{Ker}(\\phi)$，即 $f_g = \\operatorname{id}_G$。因此对于任意 $x \\in G$，都有 $gxg^{-1} = x$。这表明 $g$ 与任意 $x \\in G$ 都交换，因此 $g \\in Z(G)$，即 $g$ 是 $G$ 的中心元素。\n         其次，现在假设 $g \\in Z(G)$，即对于任意 $x \\in G$，有 $gx = xg$。所以 $gxg^{-1} = x$ 对于任意 $x$ 都成立，即 $f_g(x) = gxg^{-1} = x$。因此，$f_g = \\operatorname{id}_G$，从而 $g \\in \\operatorname{Ker}(\\phi)$。\n        由于证明了 $g \\in \\operatorname{Ker}(\\phi)$ 当且仅当 $g \\in Z(G)$，因此 $\\operatorname{Ker}(\\phi) = Z(G)$。\n        这就完成了证明，可得：对于任意 $g \\in G$，共轭映射 $f_g(x) = gxg^{-1}$ 是恒等映射（即 $f_g = \\operatorname{id}_G$）当且仅当 $g$ 是 $G$ 的中心元素。"
  },
  {
    "id": 201,
    "title": "Example_3416B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $f: G \\rightarrow H$ and $g : H \\rightarrow I$ be two homomorphisms of groups. Prove that the composition is trivial $(g\\circ f)(G)= \\{e\\}$ if and only if $f(G) \\subset \\operatorname{Ker}(g)$",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Function\nopen Set\nopen Subgroup MonoidHom\nnoncomputable def s {G H K : Type*} [Group G] [Group H] [Group K](f : G →* H ) (g  : H  →* K )  : ((g.comp f).range = ⊥ ) ↔ (f.range <= ker g):= by\n  constructor\n  -- show that when (g f G) = {e}, then f(G) is a subset of  ker g\n  · intro h y i\n    apply  (MonoidHom.mem_ker g).2\n    show g y ∈  (⊥ : Subgroup K)\n    rw [← h]\n    rcases i with ⟨x ,h⟩\n    refine MonoidHom.mem_range.mpr ?mp.h.mp.intro.a\n    use x\n    exact Eq.symm (DFunLike.congr_arg g (_root_.id (Eq.symm h)))\n--show that when f(G) is a subset of ker g, (g f G) = {e}\n  · intro h\n    ext y\n    constructor\n    · intro i\n      show y = 1\n      apply MonoidHom.mem_range.1 at i\n      rcases i with ⟨x,j⟩\n      rw [← j]\n      show g (f x) = 1\n      show f x ∈ g.ker\n      apply h\n      use x\n    · intro i\n      use 1\n      have : y = 1:= i\n      rw [this]\n      exact MonoidHom.map_one (g.comp f)\n",
    "informalProof": "-- show that when (g f G) = {e}, then f(G) is a subset of  ker g\n--show that when f(G) is a subset of ker g, (g f G) = {e}"
  },
  {
    "id": 205,
    "title": "Example_3420B",
    "lean_difficulty": "easy",
    "math_difficulty": "easy",
    "md": "Set $f:G\\to H$ is a homomorphism between two groups. If $f(a)$ is not of finite order, then $a$ is also not of finite order.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {G H : Type*} [Group G] [Group H]\nvariable {f : G →* H}  {a : G}\nexample (h1 : orderOf (f a) = 0) : ( orderOf a = 0) := by \n  simp [orderOf_eq_zero_iff'] at *\n  --unfold the property of \"orderof (f a)= 0\"\"orderOf a= 0\"\n  intro x hx \n  by_contra h2\n  --consider falsifying or dynying propositions\n  have h3 : (f a)^x = (f (a^x)) := by exact Eq.symm (MonoidHom.map_pow f a x)\n  --using the property of group homomphism we have (f a)^x = (f (a^x))\n  rw [h2] at h3\n  have h4 : (f 1)= 1 := by exact MonoidHom.map_one f\n  --using the property of group homomphism we have (f 1)= 1\n  rw [h4] at h3\n  exact h1 x hx h3\n  --with h1 x hx h3 we close the goal \"false\" ",
    "informalProof": "We assume there exists a $x \\in \\N$ which satisfied the property $a^x=1$\n\nThen by the fundament of group homomorphism $f(a)^x=f(a^x)=f(1)=1$ is contradict to the condition.\n\nSo our assumption is false , the original proposition is true."
  },
  {
    "id": 206,
    "title": "Example_3421B",
    "lean_difficulty": "normal",
    "math_difficulty": "easy",
    "md": "[Probably Hard]\n\nSet $f:G\\to H$ is a homomorphism between two groups. \n\nIf the range of $f$ has $n$ elements, then $x^{n} \\in \\operatorname{Ker} f$ for every $x \\in G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nGiven a homomorphism $f : G \\to H$ between two groups. Suppose the range of $f$ has $n$ elements, we need to prove that for any $g \\in G$, $g^n \\in \\ker(f)$.\n-/\nvariable {G H : Type*} [Group G] [Group H] (f : G →* H)\n\nexample (n : ℕ) (h : (Nat.card (f.range) = n)) : ∀ g : G, ((g ^ n) ∈ f.ker) := by\n  -- We need to prove that for any $ g \\in G $, $ g^n \\in \\ker(f) $.\n  intro g\n  show f (g ^ n) = 1\n  -- Since the range of $ f $ has $ n $ elements, we have $\\text{card}(f(G)) = n$.\n  have : orderOf (f g) ∣ n := by\n    rw [← h]\n    refine Subgroup.orderOf_dvd_natCard f.range ?hx\n    simp only [MonoidHom.mem_range, exists_apply_eq_apply]\n  -- Since $f$ is a homomorphism, we have $ f(g^n) = (f(g))^n $.\n  -- Let $o$ be the order of $f(g)$, then $o \\mid n$, because the image of $f(g)$ is finite and has $n$ elements.\n  have : (f g) ^ n = 1 := orderOf_dvd_iff_pow_eq_one.mp this\n  -- By the definition of order, we have $(f(g))^o = 1_H$, so $(f(g))^n = 1_H$.\n  simp only [map_pow, this]\n  -- Therefore, $g^n \\in \\ker(f)$.",
    "informalProof": "Proof:\n1. Let $ f : G \\to H $ be a homomorphism between two groups.\n2. Suppose the range of $ f $ has $ n $ elements, we need to prove that for any $ g \\in G $, $ g^n \\in \\ker(f) $.\n3. Since the range of $ f $ has $ n $ elements, we have $\\text{card}(f(G)) = n$.\n4. Since $f$ is a homomorphism, we have $ f(g^n) = (f(g))^n $.\n5. We need to prove that $(f(g))^n = 1_H$, i.e., $f(g^n) = 1_H$.\n6. Let $o$ be the order of $f(g)$, then $o \\mid n$, because the image of $f(g)$ is finite and has $n$ elements.\n7. By the definition of order, we have $(f(g))^o = 1_H$, so $(f(g))^n = 1_H$.\n8. Therefore, $g^n \\in \\ker(f)$."
  },
  {
    "id": 211,
    "title": "Example_4105B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "$S$ is a nonempty set of group $G$, define a relation on $G$ by $a \\sim b$  if and only if $ab^{-1} \\in S$. If $\\sim$ is a equivalence relation, show that $S$ is a subgroup of $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "\nvariable {G : Type*} [Group G]\n\ntheorem pro4105 {S : Set G} (sG : Setoid G) (h : sG.r = fun a b => (a * b⁻¹ ∈ S)) : \n    ∃ Sg : Subgroup G, Sg.carrier = S := by\n  let sG_eqv := sG.iseqv\n  -- rw [h] at sG_eqv\n  let sg1 := sG_eqv.refl\n  let sg2 : ∀ {x y}, (sG.r) x y → (sG.r) y x := sG_eqv.symm\n  let sg3 : ∀ {x y z}, (sG.r) x y → (sG.r) y z → (sG.r) x z:= sG_eqv.trans\n  --First, we transform the condition that it is an equivalence relationship into three axioms.\n  rw [h] at *\n  simp at *\n  let hS : Subgroup G := {\n    carrier := S\n  --Then, we provide the operation hS on set $S$, where $hS$ is a carrier on group $G$.\n    mul_mem' := by \n    --To show that $S$ is a subgroup of $G$, we need to verify that the product of any two elements in $S$ is still in $S$ first.\n      intro a b h x\n      have p : a * 1⁻¹ ∈ S := by \n        have sxq : a * 1⁻¹ = a := by group\n        exact Set.mem_of_eq_of_mem sxq h\n      have q : 1 * (b⁻¹) ⁻¹ ∈ S := by \n        have s : 1 * (b⁻¹)⁻¹ = b := by \n          refine Eq.symm (eq_mul_inv_of_mul_eq ?h)\n          exact mul_inv_self b\n        exact Set.mem_of_eq_of_mem s x \n        --We prove it by intro the condition and use $sg3$. To meet $sg3$, we prove $p$ and $q$. \n      have t : a * 1⁻¹ ∈ S → 1 * (b⁻¹)⁻¹ ∈ S → a * (b⁻¹)⁻¹ ∈ S := by\n        exact fun a_1 a_2 ↦ sg2 (sg2 (sg3 p q))\n      let qbq := t p q\n      have jc : (b⁻¹)⁻¹ = b := by\n          exact DivisionMonoid.inv_inv b\n      rw[jc] at qbq\n      exact qbq\n      --Then we transform $sg3$ into $t$ and get a proof.\n    one_mem' := by\n      exact sg1    \n    -- Next, we verify that $1$ is in the set $S$ by using $sg1$. \n    inv_mem' := by\n      simp\n      intro x o\n      have y : x * 1⁻¹ = x := by group\n      have dzy : x * 1⁻¹ ∈ S := by\n        exact Set.mem_of_eq_of_mem y o\n      have hck : 1 * x⁻¹ = x⁻¹ := by group\n      -- Finally, we verify that the inverse of an element in $S$ is still in $S$ by using $sg2$. We first intro the condition and prove $dzy$ and $hck$ to meet $sg2$.\n      have j : x * 1⁻¹ ∈ S → 1 * x⁻¹ ∈ S := by\n        exact fun a ↦ sg2 (sg2 (sg2 a))\n      let u := j dzy\n      rw[hck] at u\n      exact u\n  }\n      -- We transform $sg2$ into $u$ and done. So we show that $S$, with the operation $hS$, satisfying the requirements of the subgroup of $G$.\n  use hS\n--So we use $hS$ and prove that $S$ is a subgroup of $G$.",
    "informalProof": "  --First, we transform the condition that it is an equivalence relationship into three axioms.\n  --Then, we provide the operation hS on set $S$, where $hS$ is a carrier on group $G$.\n  --To show that $S$ is a subgroup of $G$, we need to verify that the product of any two elements in $S$ is still in $S$ first.\n  --We prove it by intro the condition and use $sg3$. To meet $sg3$, we prove $p$ and $q$. \n  --Then we transform $sg3$ into $t$ and get a proof.\n  -- Next, we verify that $1$ is in the set $S$ by using $sg1$. \n  -- Finally, we verify that the inverse of an element in $S$ is still in $S$ by using $sg2$. We first intro the condition and prove $dzy$ and $hck$ to meet $sg2$.\n  -- We transform $sg2$ into $u$ and done. So we show that $S$, with the operation $hS$, satisfying the requirements of the subgroup of $G$.\n  --So we use $hS$ and prove that $S$ is a subgroup of $G$."
  },
  {
    "id": 230,
    "title": "Example_4215B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $1\\rightarrow H\\overset{i}{\\rightarrow} G\\overset{p}{\\rightarrow}P\\rightarrow1$ be a sequence of homomorphism of groups where $1$ stands for the trivial group. Assume that $H,G$ and $P$ are all finite groups and the sequence is exact at $H,G$ and $P$. Prove that $|G|=|H||P|$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nopen Set\nopen Polynomial List Nat Sylow Fintype Setoid Classical\nopen Subgroup MonoidHom\n\n#synth Group Unit\n\nexample {H G P: Type*} [Fintype G][Fintype H][Fintype P][Group G] [Group H] [Group P](to_H : Unit →* H) (i : H →* G) (p : G →* P)  (to_T : P →* Unit) (exact_H : i.ker = to_H.range) (exact_G : p.ker = i.range) (exact_P: to_T.ker = p.range): card G = card H * card P:= by\n  -- First we prove that p is surjective, using the fact that the sequence is exact at P.\n  have surjp : Function.Surjective p:= by\n    refine range_top_iff_surjective.mp ?_\n    rw[← exact_P]\n    refine (eq_top_iff' to_T.ker).mpr ?_\n    intro x\n    refine (mem_ker to_T).mpr ?_\n    apply Unit.ext\n  -- Then we prove that i is injective, using the fact that the sequence is exact at H.\n  have inji : Function.Injective i:= by\n    refine (ker_eq_bot_iff i).mp ?_\n    rw [exact_H]\n    exact eq_bot_of_card_eq to_H.range rfl\n  -- Since i is injective, the range of i is exactly H.\n  have h1 : card H = card (i.range):= by\n    exact Eq.symm (card_range_of_injective inji)\n  rw [h1]\n  -- Using the first fundamental homomorphism theorem at G and the homomorphism p. \n  have card_ker_range : card (G ⧸ p.ker) = card P := by\n    apply Fintype.card_congr\n    exact (QuotientGroup.quotientKerEquivOfSurjective p surjp).toEquiv\n  -- Using the Lagrange's theorem at G.\n  have : card (G ⧸ p.ker) * card (p.ker) = card G := by\n    exact Eq.symm (card_eq_card_quotient_mul_card_subgroup p.ker)\n  rw[← this, card_ker_range]\n  simp_rw[exact_G]\n  rw[mul_comm]",
    "informalProof": "-- First we prove that p is surjective, using the fact that the sequence is exact at P.\n -- Then we prove that i is injective, using the fact that the sequence is exact at H.\n -- Since i is injective, the range of i is exactly H.\n -- Using the first fundamental homomorphism theorem at G and the homomorphism p. \n -- Finally using the Lagrange's theorem at G."
  },
  {
    "id": 241,
    "title": "Example_5202B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "In any ring $R$ and $a,b,c\\in R$, $a(b-c)=a b-a c$ and $(b-c) a=b a-c a$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [Ring R] (a b c : R) : a * (b - c) = a * b - a * c ∧ (b - c) * a = b * a - c * a := by\n--$\\mathrm{Proof.}$\n  constructor\n  · --1. $a(b-c)=a(b+(-c))=ab+a(-c)=ab+(-(ac))=ab-ac$.  \n    calc\n      _ = a * (b + (-c)) := by rw [sub_eq_add_neg b c]\n      _ = a * b + a * (-c) := by rw [mul_add]\n      _ = a * b + (- (a * c)) := by rw [mul_neg a c]\n      _ = a * b - a * c := by rw [sub_eq_add_neg]\n  · --$(b-c)a=(b+(-c))a=ba+(-c)a=ba+(-(ca))-ba-ca$.  \n    calc\n      _ = (b + (-c)) * a := by rw [sub_eq_add_neg b c]\n      _ = b * a + (-c) * a := by rw [add_mul]\n      _ = b * a + (-(c * a)) := by rw [neg_mul c a]\n      _ = b * a - c * a := by rw [sub_eq_add_neg]\n--Hence, we complete this proof.\n--$\\square$",
    "informalProof": "$\\mathrm{Proof.}$  \n1. $a(b-c)=a(b+(-c))=ab+a(-c)=ab+(-(ac))=ab-ac$.  \n2. $(b-c)a=(b+(-c))a=ba+(-c)a=ba+(-(ca))-ba-ca$.  \n\nHence, we complete this proof.  \n$\\square$"
  },
  {
    "id": 243,
    "title": "Example_5204B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a commutative ring, and suppose $a^2=b^3=0$ for some $a, b \\in R$. Show that $(a+b)^4 = 0$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n/-Let $R$ be a commutative ring, and suppose $a^2=b^3=0$ for some $a, b \\in R$. Show that $(a+b)^4 = 0$.-/\nvariable {R : Type*}[CommRing R]\nexample (a b : R) (ha : a ^ 2 = 0) (hb : b ^ 3 = 0) : (a + b) ^ 4 = 0 := by \n--$\\begin{aligned} \\because(a+b)^4=a^2 \\left(a^2+4 a b+6 b^2\\right)+b^3 (a+b), a^2=0, b^3=0 \\ &\\ \\therefore(a+b)^4=0 \\left(a^2+4 a b+6 b^2\\right)+0 (a+b)=0 \\end{aligned}$\n  calc\n  _ = a ^ 2 * (a ^ 2 + 4 * a * b + 6 * b ^ 2) + b ^ 3 * (4 * a + b) := by ring\n  _ = 0 := by rw [ha, hb, zero_mul, zero_mul, add_zero]",
    "informalProof": "$\\begin{aligned} \\because(a+b)^4=a^2 \\left(a^2+4 a b+6 b^2\\right)+b^3 (a+b), a^2=0, b^3=0 \\ &\n \\ \\therefore(a+b)^4=0 \\left(a^2+4 a b+6 b^2\\right)+0 (a+b)=0 \\end{aligned}$"
  },
  {
    "id": 245,
    "title": "Example_5206B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a ring with unit. Then there is a unique homomorphism $f:\\mathbb Z\\to R$ such that $1\\mapsto 1_R$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nLet $R$ be a ring with unit. Then there is a unique homomorphism $f:\\mathbb Z\\to R$ such that $1\\mapsto 1_R$.   \n-/\nexample (R : Type*) [Ring R] : ∃! f : ℤ →+* R, True := by\n  --Firstly, we show that such $f$ is a morphism.    \n  use {\n    toFun := fun k ↦ k • 1\n    --By calculaton, we know that the mapping is a morphism of multiplicative group.   \n    map_mul' := by \n      simp only [zsmul_eq_mul, Int.cast_mul, mul_one, implies_true]\n    --By calculaton, we know that the mapping is a morphism of additive group.   \n    map_add' := by \n      simp only [zsmul_eq_mul, Int.cast_add, mul_one, implies_true]\n    --By direct check, we have the mapping maps multiplicative identity to multiplicative identity.   \n    map_one' := by \n      simp only [one_smul]\n    --By direct check, we have the mapping maps additive identity to additive identity.   \n    map_zero' := by \n      simp only [zero_smul]\n  }\n  --Then, we show that every morphism from $ℤ$ to $R$ is equal to $f$. It's diret result of the fact that the morphism $f$ sends the multiplicative identity 1 to the multiplicative identity of $R$.   \n  simp only [zsmul_eq_mul, mul_one, true_implies, true_and]\n  intro f \n  ext a\n  simp only [eq_intCast]",
    "informalProof": "Proof:  \n1. Firstly, we show that such $f$ is a morphism.    \n2. By calculaton, we know that the mapping is a morphism of multiplicative group.   \n3. By calculaton, we know that the mapping is a morphism of additive group.   \n4. By direct check, we have the mapping maps multiplicative identity to multiplicative identity.   \n5. By direct check, we have the mapping maps additive identity to additive identity.   \n6. Then, we show that every morphism from $ℤ$ to $R$ is equal to $f$. It's diret result of the fact that the morphism $f$ sends the multiplicative identity 1 to the multiplicative identity of $R$.   "
  },
  {
    "id": 246,
    "title": "Example_5207B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "[Probably Hard]\n\n    Let $R$ be a ring, and suppose that $a^3=a, \\forall a\\in R$. Prove that $R$ is commutative.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nLet $R$ be a ring, and suppose that $a^3=a, \\forall a\\in R$. Prove that $R$ is commutative.\n\nWe can prove this by showing that the arbitrary element $a$ lies in the center of $R$.\nFor this purpose we need to introduce several lemmas.\n\nLemma1 : $\\forall a, b \\in R, a * b = 0 \\Rightarrow b * a = 0$.\n\nThis lemma relies on the assumption that $∀ a : R, a ^ 3 = a$, and is obtained by some rewrite.\n\nLemma2 : $\\forall c \\in R$, $c^2$ is in the center of $R$.\n\nThis can be proved from two sides, and relies on lemma1:\n\n$$c (x - c x) = 0 \\Rightarrow (x - c x) c = 0 \\Rightarrow x c = c x c$$\n$$(x - x c) c = 0 \\Rightarrow c (x - x c) = 0 \\Rightarrow c x = c x c$$\n\nLemma3 : If $c \\in R ∧ c^2 = 2 * c$, then $c$ is also central in $R$.\n\nThis is also proved by verifing $c = c^3 = 2 c^2$, where $2$ and $c^2$ are both commutative in $R$.\n\nLemma4 : $a + a^2$ is central. This is obtained by set $c = a + a^2$ in the previous lemma and do some simplication.\n\nFinally, it is easy to verify that $a = (a + a^2) - a^2$ is a combination of two elements in the central of $R$, thus is itself in the center of $R$, and commutes with another arbitrary element $b \\in R$.\n-/\n\ntheorem commring_if_a3eqa {R : Type*} [Ring R] : (∀ a : R, a ^ 3 = a) → ∀ (a b : R), a * b = b * a := by\n/- We can prove this by showing that the arbitrary element $a$ lies in the center of $R$. -/\n/- For this purpose we need to introduce several lemmas. -/\n  intro h a b\n/- Lemma1 : $\\forall a, b \\in R, a * b = 0 \\Rightarrow b * a = 0$. -/\n  have ab0_ba0 : ∀ (x y : R), x * y = 0 → y * x = 0 := by\n/- This lemma relies on the assumption that $∀ a : R, a ^ 3 = a$, and is obtained by some rewrite. -/\n    intro x y hxy\n    calc\n      y * x = (y * x)^3 := by rw[h]\n      _ = y * (x * y) * (x * y) * x := by rw [pow_three']; simp only [mul_assoc]\n      _ = y * 0 * 0 * x := by rw [hxy]\n      _ = 0 := by simp only [mul_zero, zero_mul]\n/- Lemma2 : $\\forall c \\in R$, $c^2$ is in the center of $R$. -/\n/- This can be proved from two sides, and relies on lemma1: -/\n/- $$c (x - c x) = 0 \\Rightarrow (x - c x) c = 0 \\Rightarrow x c = c x c$$ -/\n/- $$(x - x c) c = 0 \\Rightarrow c (x - x c) = 0 \\Rightarrow c x = c x c$$ -/\n  have csq_eqc_imp_ccentral : ∀ (c x : R), c^2 = c → c * x = x * c := by\n    intro c x hc\n    have csymm₁ : c * (x - c * x) = 0 := by simp only [mul_sub_left_distrib, ← mul_assoc, ← pow_two, hc, sub_eq_zero]\n    have csymm₂ : (x - c * x) * c = 0 := by apply ab0_ba0; exact csymm₁\n    have xceq_cxc : x * c = c * x * c := by\n      simp only [mul_sub_right_distrib, sub_eq_zero] at csymm₂\n      exact csymm₂\n    have csymm₃ : (x - x * c) * c = 0 := by simp only [mul_sub_right_distrib, mul_assoc, ← pow_two, hc, sub_eq_zero]\n    have csymm₄ : c *  (x - x * c) = 0 := by apply ab0_ba0; exact csymm₃\n    have cxeq_cxc : c * x = c * x * c := by\n      simp only [mul_sub_left_distrib, sub_eq_zero, ← mul_assoc] at csymm₄\n      exact csymm₄\n    rw [cxeq_cxc, xceq_cxc]\n/- Lemma3 : If $c \\in R ∧ c^2 = 2 * c$, then $c$ is also central in $R$. -/\n/- This is also proved by verifing $c = c^3 = 2 c^2$, where $2$ and $c^2$ are both commutative in $R$. -/\n  have sq_central : ∀ (x y : R), x^2 * y = y * x^2:= by\n    intro x y\n    have sqsq_eq_sq : (x ^ 2) ^ 2 = x ^ 2 := by rw [← pow_mul]; norm_num; rw [pow_succ, h, pow_two]\n    exact csq_eqc_imp_ccentral (x^2) y sqsq_eq_sq\n  have sq_eq_2s_central : ∀ (x y : R), x^2 = 2 * x → x * y = y * x := by\n    intro x y hx\n    have x_eq_2xsq : x = 2 * x^2 := by\n      nth_rw 1 [← h x]; rw [pow_succ]; nth_rw 1 [hx]; rw [pow_two, mul_assoc]\n    rw [x_eq_2xsq]\n    simp only [mul_assoc, sq_central x, two_mul, right_distrib, left_distrib]\n/- Lemma4 : $a + a^2$ is central. This is obtained by set $c = a + a^2$ in the previous lemma and do some simplication. -/\n  have spsq_central : ∀ (x y : R), (x + x^2) * y = y * (x + x^2) := by\n    intro x y\n    apply sq_eq_2s_central\n    nth_rw 1 [pow_two]; simp only [right_distrib, left_distrib, sq, ← mul_assoc, ← pow_succ]\n    rw [← pow_three', h, ← pow_two]\n    simp only [← add_assoc, pow_two, two_mul, right_distrib]\n    rw [add_comm (x * x), add_assoc x, add_comm (x * x), ← add_assoc]\n\n/- Finally, it is easy to verify that $a = (a + a^2) - a^2$ is a combination of two elements in the central of $R$, thus is itself in the center of $R$, and commutes with another arbitrary element $b \\in R$. -/\n  have aeq_central : a = (a + a^2) - a^2 := by simp only [add_sub_cancel_right]\n  rw [aeq_central, mul_sub_right_distrib, mul_sub_left_distrib]\n  rw [spsq_central a]\n  rw [sq_central a]\n",
    "informalProof": "Let $R$ be a ring, and suppose that $a^3=a, \\forall a\\in R$. Prove that $R$ is commutative.\n\nWe can prove this by showing that the arbitrary element $a$ lies in the center of $R$.\nFor this purpose we need to introduce several lemmas.\n\nLemma1 : $\\forall a, b \\in R, a * b = 0 \\Rightarrow b * a = 0$.\n\nThis lemma relies on the assumption that $∀ a : R, a ^ 3 = a$, and is obtained by some rewrite.\n\nLemma2 : $\\forall c \\in R$, $c^2$ is in the center of $R$.\n\nThis can be proved from two sides, and relies on lemma1:\n\n$$c (x - c x) = 0 \\Rightarrow (x - c x) c = 0 \\Rightarrow x c = c x c$$\n$$(x - x c) c = 0 \\Rightarrow c (x - x c) = 0 \\Rightarrow c x = c x c$$\n\nLemma3 : If $c \\in R ∧ c^2 = 2 * c$, then $c$ is also central in $R$.\n\nThis is also proved by verifing $c = c^3 = 2 c^2$, where $2$ and $c^2$ are both commutative in $R$.\n\nLemma4 : $a + a^2$ is central. This is obtained by set $c = a + a^2$ in the previous lemma and do some simplication.\n\nFinally, it is easy to verify that $a = (a + a^2) - a^2$ is a combination of two elements in the central of $R$, thus is itself in the center of $R$, and commutes with another arbitrary element $b \\in R$.\n"
  },
  {
    "id": 251,
    "title": "Example_5212B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a commutative ring. $a,b\\in R$ are nilpotent. Prove that $a+b$ is also nilpotent.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open BigOperators\nopen Finset\n\nexample {R : Type*} [hR :CommRing R] (a b: R) {ha :∃ (m :ℕ ) ,a ^ m = 0} {hb :∃ (n :ℕ ) ,b ^ n = 0} : ∃ (k :ℕ ), (a + b) ^ k =0 :=by\n  --1) 由R是交换环 → ab =ba \n  have :a * b = b * a :=by\n    apply CommMonoid.mul_comm a b\n  --2) a, b幂零 → a^m = b^n =0\n  rcases ha with ⟨ m, hm⟩ \n  rcases hb with ⟨ n, hn⟩ \n  --3) 仅证（a+b）^(m+n) =0\n  use m + n\n  rw [add_pow]\n  --4) 由二项式定理：（a+b)^(m+n) =∑(Nat.choose m+n k) * a^k * b^(m+n-k)\n  refine sum_eq_zero ?h.h\n  --5) 仅证:(Nat.choose m+n k) * a^k * b^(m+n-k)=0\n  intro k _\n  --6)case1: k≥ m → a^k =0 → (Nat.choose m+n k) * a^k * b^(m+n-k)=0\n  by_cases h : k ≥ m\n  · have : a ^ k = 0 := by\n      exact pow_eq_zero_of_le h hm\n    rw [this, zero_mul, zero_mul]\n  --7)case2: k< m → m+n-k>n → b^(m+n-k) =0 → (Nat.choose m+n k) * a^k * b^(m+n-k)=0\n  · have : m + n - k ≥ n := by\n      rw [add_comm]\n      apply Nat.le_sub_of_add_le\n      apply Nat.add_le_add_left\n      exact Nat.le_of_not_ge h\n    have : b ^ (m + n - k) = 0 := by\n      exact pow_eq_zero_of_le this hn\n    rw [this, mul_zero, zero_mul]",
    "informalProof": ""
  },
  {
    "id": 252,
    "title": "Example_5213B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "In an integral domain $R$, if $a\\in R$ and natural number $n\\in\\mathbb N$ satisfy $a^n=0$, then $a=0$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-Example_5213B-/\n/-In an integral domain $R$, if $a\\in R$ and natural number $n\\in\\mathbb N$ satisfy $a^n=0$, then $a=0$.-/\nexample {R : Type*} [Ring R] [NoZeroDivisors R] (a : R) (n : ℕ) (eq : a ^ n = 0) : a = 0 := by\n  /-We use induction to prove : $\\forall a\\in R, a^{n}=0 \\Rightarrow a=0$.-/\n  induction' n with m h generalizing a\n  /-If $n=0$, then $1=a^{0}=0$. This leads to contradiction.-/\n  · rw [pow_zero] at eq\n    exact eq_zero_of_zero_eq_one eq.symm a \n  /-If the proposition holds for $m$, then for $m+1$. For $R$ is an integral domain, $a^{m+1}=0 \\Rightarrow a^{m}*a^{1}=0\\Rightarrow a^{m}=0$ or $a^{1}=0$.-/\n  · rw [pow_add] at eq\n    rcases eq_zero_or_eq_zero_of_mul_eq_zero eq with hm | h1\n    /-If $a^{m}=0$, use inductive assumptions we have $a=0$.-/\n    exact h a hm\n    /-If $a^{1}=0$, then $a=a^{1}=0$.-/\n    rw [← h1, pow_one]",
    "informalProof": "In an integral domain $R$, if $a\\in R$ and natural number $n\\in\\mathbb N$ satisfy $a^n=0$, then $a=0$.\n\nProof:\n1. We use induction to prove : $\\forall a\\in R, a^{n}=0 \\Rightarrow a=0$.\n2. If $n=0$, then $1=a^{0}=0$. This leads to contradiction.\n3. If the proposition holds for $m$, then for $m+1$. For $R$ is an integral domain, $a^{m+1}=0 \\Rightarrow a^{m}*a^{1}=0 \\Rightarrow a^{m}=0$ or $a^{1}=0$. If $a^{m}=0$, use inductive assumptions we have $a=0$. If $a^{1}=0$, then $a=a^{1}=0$."
  },
  {
    "id": 253,
    "title": "Example_5214B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a ring with identity $1$ and $x$ be an element not equal to zero. If there exists $y \\in R$ s.t. $xy = 1$ and $z \\in R$ s.t. $zx = 1$, then $y=z$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "--Let $R$ be a ring with identity $1$ and $x$ be an element not equal to zero. If there exists $y \\in R$ s.t. $xy = 1$ and $z \\in R$ s.t. $zx = 1$, then $y=z$.\nimport Mathlib.RingTheory.Ideal.QuotientOperations\nimport Mathlib.RingTheory.Localization.Basic\nimport Mathlib.RingTheory.DedekindDomain.Ideal\nimport Mathlib.Analysis.Complex.Polynomial\nimport Mathlib.Data.ZMod.Quotient\nimport MIL.Common\nexample {R : Type*} [Ring R] {x y z: R} (h1 : x * y = 1) (h2 : z * x = 1): y = z :=by\n  have ha : z * x * y = y := by rw [h2,one_mul]\n  -- multiply both sides by y\n  rw [mul_assoc,h1,mul_one] at ha\n  -- use x * y = 1\n  symm\n  exact ha\n  -- Q.E.D.\n",
    "informalProof": "Focus on $z * x = 1$,multiply both sides by y.    \nWe can get $z * x * y = y$.    \nUse $x * y = 1$.    \nWe know $y = z$.  \nThat's exactly what we want.  \nQ.E.D."
  },
  {
    "id": 262,
    "title": "Example_5304B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Suppose $R$ is an integral domain, show that for two element $r_1,r_2\\in R$, the principal ideals $r_1R=r_2R$ iff there exists $u\\in R^\\times$ s.t. $r_1=ur_2$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\n\nvariable {R : Type*} [CommRing R] [IsDomain R]\n\nexample (r₁ r₂ : R) : Ideal.span {r₁} = Ideal.span {r₂} ↔ ∃ u : R, IsUnit u ∧ r₁ = u * r₂ := by\n  constructor\n  · intro h\n    -- Suppose $(r_1) = (r_2)$, we start by considering two cases: $r_1 = 0$ and $r_1 \\neq 0$.\n    by_cases zero1 : r₁ = 0\n    · -- In the first case where $r_1 = 0$, we show that $r_1 = 1 * r_2$.\n      use 1; simp [zero1] at *\n      -- Since $r_1 = 0$, $r_2$ must also generate the zero ideal.\n      rw [Set.singleton_zero, Ideal.span_zero] at h\n      -- Thus, $r_2$ must be zero, and $u = 1$ satisfies the requirement.\n      symm; apply Ideal.span_singleton_eq_bot.mp\n      rw [h]\n    · -- In the second case where $r_1 \\neq 0$, we again consider two sub-cases: $r_2 = 0$ and $r_2 \\neq 0$.\n      by_cases zero2 : r₂ = 0\n      · -- If $r_2 = 0$, a similar argument shows that we can take $u = 1$.\n        use 1; simp [zero2] at *\n        rw [Set.singleton_zero, Ideal.span_zero] at h\n        apply Ideal.span_singleton_eq_bot.mp\n        rw [h]\n      · -- If $r_2 \\neq 0$,\n        -- we use the fact that $r_1$ is in the ideal generated by $r_2$ to express $r_1$ as $u \\cdot r_2$ for some $u$ in $R$.\n        have : r₁ ∈ Ideal.span {r₂} := by\n          rw [← h]\n          exact Ideal.mem_span_singleton_self r₁\n        rcases (Ideal.mem_span_singleton'.mp this) with ⟨u, equ⟩\n        -- Similarly, $r_2$ is in the ideal generated by $r_1$, allowing us to express $r_2$ as $v \\cdot r_1$ for some $v$ in $R$.\n        have : r₂ ∈ Ideal.span {r₁} := by\n          rw [h]\n          exact Ideal.mem_span_singleton_self r₂\n        rcases (Ideal.mem_span_singleton'.mp this) with ⟨v, eqv⟩\n        -- We then show that $u$ is a unit satifying the requirement.\n        use u; constructor\n        · -- First we show $u$ is indeed a unit by demonstrating that $u \\cdot v = 1 = v \\cdot u$,\n          apply isUnit_iff_exists.mpr\n          use v; constructor\n          · have equv : (u * v - 1) * r₁ = 0 := by rw [sub_mul, one_mul,  mul_assoc, eqv, equ, sub_self]\n            simp [zero1] at equv\n            rw [← zero_add 1, eq_add_of_sub_eq equv]\n          · have eqvu : (v * u - 1) * r₂ = 0 := by rw [sub_mul, one_mul,  mul_assoc, equ, eqv, sub_self]\n            simp [zero2] at eqvu\n            rw [← zero_add 1, eq_add_of_sub_eq eqvu]\n        · -- and the equation $r_1 = u \\cdot r_2$ is already proven.\n          rw [equ]\n  · -- If there exists a unit $u$ such that $r_1 = u * r_2$,\n    rintro ⟨u, u_unit, eq⟩\n    -- we have $(r_1) = (u * r_2) = (r_2)$.\n    rw [eq]\n    apply Ideal.span_singleton_mul_left_unit u_unit r₂\n",
    "informalProof": "Proof:\n1. Suppose $(r_1) = (r_2)$, We start by considering two cases: $r_1 = 0$ and $r_1 \\neq 0$.\n2. In the first case where $r_1 = 0$, we show that r_1 = 1 * r_2.\n3. Since $r_1 = 0$, $r_2$ must also generate the zero ideal.\n4. Thus, $r_2$ must be zero, and $u = 1$ satisfies the requirement.\n5. In the second case where $r_1 \\neq 0$, we again consider two sub-cases: $r_2 = 0$ and $r_2 \\neq 0$.\n6. If $r_2 = 0$, a similar argument shows that we can take $u = 1$.\n7. If $r_2 \\neq 0$, we use the fact that $r_1$ is in the ideal generated by $r_2$ to express $r_1$ as $u \\cdot r_2$ for some $u$ in $R$.\n8. Similarly, $r_2$ is in the ideal generated by $r_1$, allowing us to express $r_2$ as $v \\cdot r_1$ for some $v$ in $R$.\n9. We then show that $u$ is a unit satifying the requirement.\n10. First we show $u$ is indeed a unit by demonstrating that $u \\cdot v = 1 = v \\cdot u$,\n11. and the equation $r_1 = u \\cdot r_2$ is already proven.\n12. If there exists a unit $u$ such that $r_1 = u * r_2$, we have $(r_1) = (u * r_2) = (r_2)$."
  },
  {
    "id": 269,
    "title": "Example_5311B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "[Hard]\n\nSuppose that $R$ is a commutative ring with identity. For a subset $S$ of $R$, let $\\operatorname{Span}(S)$ be the minimal ideal containing elements in $S$. Prove that\n\n$\\operatorname{Span}(S)=\\left\\{\\sum_{s\\in S'}r_ss|S'\\text{ is a finite subset of }S,r_s\\in R\\ \\forall s\\in S'\\right\\}.$\n\nIn other words, prove that the latter one is an ideal and any ideal containing $S$ also contains the right-hand-side.",
    "comment": "好的，谢谢指出",
    "suggestion": "",
    "formalProof": "/-\nSuppose that $R$ is a commutative ring with identity. For a subset $S$ of $R$, let $\\operatorname{Span}(S)$ be the minimal ideal containing elements in $S$. Prove that\n\n$\\operatorname{Span}(S)=\\left\\{\\sum_{s\\in S'}r_ss|S'\\text{ is a finite subset of }S,r_s\\in R\\ \\forall s\\in S'\\right\\}.$\n\nIn other words, prove that the latter one is an ideal and any ideal containing $S$ also contains the right-hand-side.\n-/\nexample {R : Type*} [CommRing R] (S : Set R) : (Ideal.span S) = {x : R | ∃ T : Multiset (R × S), x = Multiset.sum (Multiset.map (fun (x : R × S) ↦ (x.1 : R) * (x.2 : R)) T)} := by\n  set I_set : Set R := {x : R | ∃ T : Multiset (R × S), x = Multiset.sum (Multiset.map (fun (x : R × S) ↦ (x.1 : R) * (x.2 : R)) T)}\n  --Define $I$ to be the ideal of the latter form.Firstly, we prove that $I$ is an ideal.  \n  let I : Ideal R := {\n    carrier := I_set\n    --Note that elements in $I$ are the elements that can be written as the sum of multiple of elements in $S$ and $R$, thus $I$ is closed under addition.  \n    add_mem' := by \n      intro a b ha hb\n      rcases ha with ⟨Ta, hTa⟩\n      rcases hb with ⟨Tb, hTb⟩\n      use Ta + Tb\n      rw [hTa, hTb]\n      simp only [Multiset.map_add, Multiset.sum_add]\n    --Also, it's clear that 0 is contained in $I$ by definition.  \n    zero_mem' := by \n      use 0\n      simp only [Multiset.map_zero, Multiset.sum_zero]\n    --Also note that $I$ is closed under multiplying elements in $R$. From all these above we may conclude that $I$ is an ideal.  \n    smul_mem' := by\n      intro c a ⟨Ta, hTa⟩\n      use Multiset.map (fun x ↦ ⟨c * x.1, x.2⟩) Ta\n      simp only [smul_eq_mul, Multiset.map_map, Function.comp_apply]\n      simp_rw [mul_assoc]\n      rw [hTa]\n      exact Eq.symm Multiset.sum_map_mul_left\n  }\n  apply Set.Subset.antisymm\n  --Then, we show that $I$ contains the span of $S$. It's clear since $I$ is an ideal that contains $S$.  \n  · show (Ideal.span S) ≤ I \n    apply Ideal.span_le.mpr\n    intro s hs\n    use {⟨1, ⟨s, hs⟩⟩}\n    simp only [Multiset.coe_singleton, Multiset.map_singleton, one_mul, Multiset.sum_singleton]\n  --Then we need to show that $I$ is contained by the span of $S$. To achieve this , we show that every ideal that contains $S$ should also contain $I$. That is, we show that for any $a$ $∈$ $I$, we have $a$ $∈$ the span of $S$. It comes from the definition of ideal.  \n  · intro a ⟨T, hT⟩\n    rw [hT]\n    apply IsAddSubmonoid.multiset_sum_mem (s := ((Ideal.span S) : Set R)) ?_ (Multiset.map (fun x => x.1 * x.2) T) ?_\n    exact ⟨((Ideal.span S).toAddSubmonoid).zero_mem, fun ha hb ↦ (by apply ((Ideal.span S).toAddSubmonoid).add_mem ha hb)⟩\n    intro a ha\n    simp only [Multiset.mem_map, Prod.exists, Subtype.exists, exists_and_right] at ha\n    obtain ⟨r, ⟨s, ⟨⟨hs, _⟩, h⟩⟩⟩ := ha\n    rw [← h]\n    apply (Ideal.span S).smul_mem _ (Ideal.subset_span hs)",
    "informalProof": "Proof:  \n1. Define $I$ to be the ideal of the latter form.Firstly, we prove that $I$ is an ideal.   \n2. Note that elements in $I$ are the elements that can be written as the sum of multiple of elements in $S$ and $R$, thus $I$ is closed under addition.   \n3. Also, it's clear that 0 is contained in $I$ by definition.    \n4. Also note that $I$ is closed under multiplying elements in $R$. From all these above we may conclude that $I$ is an ideal.  \n5. Then, we show that $I$ contains the span of $S$. It's clear since $I$ is an ideal that contains $S$.   \n6. Then we need to show that $I$ is contained by the span of $S$. To achieve this , we show that every ideal that contains $S$ should also contain $I$. That is, we show that for any $a$ $∈$ $I$, we have $a$ $∈$ the span of $S$. It comes from the definition of ideal.   "
  },
  {
    "id": 273,
    "title": "Example_5315B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a commutative ring with identity and $I_1$ and $I_2$ be two ideals of $R$. Assume that $I$ is an ideal containing $I_1$ and $I_2$, prove that $I$ contains $I_1+I_2$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import MIL.Common\n\n\nexample {R : Type*} [CommRing R] (I : Ideal R ) (J : Ideal R) (K : Ideal R) (h₁ : I ≤ K ) (h₂ : J ≤ K) : I + J ≤ K := by \n  intro x hx \n  -- it suffices to show ∀ x ∈ I + J, x ∈ K\n  rw [Submodule.add_eq_sup, Submodule.mem_sup] at hx \n  -- x ∈ I + J  ↔ ∃ y ∈ I, ∃ z ∈ J, y + z = x\n  rcases hx with ⟨y, hy, ⟨z, hz,eq⟩⟩\n  rw [← eq]\n  -- x ∈ K ↔ y + z ∈ K\n  exact (Submodule.add_mem_iff_right K (h₁ hy)).mpr (h₂ hz)\n  -- Since y ∈ I ≤ K and z ∈ J ≤ K, y + z ∈ K  ",
    "informalProof": "$\\text{It suffices to show } \\forall \\ x \\in I + J, x\\in K.\\\\$\n$x \\in I + J \\iff \\exists \\ y \\in I, \\exists \\ z \\in J, y+z=x\\\\$\n$x\\in K \\iff y + z \\in K\\\\$\n$\\text{Since } y\\in I \\subset K \\text{ and }  z \\in J \\subset K, y+z\\in K.$\n"
  },
  {
    "id": 275,
    "title": "Example_5402B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $R$ be a ring with identity $1$. Show that the map $f:R\\to R$ given by $f(x)=axb$ is an isomorphism iff $ab=ba=1$. [Hint: if $ba\\neq 1$, there are infinitely many $c$ that $ac=1$.]",
    "comment": "好的，谢谢",
    "suggestion": "",
    "formalProof": "/- \nLet $R$ be a ring with identity $1$. Show that the map $f:R\\to R$ given by $f(x)=axb$ is an isomorphism iff $ab=ba=1$. [Hint: if $ba\\neq 1$, there are infinitely many $c$ that $ac=1$.]\n-/\ndef IsIsomorphism {R : Type*} [Ring R] (f : R → R) : Prop := ∃ g : R ≃+* R, g.toFun = f\n\nexample {R : Type*} [Ring R] (a : R) (b : R) : (IsIsomorphism (fun (x : R) ↦ ((a * x * b) : R))) ↔ (a * b = 1 ∧ b * a = 1) := by\n  unfold IsIsomorphism\n  --We devide the proof into two part. Firstly, we show that if $f$ is an isomorphism, then $a * b = b * a = 1$.   \n  constructor\n  · rintro ⟨func, eq⟩\n    --Firstly, since $f$ is an isomorphism, we have $f(1) = 1$, that is, $a * b = 1$.    \n    simp only [RingEquiv.toEquiv_eq_coe, Equiv.toFun_as_coe, EquivLike.coe_coe] at eq\n    have h1: ∀ x : R, func x = (fun x => a * x * b) x := by\n      intro x\n      apply congr_fun\n      exact eq\n    have h2: func 1 = (fun x => a * x * b) 1 := by\n      apply h1\n    simp only [map_one, mul_one] at h2\n    rw [h2]\n    simp only [true_and]\n    --Then, calculate $f(b * a) = a * (b * a) * b = f(b) * f(a)$, by simplification, we have $b * a = a * b$.    \n    have: func (b * a) = (fun x => a * x * b) (b * a) := by\n      apply h1\n    simp only [map_mul] at this\n    rw [h1 b ,h1 a] at this\n    simp only[mul_assoc, h2.symm] at this\n    simp only [mul_one, one_mul] at this\n    exact this\n  · intro h\n    --We show another direction. Given that $a * b = b * a = 1$, we show that $f$ is an isomorphism.   \n    rcases h with ⟨h1, h2⟩\n    use {\n      toFun := fun x => a * x * b,\n      --$f$ is bijective since $g : R → R , x ↦ b * x * a$ is both the left and right inverse of $f$, this shows that f is invertible and thus bijective.   \n      invFun := fun x => b * x * a,\n      left_inv := by\n        intro x\n        simp \n        rw [mul_assoc, mul_assoc, h2, mul_one, <-mul_assoc, h2, one_mul]\n      right_inv := by\n        intro x\n        simp only [mul_assoc, h1, h2]\n        simp [←mul_assoc, h1, h2]\n      --Then we show that $f$ is a morphism of multiplicative semigroup, since $b * a = 1$, we have $f(x * y) = a * x * y * b = a * x * 1 * y * b = a * x * b * a * x * b = f(x) * f(y)$.   \n      map_mul' :=by \n        intro x y\n        simp only\n        rw[← mul_assoc, mul_assoc ]\n        nth_rw 1 [← mul_one (a * x)]\n        rw[← h2]\n        group\n      --$f$ is a morphism of additive group comes from the distributive law.   \n      map_add' :=by \n        intro x y\n        simp only\n        rw[mul_add,add_mul] \n    }",
    "informalProof": "Proof:  \n1. We devide the proof into two part. Firstly, we show that if $f$ is an isomorphism, then $a * b = b * a = 1$.   \n2. Firstly, since $f$ is an isomorphism, we have $f(1) = 1$, that is, $a * b = 1$.    \n3. Then, calculate $f(b * a) = a * (b * a) * b = f(b) * f(a)$, by simplification, we have $b * a = a * b$.    \n4. We show another direction. Given that $a * b = b * a = 1$, we show that $f$ is an isomorphism.  \n5. $f$ is bijective since $g : R → R , x ↦ b * x * a$ is both the left and right inverse of $f$, this shows that f is invertible and thus bijective.   \n6. Then we show that $f$ is a morphism of multiplicative semigroup, since $b * a = 1$, we have $f(x * y) = a * x * y * b = a * x * 1 * y * b = a * x * b * a * x * b = f(x) * f(y)$.   \n7. $f$ is a morphism of additive group comes from the distributive law.    "
  },
  {
    "id": 279,
    "title": "Example_6102B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Show that a finite integral domain $R$ is a field.",
    "comment": "",
    "suggestion": "",
    "formalProof": "section Example_6102B\n#check IsDomain\n#check zero_ne_one'\n#check Finite.injective_iff_bijective\n#check noZeroDivisors_iff_isDomain_or_subsingleton\n#check IsDomain.to_noZeroDivisors\n#check IsLeftCancelMulZero.mul_left_cancel_of_ne_zero\n\ndef a_mul {R:Type*} [CommRing R] (a:R):R→ R :=fun x ↦ a*x\n\nexample {R:Type*} [CommRing R] [hd:IsDomain R] [Fintype R] :IsField R where\n--只需要证明2个命题即可\n  --0≠1由整环性质得到？\n  exists_pair_ne := by\n    use 0,1\n    exact zero_ne_one' R\n  mul_comm := mul_comm\n  --还要证明逆元存在\n  mul_inv_cancel := by\n    intro a ha\n    --我们只需要证明对于任意非零元素乘法给出的映射是R到自身的双射即可\n    have hbj: (a_mul a).Bijective :=by\n      --由于R是有限环，只用单射\n      apply Finite.injective_iff_bijective.mp\n      unfold Function.Injective a_mul\n      intro x y haeq\n      --这里面用到了整环没有零因子的性质\n      exact IsLeftCancelMulZero.mul_left_cancel_of_ne_zero ha haeq\n    exact hbj.2 1\n\nend Example_6102B",
    "informalProof": "只需要证明2个命题即可\n\n1、0≠1由整环性质得到？\n\n2、-还要证明逆元存在\n\n2.1、我们只需要证明对于任意非零元素乘法给出的映射是R到自身的双射即可\n\n2.2、由于R是有限环，只用单射\n\n2.3、这里面用到了整环没有零因子的性质"
  },
  {
    "id": 280,
    "title": "Example_6103B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "For positive integer $n\\ge 2$, \n\nshow that the ring $\\mathbb Z/n\\mathbb Z$ is a field if and only if $n$ is a prime number.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample(a:ℤ)(ha:a≠0): IsField (ℤ⧸(Ideal.span {a})) ↔ Prime a :=by \n  have ds1 : IsField (ℤ⧸(Ideal.span {a})) ↔ Ideal.IsMaximal (Ideal.span {a}) :=by \n    exact Iff.symm (Ideal.Quotient.maximal_ideal_iff_isField_quotient (Ideal.span {a}))\n  rw[ds1]\n  have ds2 : Ideal.IsMaximal (Ideal.span {a})↔ Ideal.IsPrime (Ideal.span {a}):=by \n    constructor\n    · exact fun a_1 => Ideal.IsMaximal.isPrime a_1\n    · intro sa\n      have: (Ideal.span {a}) ≠ ⊥ :=by \n        refine (Submodule.ne_bot_iff (Ideal.span {a})).mpr ?_\n        use a\n        constructor\n        · exact Ideal.mem_span_singleton_self a\n        · exact ha\n      exact IsPrime.to_maximal_ideal this\n  rw[ds2]\n  exact Ideal.span_singleton_prime ha\n",
    "informalProof": "import Mathlib\n\nexample {R : Type*} [CommRing R] {p : R}(hp : p ≠ 0): Ideal.IsPrime (Ideal.span {p}) ↔ Prime p:=by sorry\n-- 定义一个命题：对于整数 a，如果 a 不为 0，则 (ℤ ⧸ (Ideal.span {a})) 是一个域当且仅当 a 是一个质数。\nexample(a:ℤ)(ha:a≠0): IsField (ℤ⧸(Ideal.span {a})) ↔ Prime a :=by \n-- 引入一个命题 ds1，表示 (ℤ ⧸ (Ideal.span {a})) 是一个域当且仅当 (Ideal.span {a}) 是一个极大理想。\n  have ds1 : IsField (ℤ⧸(Ideal.span {a})) ↔ Ideal.IsMaximal (Ideal.span {a}) :=by \n    exact Iff.symm (Ideal.Quotient.maximal_ideal_iff_isField_quotient (Ideal.span {a}))\n  rw[ds1]\n  -- 引入一个命题 ds2，表示 (Ideal.span {a}) 是极大理想当且仅当它是素理想。\n  have ds2 : Ideal.IsMaximal (Ideal.span {a})↔ Ideal.IsPrime (Ideal.span {a}):=by \n    constructor\n    · exact fun a_1 => Ideal.IsMaximal.isPrime a_1\n    · intro sa\n      -- 证明 (Ideal.span {a}) 不等于零理想。\n      have: (Ideal.span {a}) ≠ ⊥ :=by \n        refine (Submodule.ne_bot_iff (Ideal.span {a})).mpr ?_\n        use a\n        constructor\n        · exact Ideal.mem_span_singleton_self a\n        · exact ha\n      exact IsPrime.to_maximal_ideal this\n  rw[ds2]\n  -- 最后，使用 Ideal.span_singleton_prime 定理，完成证明。\n  exact Ideal.span_singleton_prime ha\n"
  },
  {
    "id": 282,
    "title": "Example_6202B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "In a field $F$, as a ring, it has only ideals $(0)=\\{0\\},(1)=F$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {F : Type*} [Field F] (I : Ideal F): I = 0 ∨ I = ⊤ := by\n--Suppose the contrary: $I$ is an ideal $s.t.$ $I\\ne 0$ and $I\\ne F$\n  by_contra h \n  push_neg at h\n  rcases h with ⟨h₁,h₂⟩\n--Then $\\exist a\\in I,s.t.a\\ne 0$\n  have h₃: Nontrivial I := by\n    exact Submodule.nontrivial_iff_ne_bot.mpr h₁\n  have h₄: ∃ i ∈ I, i ≠ 0 := by \n    exact (AddSubmonoid.nontrivial_iff_exists_ne_zero I.toAddSubmonoid).mp h₃\n  rcases h₄ with ⟨a,h1,h2⟩ \n--by $F$ is a field, $\\exist b\\in F,s.t. ab=1$ \n  have: ∃! b, a * b = 1 := by \n    apply uniq_inv_of_isField\n    exact Semifield.toIsField F      \n    exact h2\n  rcases this with ⟨b,hb1,_⟩  \n--thus $1\\in I$  \n--By $I$ is an ideal we have $I=F$\n--because $1\\in I$    \n  have h₅: 1 ∈ I := by\n    rw [← hb1]\n    exact Ideal.mul_mem_right b I h1\n  have h₆: I = ⊤ := by exact (Ideal.eq_top_iff_one I).mpr h₅ \n  apply h₂ h₆ ",
    "informalProof": "In a field $F$, as a ring, it has only ideals $(0)=\\{0\\},(1)=F$.  \nProof.   \n    Suppose the contrary: $I$ is an ideal $s.t.$ $I\\ne 0$ and $I\\ne F$.  \n Then $\\exist a\\in I,s.t.a\\ne 0$.  \nby $F$ is a field, $\\exist b\\in F,s.t. ab=1$.  \n thus $1\\in I$.  \n By $I$ is an ideal we have $I=F$ because $1\\in I$"
  },
  {
    "id": 284,
    "title": "Example_6204B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "In a field $F$, for $a\\in F^\\times, b\\in F$, the equation $ax+b=0$ has a unique solution.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {F : Type*} [Field F] {a : F} {b : F} (h: a ≠ 0): ∃!x , a * x + b = 0 := by\n  use -a⁻¹ * b\n  constructor\n  --1.Prove that if $x=-a^{-1}b$,then $ax+b=0$.This is because $a(-a^{-1}b)+b=-aa^{-1}b+b=-b+b=0$.\n  · simp only [neg_mul, mul_neg]\n    apply Eq.symm (eq_neg_add_of_add_eq ?h.left.h)\n    rw [add_zero, ← mul_assoc]\n    rw [CommGroupWithZero.mul_inv_cancel a h, one_mul]\n  · intro y hy\n    --2.Prove that if $ay+b=0$, then $y=-a^{-1}b$.This is because $y=aa^{-1}y=a^{-1}ay=a^{-1}(ay+b-b)=a^{-1}(-b)=-a^{-1}b$,for $a\\in F^\\times, b\\in F$\n    calc\n      _ = 1 * y := by rw [one_mul]\n      _ = a * a⁻¹ * y := by rw [CommGroupWithZero.mul_inv_cancel a h]\n      _ = a⁻¹ * a * y := by rw [mul_comm a a⁻¹]\n      _ = a⁻¹ * (a * y + b - b) := by group\n      _ = a⁻¹ * (0 - b) := by rw [hy]\n      _ = _ := by group",
    "informalProof": "1.Prove that if $x=-a^{-1}b$,then $ax+b=0$.This is because $a(-a^{-1}b)+b=-aa^{-1}b+b=-b+b=0$.\n2.Prove that if $ay+b=0$, then $y=-a^{-1}b$.This is because $y=aa^{-1}y=a^{-1}ay=a^{-1}(ay+b-b)=a^{-1}(-b)=-a^{-1}b$,for $a\\in F^\\times, b\\in F$"
  },
  {
    "id": 297,
    "title": "Exercise_211",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.3.3. 设群 $G$ 中两个元 $g, h$ 可换, $o(g)=m, o(h)=n$. 记 $(m, n),[m, n]$分别是 $m, n$ 的最大公因子和最小公倍数. 则\n\n(1) $o\\left(g^{n} h^{m}\\right)=\\frac{[m, n]}{(m, n)}$;\n\n(2) $G$ 中存在阶为 $(m, n)$ 的元;\n\n(3) $G$ 中存在阶为 $[m, n]$ 的元.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nvariable {G : Type*} [Group G] (g h : G) (m n : ℕ)\n\nexample (p₁ : orderOf g = m) (p₂ : orderOf h = n) (gh_comm : g * h = h * g) : orderOf (g ^ n * h ^ m) * (Nat.gcd m n) = (Nat.lcm m n) := by\n  -- Case 1: $m = 0$\n  by_cases m_zero : m = 0\n  · simp only [m_zero] at *\n    by_cases n_zero : n = 0\n    · -- If both $m = 0$ and $n = 0$, both $g$ and $h$ have order 0, which makes the statement trivially true.\n      simp [n_zero]\n    · -- If $m = 0$ and $n \\neq 0$, we need to prove the order of $g ^ n$ is $zero$.\n      simp [n_zero]\n      -- In other words, we shall prove $\\forall k \\in \\Z_+$, $(g ^ n) ^ k \\ne 0$,\n      apply orderOf_eq_zero_iff'.mpr; intro k kpos eqk\n      -- Because $|g| = m = 0$, we have $n * k = 0$, which is absurd.\n      rw [← pow_mul, ← pow_zero g, pow_inj_iff_of_orderOf_eq_zero p₁] at eqk\n      absurd eqk; simp [n_zero, pos_iff_ne_zero.mp kpos]\n  · -- Case 2: $m \\ne 0$.\n    by_cases n_zero : n = 0\n    · -- If $m \\ne 0$ and $n = 0$, we use a similar argument to show $|h ^ m| = 0$.\n      simp [n_zero] at *; simp [m_zero]\n      apply orderOf_eq_zero_iff'.mpr; intro k kpos eqk\n      rw [← pow_mul, ← pow_zero h, pow_inj_iff_of_orderOf_eq_zero p₂] at eqk\n      absurd eqk; simp [m_zero, pos_iff_ne_zero.mp kpos]\n    · -- If neither $m$ nor $n$ equals zero.\n      push_neg at *\n      -- We rewrite $m, n$ as $m = \\text{g.c.d.}(m, n) \\cdot M, n = \\text{g.c.d.}(m, n) \\cdot N$.\n      rcases (Nat.gcd_dvd_left m n) with ⟨M, hM⟩\n      rcases (Nat.gcd_dvd_right m n) with ⟨N, hN⟩\n      -- It is easy to see $M, N$ are coprime.\n      have MNcp : M.Coprime N := by\n        apply Nat.coprime_iff_gcd_eq_one.mpr\n        rw [@Nat.eq_of_mul_eq_mul_right (Nat.gcd M N) (Nat.gcd m n) 1 (Nat.gcd_pos_of_pos_left n (Nat.pos_of_ne_zero m_zero)) ?_]\n        rw [one_mul, ← Nat.gcd_mul_right, mul_comm, ← hM, mul_comm, ← hN]\n      -- We are left to prove $|g ^ n \\cdot h ^ m| = \\text{l.c.m.}(M, N) = M \\cdot N$.\n      nth_rw 3 [hN, hM]\n      rw [Nat.lcm_mul_left, mul_comm, mul_eq_mul_left_iff, Nat.Coprime.lcm_eq_mul MNcp]; left\n      -- Notice $|g ^ n| = \\frac{|g|}{\\text{g.c.d.}(m, n)} = M$,\n      have q₁ : orderOf (g ^ n) = M := by\n        rw [orderOf_pow' g n_zero, p₁]\n        nth_rw 1 [hM, mul_comm]\n        rw [Nat.mul_div_cancel M (Nat.gcd_pos_of_pos_left n (Nat.pos_of_ne_zero m_zero))]\n      -- and $|h ^ m| = \\frac{|h|}{\\text{g.c.d.}(m, n)} = N$.\n      have q₂ : orderOf (h ^ m) = N := by\n        rw [orderOf_pow' h m_zero, p₂]\n        nth_rw 1 [hN, mul_comm, Nat.gcd_comm]\n        rw [Nat.mul_div_cancel N (Nat.gcd_pos_of_pos_left m (Nat.pos_of_ne_zero n_zero))]\n      -- Apparently $g ^ n$ and $h ^ m$ commute.\n      have ghcomm : Commute (g ^ n) (h ^ m) := by\n        apply Commute.pow_pow\n        apply (commute_iff_eq g h).mpr gh_comm\n      -- and $\\text{g.c.d}(|g ^ n|, |h ^ m|) = 1$, therefore $|g ^ n \\cdot  h ^ m| = M \\cdot N$.\n      rw [Commute.orderOf_mul_eq_mul_orderOf_of_coprime ghcomm]\n      repeat rw [q₁, q₂]\n      exact MNcp\n\nexample (p₁ : orderOf g = m) (p₂ : orderOf h = n) (gh_comm : g * h = h * g): ∃ x : G, orderOf x = Nat.gcd m n := by\n  -- Case 1: $m = 0$.\n  by_cases m_zero : m = 0\n  · -- If $m = 0$, we can choose $x = h$, and since $|h| = n$, $|x| = n = \\text{g.c.d.}(0, n)$.\n    use h\n    rw [p₂, m_zero, Nat.gcd_zero_left]\n  · -- Case 2: $m \\ne 0$.\n    by_cases n_zero : n = 0\n    · -- If $n = 0$, we can choose $x = g$, and since $|g| = m$, $|x| = m = \\text{g.c.d.}(m, 0)$.\n      use g\n      rw [p₁, n_zero, Nat.gcd_zero_right]\n    · -- Finally, if both $m$ and $n$ are non-zero,\n      push_neg at *\n      -- We construct an element $x = g ^ {f_1(m, n)} \\cdot h ^ {f_2(m, n)}$, where $f_1(m, n)$ contains all the prime powers in $m$ that has bigger exponents than $n$, and $f_2(m, n)$ similarly.\n      use g ^ Nat.factorizationLCMLeft (orderOf g) (orderOf h) * h ^ Nat.factorizationLCMRight (orderOf g) (orderOf h)\n      have ghcomm : Commute g h := (commute_iff_eq g h).mpr gh_comm\n      rw [← p₁] at m_zero; rw [← p₂] at n_zero\n      -- Assume $|g ^ {f_1(m, n)}|$ and $|h ^ {f_2(m, n)}|$ are coprime (which we will prove shortly), we need to prove $|g ^ {f_1(m, n)}| \\cdot |h ^ {f_2(m, n)}| = \\text{g.c.d.}(m, n)$.\n      rw [(ghcomm.pow_pow _ _).orderOf_mul_eq_mul_orderOf_of_coprime]\n      · -- $|g ^ {f_1(m, n)}| \\cdot |h ^ {f_2(m, n)}| = \\frac{m}{f_1(m, n)} \\cdot \\frac{n}{f_2(m, n)}$\n        rw [orderOf_pow_of_dvd (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMLeft_pos (orderOf g) (orderOf h))) (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h))]\n        rw [orderOf_pow_of_dvd (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMRight_pos (orderOf g) (orderOf h))) (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h))]\n        -- $\\frac{m}{f_1(m, n)} \\cdot \\frac{n}{f_2(m, n)} = \\frac{m n}{f_1(m, n) f_2(m, n)}$\n        rw [Nat.div_mul_div_comm (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h)) (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h))]\n        -- $\\frac{m n}{f_1(m, n) f_2(m, n)} = \\frac{m n}{\\text{l.c.m.}(m, n)}$\n        rw [Nat.factorizationLCMLeft_mul_factorizationLCMRight m_zero n_zero, ← p₁, ← p₂]\n        -- $\\frac{m n}{\\text{l.c.m.}(m, n)} = \\text{g.c.d.}(m, n)$\n        rw [← Nat.gcd_mul_lcm, Nat.mul_div_cancel _ (Nat.lcm_pos (Nat.pos_of_ne_zero m_zero) (Nat.pos_of_ne_zero n_zero))]\n      · -- We still need to prove $|g ^ {f_1(m, n)}|$ and $|h ^ {f_2(m, n)}|$ are coprime.\n        -- $\\text{g.c.d.}(|g ^ {f_1(m, n)}|, |h ^ {f_2(m, n)}|) = \\text{g.c.d.}(\\frac{m}{f_1(m, n)}, \\frac{n}{f_2(m, n)})$\n        rw [orderOf_pow_of_dvd (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMLeft_pos (orderOf g) (orderOf h))) (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h))]\n        rw [orderOf_pow_of_dvd (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMRight_pos (orderOf g) (orderOf h))) (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h))]\n        -- Notice $\\frac{m}{f_1(m, n)} ∣ f_2(m, n)$,\n        have temp1 : ((orderOf g) / Nat.factorizationLCMLeft (orderOf g) (orderOf h)) ∣ Nat.factorizationLCMRight (orderOf g) (orderOf h) := by\n          apply (Nat.div_dvd_iff_dvd_mul (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h)) (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMLeft_pos (orderOf g) (orderOf h)))).mpr\n          rw [Nat.factorizationLCMLeft_mul_factorizationLCMRight m_zero n_zero]\n          apply Nat.dvd_lcm_left\n        -- and $\\frac{m}{f_2(m, n)} ∣ f_1(m, n)$.\n        have temp2 : ((orderOf h) / Nat.factorizationLCMRight (orderOf g) (orderOf h)) ∣ Nat.factorizationLCMLeft (orderOf g) (orderOf h) := by\n          apply (Nat.div_dvd_iff_dvd_mul (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h)) (Nat.pos_iff_ne_zero.mp (Nat.factorizationLCMRight_pos (orderOf g) (orderOf h)))).mpr\n          rw [mul_comm, Nat.factorizationLCMLeft_mul_factorizationLCMRight m_zero n_zero]\n          apply Nat.dvd_lcm_right\n        apply Nat.coprime_iff_gcd_eq_one.mpr; apply Nat.dvd_one.mp\n        -- Hence $\\text{g.c.d.}(\\frac{m}{f_1(m, n)}, \\frac{n}{f_2(m, n)}) \\mid \\text{g.c.d.}(f_2(m, n), \\frac{n}{f_2(m, n)})$,\n        apply @dvd_trans _ _ _ (Nat.gcd (Nat.factorizationLCMRight (orderOf g) (orderOf h)) ((orderOf h) / Nat.factorizationLCMRight (orderOf g) (orderOf h))) 1 (Nat.gcd_dvd_gcd_of_dvd_left _ temp1)\n        -- $\\text{g.c.d.}(f_2(m, n), \\frac{n}{f_2(m, n)} \\mid \\text{g.c.d.}(f_2(m, n), f_1(m, n))$\n        apply @dvd_trans _ _ _ (Nat.gcd (Nat.factorizationLCMRight (orderOf g) (orderOf h)) (Nat.factorizationLCMLeft (orderOf g) (orderOf h))) 1 (Nat.gcd_dvd_gcd_of_dvd_right _ temp2)\n        apply Nat.dvd_one.mpr; apply Nat.coprime_iff_gcd_eq_one.mp\n        rw [Nat.coprime_comm]\n        -- $\\text{g.c.d.}(f_2(m, n), f_1(m, n)) = 1$\n        apply Nat.coprime_factorizationLCMLeft_factorizationLCMRight\n\nexample (p₁ : orderOf g = m) (p₂ : orderOf h = n) (gh_comm : g * h = h * g): ∃ x : G, orderOf x = Nat.lcm m n := by\n  -- Case 1: $m = 0$.\n  by_cases m_zero : m = 0\n  · -- If $m = 0$, we can choose $x = g$, and since $|g| = m$, $|x| = m = \\text{l.c.m.}(0, m)$.\n    use g\n    rw [p₁, m_zero, Nat.lcm_zero_left]\n  · -- Case 2: $m \\ne 0$.\n    by_cases n_zero : n = 0\n    · -- If $n = 0$, we can choose $x = h$, and since $|h| = n$, $|x| = n = \\text{l.c.m.}(n, 0)$.\n      use h\n      rw [p₂, n_zero, Nat.lcm_zero_right]\n    · -- Finally, if both $m$ and $n$ are non-zero,\n      push_neg at *\n      -- We construct an element $x = g ^ {m / f_1(m, n)} \\cdot h ^ {n / f_2(m, n)}$, where $f_1(m, n)$ contains all the prime powers in $m$ that has bigger exponents than $n$, and $f_2(m, n)$ similarly.\n      use g ^ (orderOf g / Nat.factorizationLCMLeft (orderOf g) (orderOf h)) * h ^ (orderOf h / Nat.factorizationLCMRight (orderOf g) (orderOf h))\n      have ghcomm : Commute g h := (commute_iff_eq g h).mpr gh_comm\n      rw [← p₁] at m_zero; rw [← p₂] at n_zero\n      -- Assume $|g ^ {m / f_1(m, n)}|$ and $|h ^ {n / f_2(m, n)}|$ are coprime (which we will prove shortly), we need to prove $|g ^ {m / f_1(m, n)}| \\cdot |h ^ {n / f_2(m, n)}| = \\text{g.c.d.}(m, n)$.\n      rw [(ghcomm.pow_pow _ _).orderOf_mul_eq_mul_orderOf_of_coprime]\n      · -- $|g ^ {m / f_1(m, n)}| \\cdot |h ^ {n / f_2(m, n)}| = f_1(m, n) \\cdot f_2(m, n)$\n        rw [orderOf_pow_orderOf_div m_zero (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h))]\n        rw [orderOf_pow_orderOf_div n_zero (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h))]\n        -- $f_1(m, n) \\cdot f_2(m, n) = \\text{l.c.m.}(m, n)$\n        rw [Nat.factorizationLCMLeft_mul_factorizationLCMRight m_zero n_zero, p₁, p₂]\n      · -- We now prove $|g ^ {m / f_1(m, n)}|$ and $|h ^ {n / f_2(m, n)}|$ are coprime.\n        rw [orderOf_pow_orderOf_div m_zero (Nat.factorizationLCMLeft_dvd_left (orderOf g) (orderOf h))]\n        rw [orderOf_pow_orderOf_div n_zero (Nat.factorizationLCMRight_dvd_right (orderOf g) (orderOf h))]\n        -- It follows from $\\text{g.c.d.}(|g ^ {m / f_1(m, n)}|, |h ^ {n / f_2(m, n)}|) = \\text{g.c.d.}(f_1(m, n), f_2(m, n)) = 1$.\n        apply Nat.coprime_factorizationLCMLeft_factorizationLCMRight",
    "informalProof": "\nTheorem: Given elements $g, h \\in G$ with $|g| = m, |h| = n$, and $g$ and $h$ commute, then $|g ^ n \\cdot h ^ m| \\cdot \\text{g.c.d.}(m, n) = \\text{l.c.m.}(m, n)$.\nProof:\n1. We first consider the case where $m = 0$.\n2. If both $m = 0$ and $n = 0$, both $g$ and $h$ have order 0, which makes the statement trivially true.\n3. If $m = 0$ and $n \\neq 0$, we need to prove the order of $g ^ n$ is $zero$.\n4. In other words, we shall prove$\\forall k \\in \\Z_+$, $(g ^ n) ^ k \\ne 0$.\n5. Because $|g| = m = 0$, we have $n * k = 0$, which is absurd.\n6. Next, we handle the case of $m \\ne 0$.\n7. If $m \\ne 0$ and $n = 0$, we use a similar argument to show $|h ^ m| = 0$.\n8. If neither $m$ nor $n$ equals zero, we rewrite $m, n$ as $m = \\text{g.c.d.}(m, n) \\cdot M, n = \\text{g.c.d.}(m, n) \\cdot N$.\n9. It is easy to see $M, N$ are coprime, hence we are left to prove $|g ^ n \\cdot h ^ m| = \\text{l.c.m.}(M, N) = M \\cdot N$.\n10. Notice $|g ^ n| = \\frac{|g|}{\\text{g.c.d.}(m, n)} = M$, and $|h ^ m| = \\frac{|h|}{\\text{g.c.d.}(m, n)} = N$.\n11. Apparently $g ^ n$ and $h ^ m$ commute, and $\\text{g.c.d}(|g ^ n|, |h ^ m|) = 1$, therefore $|g ^ n \\cdot h ^ m| = M \\cdot N$.\n\nTheorem: Given elements $g, h \\in G$ with $|g| = m, |h| = n$, and $g$ and $h$ commute, then there exists an element $x \\in G$ such that $|x| = \\text{g.c.d.}(m, n)$.\nProof:\n1. We first consider the case where $m = 0$.\n2. If $m = 0$, we can choose $x = h$, and since $|h| = n$, $|x| = \\text{g.c.d.}(0, n) = n$.\n3. Next, if $m \\ne 0, n = 0$, we can choose $x = g$, and since $|g| = m$, $|x| = \\text{g.c.d.}(m, 0) = m$.\n4. Finally, if both $m$ and $n$ are non-zero, we construct an element $x = g ^ {f_1(m, n)} \\cdot h ^ {f_2(m, n)}$,\n5. where $f_1(m, n)$ contains all the prime powers in $m$ that has bigger exponents than $n$, and $f_2(m, n)$ similarly.\n6. Assume $|g ^{ f_1(m, n)}|$ and $|h ^ {f_2(m, n)}|$ are coprime (which we will prove shortly), we need to prove $|g ^ {f_1(m, n)}| \\cdot |h ^ {f_2(m, n)}| = \\text{g.c.d.}(m, n)$.\n7. $|g ^ {f_1(m, n)}| \\cdot |h ^ {f_2(m, n)}| = \\frac{m}{f_1(m, n)} \\cdot \\frac{n}{f_2(m, n)} = \\frac{m n}{f_1(m, n) f_2(m, n)} = \\frac{m n}{\\text{l.c.m.}(m, n)} = \\text{g.c.d.}(m, n)$.\n8. We now prove $|g ^ {f_1(m, n)}|$ and $|h ^ {f_2(m, n)}|$ are coprime.\n9. $\\text{g.c.d.}(|g ^ {f_1(m, n)}|, |h ^ {f_2(m, n)}|) = \\text{g.c.d.}(\\frac{m}{f_1(m, n)}, \\frac{n}{f_2(m, n)})$\n10. Notice $\\frac{m}{f_1(m, n)} ∣ f_2(m, n)$, and $\\frac{m}{f_2(m, n)} ∣ f_1(m, n)$.\n11. Hence $\\text{g.c.d.}(\\frac{m}{f_1(m, n)}, \\frac{n}{f_2(m, n)}) \\mid \\text{g.c.d.}(f_2(m, n), \\frac{n}{f_2(m, n)}) \\mid \\text{g.c.d.}(f_2(m, n), f_1(m, n)) = 1$.\n\nTheorem: Given elements $g, h \\in G$ with $|g| = m, |h| = n$, and $g$ and $h$ commute, then there exists an element $x \\in G$ such that $|x| = \\text{l.c.m.}(m, n)$.\nProof:\n1. We first consider the case where $m = 0$.\n2. If $m = 0$, we can choose $x = g$, and since $|g| = m$, $|x| = \\text{l.c.m.}(0, m) = m$.\n3. Next, if $m \\ne 0, n = 0$, we can choose $x = h$, and since $|h| = n$, $|x| = \\text{l.c.m.}(n, 0) = n$.\n4. Finally, if both $m$ and $n$ are non-zero, we construct an element $x = g ^ {m / f_1(m, n)} \\cdot h ^ {n / f_2(m, n)}$,\n5. where $f_1(m, n)$ contains all the prime powers in $m$ that has bigger exponents than $n$, and $f_2(m, n)$ similarly.\n6. Assume $|g ^ {m / f_1(m, n)}|$ and $|h ^ {n / f_2(m, n)}|$ are coprime (which we will prove shortly), we need to prove $|g ^ {m / f_1(m, n)}| \\cdot |h ^ {n / f_2(m, n)}| = \\text{g.c.d.}(m, n)$.\n7. $|g ^ {m / f_1(m, n)}| \\cdot |h ^ {n / f_2(m, n)}| = f_1(m, n) \\cdot f_2(m, n) = \\text{l.c.m.}(m, n)$\n8. We now prove $|g ^ {m / f_1(m, n)}|$ and $|h ^ {n / f_2(m, n)}|$ are coprime.\n9. It follows from $\\text{g.c.d.}(|g ^ {m / f_1(m, n)}|, |h ^ {n / f_2(m, n)}|) = \\text{g.c.d.}(f_1(m, n), f_2(m, n)) = 1$."
  },
  {
    "id": 306,
    "title": "Exercise_220",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.3.12. 设 $n>2$, 则有限群 $G$ 中有偶数个阶为 $n$ 的元.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.OrderOfElement\nimport Mathlib.GroupTheory.Cyclic\nimport Mathlib.Data.Fintype.Basic\n\n-- We start by assuming G is a finite group\nvariable {G : Type*} [Group G] [Fintype G]\n\n-- Define the order of an element\nopen Finset\n\n/-- Define the set of elements in G with order exactly n -/\ndef elements_order_eq (n : ℕ) : Finset G :=\n  univ.filter (λ g, orderOf g = n)\n\n-- The main theorem we want to prove\nexample (n : ℕ) (hn : n > 2) : (elements_order_eq n).card % 2 = 0 := by\n  -- We will use the fact that elements of order n come in pairs g and g⁻¹\n  -- First, let's prove that if g has order n, then g⁻¹ has order n\n  have inv_order_eq : ∀ g : G, orderOf g = orderOf g⁻¹ :=\n    λ g => orderOf_inv g\n\n  -- Consider the set of elements of order n\n  let S := elements_order_eq n\n\n  -- We will partition S into pairs (g, g⁻¹)\n  have pair_partition : ∀ g ∈ S, g⁻¹ ∈ S :=\n    λ g hg =>\n      (mem_filter.1 hg).2 ▸ inv_order_eq g ▸ (mem_filter.2 ⟨mem_univ _, rfl⟩)\n\n  -- Define a function to map each element to its inverse\n  let f : G → G := λ g => g⁻¹\n\n  -- Prove that this function is an involution (f (f g) = g)\n  have f_involution : ∀ g : G, f (f g) = g :=\n    λ g => inv_inv g\n\n  -- The function f is a bijection on S\n  have f_bij : ∀ g ∈ S, f g ∈ S ∧ f (f g) = g :=\n    λ g hg => ⟨pair_partition g hg, f_involution g⟩\n\n  -- Each pair (g, g⁻¹) is distinct unless g = g⁻¹\n  have distinct_pairs : ∀ g ∈ S, g ≠ g⁻¹ :=\n    λ g hg h =>\n      let ⟨_, horder⟩ := (mem_filter.1 hg).2\n      have : g ^ 2 = 1 := by\n        rw [← h, inv_inv, pow_two, horder, one_pow]\n      have horder1 : g = 1 := by\n        rw [← pow_one g, ← horder, this, pow_zero g]\n      have horder2 : n = 1 := orderOf_eq_one_iff.mp horder1\n      show False from lt_irrefl 1 (nat.lt_of_sub_pos (nat.sub_pos_of_lt hn))\n\n  -- Therefore, the number of elements in S is even\n  have card_even : (S.card : ℤ) = (S.to_list.length : ℤ) :=\n    by rw [Finset.card, List.length_to_list]\n\n  rw [card_even, int.coe_nat_even]\n  apply List.pairwise_inv_eq_self_iff_even_length distinct_pairs\n\n  -- Show that S is closed under the involution f\n  intros g hg\n  exact f_bij g hg\n\n",
    "informalProof": "### Informal Proof\n\n**Proof:**\n1. Consider a finite group \\( G \\) and an integer \\( n > 2 \\).\n2. We need to prove that the number of elements in \\( G \\) with order \\( n \\) is even.\n3. First, if an element \\( g \\) has order \\( n \\), then \\( g \\) satisfies \\( g^n = 1 \\) and \\( g^k \\neq 1 \\) for \\( 0 < k < n \\).\n4. For every \\( g \\in G \\), if \\( g \\) has order \\( n \\), then \\( g^{-1} \\) also has order \\( n \\). This is because \\( g^{-1} \\) also satisfies \\( (g^{-1})^n = 1 \\) and \\( (g^{-1})^k \\neq 1 \\) for \\( 0 < k < n \\).\n5. Therefore, if \\( g \\) is an element of order \\( n \\), then \\( g^{-1} \\) is also an element of order \\( n \\).\n6. Next, we note that \\( g \\neq g^{-1} \\) unless \\( g \\) satisfies \\( g^2 = 1 \\). Since \\( n > 2 \\), \\( g \\neq g^{-1} \\).\n7. Hence, all elements of order \\( n \\) can be paired: each \\( g \\) can be paired with its inverse \\( g^{-1} \\).\n8. Thus, the total number of elements of order \\( n \\) must be even because they can be paired.\n\nThis symmetry and pairing ensure that the number of elements in the finite group \\( G \\) with order \\( n \\) is always even.\n"
  },
  {
    "id": 326,
    "title": "Exercise_240",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3.3.9. 求证: 代数封闭域必是无限域.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Algebra.Field.Defs\nimport Mathlib.Algebra.Polynomial.Basic\nimport Mathlib.Algebra.Polynomial.Eval\nimport Mathlib.Algebra.BigOperators.Basic\nimport Mathlib.Order.Filter.Basic\nimport Mathlib.Topology.Order\nimport Mathlib.Data.Fintype.Card\nimport MIL.common\nopen BigOperators\nopen Finset\n/-\nLet $F$ be a finite and algebraic closed field, show that it will lead to contradiction.   \n-/\nopen Polynomial\nexample  {F: Type*} [Field F] [Fintype F] [IsAlgClosed F]  : False := by\n  --Let $f$ be a polynomial of the form $\\prod_{i: F} (x - i) + 1$ , and $f₁$ be $f + 1$.   \n  let f: F[X] := ∏ i : F, (X - C i)\n  let f₁ : F[X] := f + 1\n  --Then we prove the degree of $f$ is greater than zero. Firstly, the degree of f is equal to the caidinality of field $F$. Then, $F$ is a field implies that the degree of $f$ is not zero.  \n  have hq: f.degree > 0 := by\n    have deg_add: (∏ i : F, (X - C i)).degree = ∑ i : F, (X - C i).degree := degree_prod univ fun i => X - C i\n    simp only [degree_X_sub_C, sum_const, card_univ, nsmul_eq_mul, mul_one] at deg_add\n    rw [deg_add]\n    let t := IsField.nontrivial (Field.toIsField F)\n    simp only [gt_iff_lt, Nat.cast_pos]\n    let t := Fintype.one_lt_card_iff_nontrivial.mpr t\n    omega\n  --Clearly, the degree of $f, f₁$ are equal since the degree of $f$ is greater than zero.  \n  have h2 : f₁.degree = f.degree := by\n    apply degree_add_C\n    exact hq\n  --So we may conclude that the degree of $f₁$ is not zero.  \n  have : f₁.degree ≠ 0 := by\n    rw [h2]\n    intro h\n    rw [h] at hq\n    contradiction\n  --Prove by contradiction. Assume that $f₁$ has a root $x$.   \n  rcases (IsAlgClosed.exists_root f₁ this) with ⟨x, hx⟩\n  have : eval x f₁ = 0 := IsRoot.eq_zero hx\n  --However, we can also show that $f₁(x) ≠ 0$ since $f(x) = 0$ and $f₁ = f + 1$, this implies that $f(x) = 1$.  \n  have : eval x f₁ ≠ 0 := by\n    unfold_let \n    rw [eval_add]\n    simp\n    rw [eval_prod]\n    intro h\n    have : ∏ j : F, eval x (X - C j) = 0 := by\n      apply @Finset.prod_eq_zero _ _ _ x _ _ \n      · exact mem_univ x\n      · simp\n    rw [this] at h\n    simp at h\n  --This leads to contraction.  \n  contradiction",
    "informalProof": "Proof:  \n1.Let $f$ be a polynomial of the form $\\prod_{i: F} (x - i) + 1$ , and $f₁$ be $f + 1$.   \n2.Then we prove the degree of $f$ is greater than zero. Firstly, the degree of f is equal to the caidinality of field $F$. Then, $F$ is a field implies that the degree of $f$ is not zero.   \n3.Clearly, the degree of $f, f₁$ are equal since the degree of $f$ is greater than zero.   \n4.So we may conclude that the degree of $f₁$ is not zero.    \n5.Prove by contradiction. Assume that $f₁$ has a root $x$.   \n6.However, we can also show that $f₁(x) ≠ 0$ since $f(x) = 0$ and $f₁ = f + 1$, this implies that $f(x) = 1$.    \n7.This leads to contraction.   "
  },
  {
    "id": 334,
    "title": "Exercise_248",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.3.10. 试证: 含么交换有限环 $R$ 的素理想 $I$ 必是极大理想.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {R : Type*}[CommRing R][Fintype R](I : Ideal R)(hI : I.IsPrime)\n/-\nLet $R$ be a finite commutative ring. Prove that any prime ideal $I$ of $R$ must be a maximal ideal.\n-/\nexample : I.IsMaximal := by\n  -- First, consider the ring $R/I$, where $I$ is a prime ideal of $R$.\n  have hdomain : IsDomain (R ⧸ I) := by exact (Ideal.Quotient.isDomain_iff_prime I).mpr hI\n  -- By definition, $R/I$ is an integral domain.\n  -- Since $R$ is a finite ring, $R/I$ is also a finite ring.\n  haveI hfinite : Finite (R ⧸ I) := by\n    refine Fintype.finite ?_\n    apply Submodule.Quotient.fintype I\n  -- By the property that every finite integral domain is a field, we know that $R/I$ is a field.\n  have hfield : IsField (R ⧸ I) := by apply Finite.isField_of_domain\n  -- Since $R/I$ is a field, by the properties of quotient rings, $I$ is a maximal ideal.\n  exact Ideal.Quotient.maximal_of_isField I hfield",
    "informalProof": "Proof:\nWe need to prove that for a finite commutative ring $R$, any prime ideal $I$ must be a maximal ideal.\n1. First, consider the ring $R/I$, where $I$ is a prime ideal of $R$.\n2. By definition, $R/I$ is an integral domain.\n3. Since $R$ is a finite ring, $R/I$ is also a finite ring.\n4. By the property that every finite integral domain is a field, we know that $R/I$ is a field.\n5. Since $R/I$ is a field, by the properties of quotient rings, $I$ is a maximal ideal.\n6. Therefore, the prime ideal $I$ of $R$ must be a maximal ideal."
  },
  {
    "id": 336,
    "title": "Exercise_250",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.4.2. 设 $R$ 为整环, 则 $p$ 为素元当且仅当 $\\langle p\\rangle$ 是 $R$ 的非零素理想.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [CommRing R] {p : R}(hp : p ≠ 0): Ideal.IsPrime (Ideal.span {p}) ↔ Prime p:=by\n  exact Ideal.span_singleton_prime hp",
    "informalProof": "example {R : Type*} [CommRing R] {p : R}(hp : p ≠ 0): Ideal.IsPrime (Ideal.span {p}) ↔ Prime p:=by\n-- Use Theorem span_singleton_prime\n  exact Ideal.span_singleton_prime hp"
  },
  {
    "id": 347,
    "title": "Exercise_261",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.3.9*. 设 $R$ 是含幺交换环, $P_{1}, \\cdots, P_{m}$ 为 $R$ 的素理想而 $A$ 为 $R$ 的理想.如果 $A \\subseteq P_{1} \\cup \\cdots \\cup P_{m}$, 则必存在某个 $i(1 \\leqslant i \\leqslant m)$, 使得 $A \\subseteq P_{i}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "-- Exercise 261\n\n-- 设 R 是含幺交换环, P₁, ⋯, Pₘ 为 R 的素理想而 A 为 R 的理想. 如果 A ⊆ P₁ ∪ ⋯ ∪ Pₘ, 则必存在某个 i (1⩽i⩽m), 使得 A ⊆ Pᵢ.\n\n-- 使用归纳法. m = 1 时显然成立. 假设命题对 m - 1 成立. 对每个 i, 考虑是否有 A ⊆ ⋃_{j ≠ i} P_j. 若成立, 则使用归纳假设, 证明结束. 若对每个 i 都不成立, 则对每个 i 存在 a_i ∈ A 使得 a_i ∈ P_i 且 a_i ∉ ⋃_{j ≠ i} P_j. 现在考虑 a = ∏_{1 ≤ j ≤ m - 1} a_j + a_m, 则由 P_m 是素理想得到 a 不在 P_m 中. 又由于 P_j (1 ≤ j ≤ m - 1) 都是理想, a 不在任意一个 P_j (1 ≤ j ≤ m - 1) 中. 于是 a ∉ A, 但这与 ∀ i, a_i ∈ A 且 A 是理想矛盾.\n\nlemma Prime_Avoidance {R : Type} [CommRing R] (A : Ideal R) (m : ℕ)\n    (P : Fin (m + 1) → Ideal R)\n    (pp : ∀ i : Fin (m + 1), (P i).IsPrime)\n    (hA : A.carrier ⊆ ⋃ (i : Fin (m + 1)), P i)\n      : ∃ i : Fin (m + 1), A.carrier ⊆ P i := by\n      -- m = 0 时, 定理显然成立.\n      have case0 : m = 0 → ∃ i : Fin (m + 1), A.carrier ⊆ P i := by \n        intro hm\n        use 0\n        intro a ha\n        let hha := Set.mem_of_mem_of_subset ha hA\n        rw [Set.mem_iUnion] at hha\n        rcases hha with ⟨i, hhi⟩ \n        let test := i.2\n        nth_rw 2 [hm] at test\n        simp at test\n        rw [show 0 = ↑(0: Fin (m + 1)) from rfl] at test\n        apply Fin.val_inj.mp at test\n        rw [test] at hhi\n        exact hhi\n      -- 考虑是否存在 i 使得 A ⊆ ⋃_{j ≠ i} P_j. \n      by_cases h:(∃ i, A.carrier ⊆ ⋃ j : {j: Fin (m + 1) | j ≠ i} , P j)\n      · -- 若存在, 则化为 m - 1 的情形.\n        let ⟨i, hi⟩ := h\n        have f := @Fintype.equivFinOfCardEq {j: Fin (m  + 1) | j ≠ i} _ m ?_\n        have : ⋃ j : {j: Fin (m + 1) | j ≠ i} , ((P j): Set R) = ⋃ j : Fin m, (P (f.invFun j)) := by\n          simp\n          have := @Set.biUnion_range _ _ _ (f.symm) (fun j => ((P j): Set R))\n          simp at this\n          exact this\n        rw [this] at hi\n        set P' := fun j: Fin m => P (f.invFun j) with hP'\n        have : ⋃ j : Fin m, (P (f.invFun j)) = ⋃ j : Fin m, ((P' j): Set R) := by\n          congr\n        rw [this] at hi\n        · cases m with\n          | -- m = 0 时, 定理显然成立.\n            zero =>\n            use 0\n            have : ⋃ i, (P i) = (P 0 : Set R) := by\n              ext x\n              simp only [Set.mem_iUnion]\n              exact ⟨\n                fun ⟨y, hy⟩ => by\n                  fin_cases y\n                  exact hy,\n                fun h => by use 0⟩\n            exact this ▸ hA      \n          | -- m > 0 时, 化为 m - 1 的情形.\n            succ m' =>\n            have rec_result := Prime_Avoidance A m' P' (fun _ ↦ pp _) hi\n            let ⟨i, hi⟩ := rec_result\n            simp [P'] at hi\n            use (f.symm i)\n            exact hi\n        · simp\n      -- 若不存在,\n      push_neg at h\n      -- 则对每个 i 存在 a_i ∈ A 使得 a_i ∈ P_i 且 a_i ∉ ⋃_{j ≠ i} P_j.\n      have tmp : ∀ i, ∃ a ∈ A, a ∈ P i ∧ a ∉ (⋃ j ≠ i, P j) := by\n        intro i\n        let hh := Set.not_subset.mp (h i)\n        rcases hh with ⟨a, ha⟩\n        use a\n        constructor\n        · exact ha.1\n        · constructor\n          · let hha := Set.mem_of_mem_of_subset ha.1 hA\n            have : ∃ k : Fin (m + 1), a ∈ P k := Set.mem_iUnion.mp hha\n            rcases this with ⟨k, hk⟩\n            by_cases hki : k = i\n            · rw [← hki]\n              exact hk \n            · have fal : a ∉ P k := by \n                simp at ha\n                exact ha.2 k hki\n              contradiction\n          · simp only [ne_eq, Set.mem_iUnion, SetLike.mem_coe, exists_prop, not_exists, not_and]\n            simp at ha\n            exact ha.2\n      -- 现在考虑 a = ∏_{1 ≤ j ≤ m - 1} a_j + a_m,\n      let a := ∏ (i: Fin m), (tmp i).choose + (tmp m).choose\n      -- 则由 P_m 是素理想得到 a 不在 P_m 中. \n      by_cases hm : m > 0\n      · have a_notin_P_m : a ∉ P m := by \n          by_contra inpm \n          unfold_let at inpm\n          have rt : (tmp m).choose ∈ P m := by \n            let p := Classical.choose_spec $ tmp m\n            exact p.2.1\n          have lt : ∏ (i: Fin m), (tmp i).choose ∈ P m := (Submodule.add_mem_iff_left (P ↑m) rt).mp inpm\n          have : ∏ (i : Fin m), (tmp i).choose ∉ P m := by\n            apply Finset.prod_induction_nonempty (fun (i: Fin m) => (tmp i).choose) (fun a => a ∉ P m)\n            · intro a b ha hb \n              by_contra hhp\n              let prime_property := @Ideal.IsPrime.mem_or_mem R _ (P m) (pp m) a b hhp\n              rcases prime_property with ppp | ppp <;> contradiction\n            · refine Finset.univ_nonempty_iff.mpr ?nonempty.a\n              exact Fin.pos_iff_nonempty.mp hm\n            · intro x hx\n              have := ((tmp x).choose_spec).2.2\n              by_contra hpm \n              let x' := @Nat.cast (Fin (m + 1)) _ (x.val)\n              have hn : x' ≠ m := by \n                unfold_let\n                apply Fin.val_inj.ne.mp\n                simp\n                apply Nat.ne_of_lt\n                exact x.2\n              have test : (tmp x).choose ∈ ⋃ j, ⋃ (_ : j ≠ x'), (P j) := by \n                rw [Set.mem_iUnion]\n                use m\n                exact Set.mem_iUnion_of_mem (id (Ne.symm hn)) hpm\n              contradiction\n          contradiction\n      -- 又由于 P_j (1 ≤ j ≤ m - 1) 都是理想, a 不在任意一个 P_j (1 ≤ j ≤ m - 1) 中. \n        have a_not_in_P_j : ∀ j : Fin m, a ∉ P j := by \n          by_contra hyp\n          push_neg at hyp\n          rcases hyp with ⟨j, hj⟩\n          unfold_let at hj\n          have lt : ∏ (i: Fin m), (tmp i).choose ∈ P j := by \n            rw [<-(Finset.mul_prod_erase (a := j))]\n            apply Ideal.mul_mem_right\n            · let p := Classical.choose_spec $ tmp j\n              exact p.2.1\n            · simp\n          have rt : (tmp m).choose ∈ P j := (Submodule.add_mem_iff_right (P ↑↑j) lt).mp hj\n          let p := Classical.choose_spec $ tmp m\n          have notm : (tmp m).choose ∉ P j := by \n            by_contra inpj\n            apply p.2.2\n            rw [Set.mem_iUnion]\n            use j\n            refine Set.mem_iUnion_of_mem ?h.i rt\n            apply Fin.val_inj.ne.mp\n            simp\n            exact Nat.ne_of_lt j.2\n          contradiction\n        -- 于是 a ∉ A, 但这与 ∀ i, a_i ∈ A 且 A 是理想矛盾.\n        have a_notin_A : a ∉ A := by \n          apply Set.not_mem_subset hA\n          have : ⋃ (i : Fin (m + 1)), (P i).carrier = (⋃ (i : Fin m), (P i)) ∪ P m := by \n            ext x\n            rw [Set.mem_iUnion]\n            constructor\n            · intro hyp\n              rcases hyp with ⟨i, hi⟩\n              by_cases hmi : i = m\n              · rw [hmi] at hi \n                apply Set.mem_union_right\n                exact hi\n              · apply Set.mem_union_left\n                rw [Set.mem_iUnion]\n                use ⟨i, by \n                  refine Nat.lt_of_le_of_ne ?h₁ ?h₂\n                  · exact Fin.is_le i\n                  · apply Fin.val_inj.ne.mpr at hmi\n                    simp at hmi\n                    exact hmi\n                ⟩\n                simp\n                exact hi \n            · intro hyp\n              rw [Set.mem_union] at hyp\n              rcases hyp with hhh | hhh\n              · rw [Set.mem_iUnion] at hhh\n                rcases hhh with ⟨i, hi⟩\n                use i\n                simp at hi \n                simp\n                exact hi\n              · use m\n                exact hhh\n          show a ∉ ⋃ (i : Fin (m + 1)), (P i).carrier\n          rw [this]\n          intro nhyp\n          rw [Set.mem_union] at nhyp\n          rcases nhyp with ttt | ttt\n          · rw [Set.mem_iUnion] at ttt\n            rcases ttt with ⟨t, ht⟩\n            let test := a_not_in_P_j t\n            simp at ht \n            simp at test\n            contradiction\n          · simp at ttt\n            simp at a_notin_P_m\n            contradiction\n        haveI : NeZero m := NeZero.of_pos hm\n        have a_in_A : a ∈ A := by \n          unfold_let\n          apply Submodule.add_mem A\n          · let pi := fun i => Classical.choose_spec $ tmp i\n            rw [<-(Finset.mul_prod_erase (a := 0))]\n            apply Ideal.mul_mem_right\n            exact (pi 0).1\n            simp\n          · let p := Classical.choose_spec $ tmp m\n            exact p.1\n        contradiction\n      · apply case0\n        omega    ",
    "informalProof": ""
  },
  {
    "id": 354,
    "title": "Exercise_268",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.3.2. 设 $D$ 为整环, $m$ 和 $n$ 为互素的正整数, $a, b \\in D$. 如果 $a^{m}=b^{m}$, $a^{n}=b^{n}$, 求证 $a=b$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nAssume that $D$ is a domain, $m$ and $n$ are coprime positive integers, $a, b \\in D$. If $a^{m}=b^{m}$, $a^{n}=b^{n}$, prove that $a=b$.\n-/\nexample {R : Type*} [Ring R] [IsDomain R] (a b : R) (m n : ℕ) (hm : m > 0) (hn : n > 0) (hmn : m.Coprime n) (h₁ : a ^ m = b ^ m) (h₂ : a ^ n = b ^ n) : a = b := by\n  -- According to Bezout's lemma, $\\exists x, y \\in \\mathbb{Z}$, such that $mx + ny = \\mathrm{gcd}(m, n) = 1$.\n  apply Nat.coprime_iff_gcd_eq_one.mp at hmn\n  have hxy:= exists_gcd_eq_mul_add_mul (m : ℤ) (n : ℤ)\n  rcases hxy with ⟨x, y, hxy⟩\n  rw [← Int.coe_nat_gcd] at hmn\n  have h' : gcd (m : ℤ) (n : ℤ) = (m : ℤ).gcd (n : ℤ) := rfl\n  have h'' : (m : ℤ).gcd (n : ℤ) = (1 : ℤ) := congrArg Nat.cast hmn\n  rw [h', h''] at hxy\n  -- We discuss the positivity of $x$ and $y$, because the member of ring $R$ can't be powered by negative numbers.\n  by_cases hxp : x ≥ 0\n  · let x' : ℕ := x.toNat\n    have hx': x' = x := Int.toNat_of_nonneg hxp\n    by_cases hyp : y ≥ 0\n    · -- (1) $x \\ge 0$ and $y \\ge 0$. Here, we know that $a = a^1 = a^{mx + ny} = (a^m)^x \\cdot (a^n)^y = (b^m)^x \\cdot (b^n)^y = b^{mx + ny} = b^1 = b$.\n      let y' : ℕ := y.toNat\n      have hy': y' = y := Int.toNat_of_nonneg hyp\n      rw [← hx', ← hy'] at hxy\n      have hxy' : 1 = m * x' + n * y' := Int.ofNat_inj.mp hxy\n      rw [← pow_one a, ← pow_one b, hxy', pow_add, pow_add, pow_mul, pow_mul, pow_mul, pow_mul, h₁, h₂]\n    · -- (2) $x \\ge 0$ and $y < 0$. Here, we set $y' = -y > 0$, then we have $ny' + 1 = mx$.\n      push_neg at hyp\n      have : -y ≥ 0 := Int.le_of_lt (Int.neg_pos_of_neg hyp)\n      let y' : ℕ := (-y).toNat\n      have hy' : y' = -y := Int.toNat_of_nonneg this\n      rw [← sub_neg_eq_add, neg_mul_eq_mul_neg, ← hx', ← hy'] at hxy\n      apply eq_sub_iff_add_eq'.mp at hxy\n      have hxy' : n * y' + 1 = m * x' := Int.ofNat_inj.mp hxy\n      -- Then, we know that $a^{ny'} \\cdot a = a^{ny' + 1} = a^{mx} = (a^m)^x = (b^m)^x = b^{mx} = b^{ny' + 1} = (b^n)^{y'} \\cdot b = (a^n)^{y'} \\cdot b = a^{ny'} \\cdot b$.\n      have h : a ^ (n * y') * a = a ^ (n * y') * b := by\n        nth_rw 2 [← pow_one a, pow_mul]\n        rw [← pow_one b, h₂, ← pow_mul, ← pow_add, ← pow_add, hxy', pow_mul, pow_mul, h₁]\n      by_cases ha : a = 0\n      · -- (2.i) If $a = 0$, then $b^m = 0$. Since $R$ is an integral domain, it implies that $b = 0$, so $a = b$.\n        rw [ha] at h₁\n        have hm' : m ≥ 1 := hm\n        have hm'' : ∃ k : ℕ, m = k + 1 := Nat.exists_eq_add_of_le' hm\n        rcases hm'' with ⟨k, hm''⟩\n        rw [zero_pow, hm''] at h₁\n        symm at h₁\n        rw [ha]\n        symm\n        have hb : ∀ k : ℕ, b ^ (k + 1) = 0 → b = 0 := by\n          intro k hk\n          induction' k with d hd\n          · rw [zero_add, pow_one] at hk\n            exact hk\n          · by_contra hb'\n            push_neg at hb'\n            rw [pow_add, pow_one] at hk\n            apply mul_eq_zero.mp at hk\n            apply or_iff_not_imp_right.mp at hk\n            have hk' := hk hb'\n            apply hd at hk'\n            exact hb' hk'\n        exact hb k h₁\n        exact Nat.not_eq_zero_of_lt hm\n      · -- (2.ii) If $a \\ne 0$, then $a^{ny'} \\ne 0$. Since $R$ is an integral domain, $a^{ny'} \\cdot a = a^{ny'} \\cdot b$ implies that $a = b$.\n        have hne : (a ^ (n * y')) ≠ 0 := by\n          have hne : ∀ k : ℕ, a ^ k ≠ 0 := by\n            intro k\n            induction' k with d hd\n            · rw [pow_zero]\n              exact one_ne_zero\n            · rw [pow_add, pow_one]\n              exact mul_ne_zero hd ha\n          exact hne (n * y')\n        exact mul_left_cancel₀ hne h\n  · -- (3) $x < 0$ and $y \\ge 0$. Here, we set $x' = -x > 0$, then we have $mx' + 1 = ny$. This situation is exactly the same as (2).\n    push_neg at hxp\n    have : -x ≥ 0 := Int.le_of_lt (Int.neg_pos_of_neg hxp)\n    let x' : ℕ := (-x).toNat\n    have hx' : x' = -x := Int.toNat_of_nonneg this\n    by_cases hyp : y ≥ 0\n    · let y' : ℕ := y.toNat\n      have hy' : y' = y := Int.toNat_of_nonneg hyp\n      rw [add_comm, ← sub_neg_eq_add, neg_mul_eq_mul_neg, ← hx', ← hy'\n      ] at hxy\n      apply eq_sub_iff_add_eq'.mp at hxy\n      have hxy' : m * x' + 1 = n * y' := Int.ofNat_inj.mp hxy\n      have h : a ^ (m * x') * a = a ^ (m * x') * b := by\n        nth_rw 2 [← pow_one a, pow_mul]\n        rw [← pow_one b, h₁, ← pow_mul, ← pow_add, ← pow_add, hxy', pow_mul, pow_mul, h₂]\n      by_cases ha : a = 0\n      · rw [ha] at h₂\n        have hn' : n ≥ 1 := hn\n        have hn'' : ∃ k : ℕ, n = k + 1 := Nat.exists_eq_add_of_le' hn\n        rcases hn'' with ⟨k, hn''⟩\n        rw [zero_pow, hn''] at h₂\n        symm at h₂\n        rw [ha]\n        symm\n        have hb : ∀ k : ℕ, b ^ (k + 1) = 0 → b = 0 := by\n          intro k hk\n          induction' k with d hd\n          · rw [zero_add, pow_one] at hk\n            exact hk\n          · by_contra hb'\n            push_neg at hb'\n            rw [pow_add, pow_one] at hk\n            apply mul_eq_zero.mp at hk\n            apply or_iff_not_imp_right.mp at hk\n            have hk' := hk hb'\n            apply hd at hk'\n            exact hb' hk'\n        exact hb k h₂\n        exact Nat.not_eq_zero_of_lt hn\n      · have hne : (a ^ (m * x')) ≠ 0 := by\n          have hne : ∀ k : ℕ, a ^ k ≠ 0 := by\n            intro k\n            induction' k with d hd\n            · rw [pow_zero]\n              exact one_ne_zero\n            · rw [pow_add, pow_one]\n              exact mul_ne_zero hd ha\n          exact hne (m * x')\n        exact mul_left_cancel₀ hne h\n    · -- (4) $x < 0$ and $y < 0$. Since $m, n > 0$, we know that $1 = mx + ny < 0$, which leads to a contradiction.\n      push_neg at hyp\n      have : -y ≥ 0 := Int.le_of_lt (Int.neg_pos_of_neg hyp)\n      let y' : ℕ := (-y).toNat\n      have hy' : y' = -y := Int.toNat_of_nonneg this\n      rw [← sub_neg_eq_add, neg_mul_eq_mul_neg, ← hy'] at hxy\n      apply eq_sub_iff_add_eq'.mp at hxy\n      rw [← zero_add (↑m * x), ← sub_neg_eq_add 0, neg_mul_eq_mul_neg, ← hx'] at hxy\n      apply eq_sub_iff_add_eq'.mp at hxy\n      rw [← add_assoc] at hxy\n      apply Int.ofNat_inj.mp at hxy\n      have hgt : m * x' + n * y' + 1 > 0 := by exact Nat.zero_lt_succ (m * x' + n * y')\n      rw [hxy] at hgt\n      tauto",
    "informalProof": "Proof:\n\n1. According to Bezout's lemma, $\\exists x, y \\in \\mathbb{Z}$, such that $mx + ny = \\mathrm{gcd}(m, n) = 1$.\n\n2. We discuss the positivity of $x$ and $y$, because the member of ring $R$ can't be powered by negative numbers.\n\n3. (1) $x \\ge 0$ and $y \\ge 0$. Here, we know that $a = a^1 = a^{mx + ny} = (a^m)^x \\cdot (a^n)^y = (b^m)^x \\cdot (b^n)^y = b^{mx + ny} = b^1 = b$.\n\n4. (2) $x \\ge 0$ and $y < 0$. Here, we set $y' = -y > 0$, then we have $ny' + 1 = mx$.\n\n5. Then, we know that $a^{ny'} \\cdot a = a^{ny' + 1} = a^{mx} = (a^m)^x = (b^m)^x = b^{mx} = b^{ny' + 1} = (b^n)^{y'} \\cdot b = (a^n)^{y'} \\cdot b = a^{ny'} \\cdot b$.\n\n6. (2.i) If $a = 0$, then $b^m = 0$. Since $R$ is an integral domain, it implies that $b = 0$, so $a = b$.\n\n7. (2.ii) If $a \\ne 0$, then $a^{ny'} \\ne 0$. Since $R$ is an integral domain, $a^{ny'} \\cdot a = a^{ny'} \\cdot b$ implies that $a = b$.\n\n8. (3) $x < 0$ and $y \\ge 0$. Here, we set $x' = -x > 0$, then we have $mx' + 1 = ny$. This situation is exactly the same as (2).\n\n9. (4) $x < 0$ and $y < 0$. Since $m, n > 0$, we know that $1 = mx + ny < 0$, which leads to a contradiction."
  },
  {
    "id": 367,
    "title": "Exercise_281",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.4.8. 如果 $D$ 为整环但不是域, 则 $D[x]$ 不是主理想整环. 特别地, $\\mathbb{Z}[x]$ 不是 PID.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Polynomial\n\ntheorem not_Field_not_PID {D : Type*} [CommRing D] [IsDomain D] (not_field : ¬ IsField D) : ¬ (IsPrincipalIdealRing D[X]) := by\n  -- Assume for contradiction that $D[x]$ is a principal ideal domain.\n  intro PID\n  -- We claim that the ideal $\\langle X \\rangle$ is a prime ideal.\n  have PI :(Ideal.span {(X - C 0 : D[X])}).IsPrime := by\n    -- It is to prove $D[X] / \\langle X \\rangle \\cong D$ is an integral domain,\n    apply (Ideal.Quotient.isDomain_iff_prime _).mp\n    -- which follows from the fact that $D[X] / \\langle X \\rangle \\cong D$ with $D$ being an integral domain.\n    apply Equiv.isDomain (quotientSpanXSubCAlgEquiv 0).toRingEquiv\n  -- The ideal $\\langle X \\rangle$ is hence a maximal ideal\n  have MI : (Ideal.span {(X - C 0 : D[X])}).IsMaximal := by\n    -- because $D[X]$ is a P.I.D. and every non-zero prime ideal in a P.I.D. is maximal.\n    apply IsPrime.to_maximal_ideal; simp\n  -- Therefore, $D$ must be a field\n  have is_field : IsField D := by\n    -- because $D \\cong D[X] / \\langle X \\rangle$\n    apply MulEquiv.isField _ _ (quotientSpanXSubCAlgEquiv 0).toMulEquiv.symm\n    -- and $D[X] / \\langle X \\rangle$ is a field ($\\langle X \\rangle$ is a maximal ideal).\n    apply (Ideal.Quotient.maximal_ideal_iff_isField_quotient _).mp MI\n  -- This contradicts the assumption that $D$ is not a field.\n  contradiction\n\nexample : ¬ (IsPrincipalIdealRing ℤ[X]) := by\n  -- This follows directly since $\\mathbb{Z}$ is an integral domain but not a field.\n  apply not_Field_not_PID Int.not_isField",
    "informalProof": "Theorem: If $D$ is an integral domain but not a field, then $D[x]$ is not a principal ideal domain.\nProof:\n1. Assume for contradiction that $D[x]$ is a principal ideal domain.\n2. We claim that the ideal $\\langle X \\rangle$ is a prime ideal.\n3. It is to prove $D[X] / \\langle X \\rangle \\cong D$ is an integral domain, which follows from the fact that $D[X] / \\langle X \\rangle \\cong D$ with $D$ being an integral domain.\n4. The ideal $\\langle X \\rangle$ is hence a maximal ideal because $D[X]$ is a P.I.D. and every non-zero prime ideal in a P.I.D. is maximal.\n5. Therefore, $D$ must be a field because $D \\cong D[X] / \\langle X \\rangle$ and $D[X] / \\langle X \\rangle$ is a field ($\\langle X \\rangle$ is a maximal ideal).\n6. This contradicts the assumption that $D$ is not a field.\n\nCorollary: $\\mathbb{Z}[x]$ is not a P.I.D. since $\\mathbb{Z}$ is not a field.\nProof:\n1. This follows directly since $\\mathbb{Z}$ is an integral domain but not a field."
  },
  {
    "id": 378,
    "title": "Exercise_292",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3.7.2. 设 $E / F$ 和 $K / F$ 均是正规扩张, 求证: $E K / F$ 也是正规扩张.",
    "comment": "",
    "suggestion": "",
    "formalProof": "section Exercise_292\nnamespace Exercise_292\nset_option maxHeartbeats 0\n\n/-\n设 $F$ 是一个域，$F_0$ 是 $F$ 的一个子域，$E, K$ 是 $F$ 的正规扩域。试证明： $E K$ 也是 $F$ 的正规扩域。\n-/\n\n-- 择取域 $F₀$ 使得 $E K$是 $F₀/F$的中间域。\nvariable {F F₀ : Type*} [Field F] [Field F₀] [Algebra F F₀]\nvariable (E K : IntermediateField F F₀) [Normal F E] [Normal F K]\n\n-- 应用中间域的正规性质，命题证明结束。\ntheorem Exercise_292_normal_sup [Normal F E] [Normal F K] :\n  Normal F (E ⊔ K : IntermediateField F F₀) := by\n  apply IntermediateField.normal_sup F F₀\n\n\nend Exercise_292\nend Exercise_292",
    "informalProof": "问题：\n设 $F$ 是一个域，$F_0$ 是 $F$ 的一个子域，$E, K$ 是 $F$ 的正规扩域。试证明： $E K$ 也是 $F$ 的正规扩域。\n\n证明：\n1. 择取域 $F₀$ 使得 $E K$是 $F₀/F$的中间域。\n2. 应用中间域的正规性质，命题证明结束。"
  },
  {
    "id": 380,
    "title": "Exercise_294",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.3.14*. 设 $A \\leqslant G$, 试证 $C_{G} C_{G} C_{G}(A)=C_{G}(A)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "#check Submonoid.centralizer\nexample {G : Type*} [Monoid G] (A A₁ A₂ A₃: Submonoid G) {h₁: A₁= Submonoid.centralizer A}\n {h₂: A₂ = Submonoid.centralizer A₁} {h₃: A₃ = Submonoid.centralizer A₂}: A₁ = A₃ := by\n--Prove $C_{G} C_{G} C_{G}(A)\\supseteq C_{G}(A)$ \n--and $C_{G} C_{G} C_{G}(A)\\subseteq C_{G}(A)$ respectively \n  apply le_antisymm\n--Lemma 1: $A\\subseteq C_{G} C_{G}(A)$\n  have h: ∀ (B B₁ B₂: Submonoid G),B₁ = Submonoid.centralizer B → B₂ = Submonoid.centralizer B₁ →\n  B₂ ≥ B := by \n--Fix a $y\\in C_{G}(A), yx=xy$ for all $\\forall x \\in A$ \n--then fix a  $x\\in A, \\forall y \\in C_{G}(A), xy=yx,\n--\\implies x\\in C_{G} C_{G}(A) \\implies A\\subseteq C_{G} C_{G}(A)$  \n    intro B B₁ B₂ h1 h2 x hx\n    rw [h2]\n    show ∀ y ∈ B₁, y * x  = x * y\n    intro y hy\n    rw [h1] at hy\n    exact Eq.symm (SemiconjBy.eq (hy x hx))\n--Replace $A$ with $C_{G}(A)$ above, we have $C_{G} C_{G} C_{G}(A)\\supseteq C_{G}(A)$    \n  apply h A₁ A₂ A₃ h₂ h₃\n--lemma 2: $\\forall X,Y\\subseteq G, X\\subseteq Y \\implies C_{G}(X)\\supseteq C_{G}(Y)$  \n  have q: ∀ (X Y: Submonoid G), X ≤ Y → Submonoid.centralizer X.carrier ≥ Submonoid.centralizer Y.carrier := by\n  --For any $y\\in C_{G}(Y), yy'=y'y$ holds for all $y'\\in Y$ \n  --thus for all $x\\in X$ by $X\\subseteq Y$ thus $y\\in C_{G}(X) \n  --\\implies C_{G}(X)\\supseteq C_{G}(Y)$\n    intro X Y p y hy\n    show ∀ x ∈ X, x * y = y * x\n    intro x hx\n    have : x ∈ Y := by exact p hx \n    exact hy x (p hx)       \n  rw [h₃, h₁]\n--Use lemma 2. It suffices to show that $A\\subseteq C_{G} C_{G}(A)$ \n--which can be concluded from lemma 1  \n  apply q A A₂\n  have h: ∀ (B B₁ B₂: Submonoid G),B₁ = Submonoid.centralizer B → B₂ = Submonoid.centralizer B₁ →\n  B₂ ≥ B := by \n    intro B B₁ B₂ h1 h2 x hx\n    rw [h2]\n    show ∀ y ∈ B₁, y * x  = x * y\n    intro y hy\n    rw [h1] at hy\n    exact Eq.symm (SemiconjBy.eq (hy x hx))\n  apply h A A₁\n  exact h₁\n  exact h₂ ",
    "informalProof": "设 $A \\leqslant G$, 试证 $C_{G} C_{G} C_{G}(A)=C_{G}(A)$.\n Proof:\n    Prove $C_{G} C_{G} C_{G}(A)\\supseteq C_{G}(A)$ and $C_{G} C_{G} C_{G}(A)\\subseteq C_{G}(A)$ respectively.  \n    Part 1.  \n    Lemma 1: $A\\subseteq C_{G} C_{G}(A)$.  \n    Fix a $y\\in C_{G}(A), yx=xy$ for all $\\forall x \\in A$ then fix a  $x\\in A, \\forall y \\in C_{G}(A), xy=yx,\\implies x\\in C_{G} C_{G}(A) \\implies A\\subseteq C_{G} C_{G}(A)$.  \n    Replace $A$ with $C_{G}(A)$ above, we have $C_{G} C_{G} C_{G}(A)\\supseteq C_{G}(A)$.  \n    Part 2.  \n    lemma 2: $\\forall X,Y\\subseteq G, X\\subseteq Y \\implies C_{G}(X)\\supseteq C_{G}(Y)$.  \n    For any $y\\in C_{G}(Y), yy'=y'y$ holds for all $y'\\in Y$ thus for all $x\\in X$ by $X\\subseteq Y$ thus $y\\in C_{G}(X) \\implies C_{G}(X)\\supseteq C_{G}(Y)$.  \n    Use lemma 2. It suffices to show that $A\\subseteq C_{G} C_{G}(A)$ which can be concluded from lemma 1"
  },
  {
    "id": 384,
    "title": "Exercise_298",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.6.3. 一个置换的阶等于它的轮换表示中各个轮换因子的长度的最小公倍数.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nnamespace Equiv.Perm\n\nopen Equiv List Multiset\n\nvariable {α : Type*} [Fintype α][DecidableEq α]\n\nexample (σ : Perm α) : σ.cycleType.lcm = orderOf σ := by\n  induction σ using cycle_induction_on with\n  --We use induction on cycle to prove this example. \n  | base_one => simp only [cycleType_one, lcm_zero, orderOf_one]\n  --Step 1 : prove $\\operatorname {lcm} 1-\\text{length} = |1|$ for identity perm. Trivial.\n  | base_cycles σ hσ => simp only [hσ.cycleType, coe_singleton, lcm_singleton, normalize_apply,\n    normUnit_eq_one, Units.val_one, mul_one, hσ.orderOf]\n  --Step 2 : prove $\\operatorname{lcm} (\\text{length of } \\sigma) = |\\sigma|$ for a cycle $\\sigma.$That is a standard fact.\n  | induction_disjoint σ τ hd _ hσ hτ => simp only [hd.cycleType, lcm_add, hσ, hτ,\n    lcm_eq_nat_lcm, hd.orderOf]\n  --Step 3 : prove $\\operatorname{lcm} (\\text{lengths of }(\\sigma \\tau)) = |\\sigma \\tau|$ for any two cycles. That is also a standard fact.\n  --The induction method is based on that each perm has cycletype i.e. Each perm could be written as finite number of some disjoint cycles.\n",
    "informalProof": "We use induction on cycle to prove this example. $\\\\$\nStep 1 : prove $\\operatorname{lcm} (\\text{length of }1) = |1|$ for identity perm.Trivial.$\\\\$\nStep 2 : prove $\\operatorname{lcm} (\\text{length of } \\sigma) = |\\sigma|$ for a cycle $\\sigma.$That is a standard fact.$\\\\$\nStep 3 : prove $\\operatorname{lcm} (\\text{lengths of }(\\sigma \\tau)) = |\\sigma \\tau|$ for any two cycles. That is also a standard fact.$\\\\$\n --The induction method is based on that each perm has cycletype i.e. Each perm could be written as finite number of disjoint cycles."
  },
  {
    "id": 389,
    "title": "Exercise_905",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "8. Show that $G L_{n}(F)$ is non-abelian for any $n \\geq 2$ and any $F$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "\nopen Matrix Finset Classical BigOperators\n\n/-\n8. Show that $G L_{n}(F)$ is non-abelian for any $n \\geq 2$ and any $F$.   \n-/\nexample {F : Type*} [Field F]  {n : ℕ} (h : n ≥ 2) : ∃ a b : (GL (Fin n) F) , a * b ≠ b * a := by\n  let const_n_minus_one : Fin n := ⟨n - 1, by refine Nat.sub_one_lt_of_le (Nat.zero_lt_of_lt h) (le_refl n)⟩\n  let const_zero : Fin n := ⟨0, by linarith⟩\n  --Let $c$ be a matrix with diagonal elements and the upper right block to be 1 and $d$ be a matrix with diagonal elements and lower left elements to be 1.    \n  let a : Matrix (Fin n) (Fin n) F := of fun i j ↦ if (i = const_zero ∧ j = const_n_minus_one) then (1 : F) else (0 : F)\n  let a' : Matrix (Fin n) (Fin n) F := of fun i j ↦ if i = const_zero ∧ j = const_n_minus_one then (-1 : F) else (0 : F)\n  let b : Matrix (Fin n) (Fin n) F := of fun i j ↦ if (j = const_zero ∧ i = const_n_minus_one) then (1 : F) else (0 : F)\n  let b' : Matrix (Fin n) (Fin n) F := of fun i j ↦ if (j = const_zero ∧ i = const_n_minus_one) then (-1 : F) else (0 : F)\n  let c := a + 1\n  let c':= a'+ 1\n  let d := b + 1\n  let d':= b'+ 1\n  --We show that $c$ and $d$ belongs to $GLₙ(F)$. Let $c'$ be a matrix with diagonal elements 1 and the upper right block -1 and $d$ be a matrix with diagonal elements 1 and lower left elements -1. By calculation we can see that $c' * c = 1$ and $d' * d = 1$, so $c$ and $d$ are invertible and thus belongs to $GLₙ(F)$.   \n  have hc: Invertible (Matrix.det c) := by\n    apply c.detInvertibleOfLeftInverse c'\n    unfold_let c c'\n    simp only [mul_add, add_mul, one_mul, mul_one]\n    rw [← add_assoc]\n    apply add_eq_of_eq_sub\n    simp only [sub_self]\n    have h1: a + a' = 0 := by\n      unfold_let a a'\n      ext i j\n      simp only [add_apply, of_apply, zero_apply]\n      by_cases h: i = const_zero ∧ j = const_n_minus_one <;> simp [h]\n    have h2: a' * a = 0 := by\n      unfold_let a a'\n      ext i j\n      rw [Matrix.mul_apply]\n      simp only [of_apply, mul_ite, mul_one, mul_zero, zero_apply]\n      apply Finset.sum_eq_zero\n      intro k _\n      simp\n      intro h1 _ _\n      rw [h1]\n      unfold_let\n      simp only [Fin.mk.injEq]\n      by_contra p\n      have: n = 1 := by\n        have h: 0 + 1 = n - 1 + 1 := by rw [p]\n        have: n - 1 + 1 = n := by\n          refine Nat.sub_add_cancel ?h\n          linarith\n        rw [this] at h; simp only [zero_add] at h\n        exact h.symm\n      linarith\n    rw[h2, zero_add, h1]\n  have hd: Invertible (Matrix.det d) := by\n    apply d.detInvertibleOfLeftInverse d'\n    unfold_let d d'\n    simp [add_mul, mul_add]\n    rw [← add_assoc]\n    apply add_eq_of_eq_sub\n    simp only [sub_self]\n    have h1: b + b' = 0 := by\n      unfold_let b b'\n      ext i j\n      simp only [add_apply, of_apply, zero_apply]\n      by_cases h: j = const_zero ∧ i = const_n_minus_one <;> simp [h]\n    have h2: b' * b = 0 := by\n      unfold_let b b'\n      ext i j\n      rw [Matrix.mul_apply]\n      simp only [of_apply, mul_ite, mul_one, mul_zero, zero_apply]\n      apply Finset.sum_eq_zero\n      intro k _\n      simp only [ite_eq_right_iff, neg_eq_zero, one_ne_zero, imp_false, not_and, and_imp]\n      intro _ h2 h3\n      intro _\n      rw [h3] at h2\n      absurd h2\n      unfold_let\n      simp only [Fin.mk.injEq]\n      by_contra p\n      have: n = 1 := by\n        have h: 0 + 1 = n - 1 + 1 := by rw [p]\n        have: n - 1 + 1 = n := by\n          refine Nat.sub_add_cancel ?h\n          linarith\n        rw [this] at h; simp only [zero_add] at h\n        exact h.symm\n      linarith\n    rw[h2, zero_add, h1]\n  let c'' : GeneralLinearGroup (Fin n) F := GeneralLinearGroup.mk' c hc\n  let d'' : GeneralLinearGroup (Fin n) F := GeneralLinearGroup.mk' d hd\n  have this1: n - 1 ≠ 0 := fun h => by omega\n  have this2: 0 ≠ n - 1 := fun h => this1 h.symm\n  --We show that $c * d ≠ d * c$, let's consider the upper left block, in $c * d$, it's 2. But in $d * c$, it's 1, thus it suffices to support that $c * d ≠ d * c$.   \n  have ne : c * d ≠ d * c := by\n    by_contra q\n    apply Matrix.ext_iff.mpr at q\n    have q1: (c * d) const_zero const_zero = 2 := by\n      rw [Matrix.mul_apply]\n      unfold_let c d a b\n      simp\n      let s1: Finset _ := {const_n_minus_one, const_zero}\n      have : s1 ⊆ univ := by simp\n      unfold_let const_n_minus_one\n      unfold_let const_zero\n      rw [(Finset.sum_subset_zero_on_sdiff this ?_ fun _ _ => rfl).symm]\n      · unfold_let s1\n        unfold_let const_n_minus_one\n        unfold_let const_zero\n        rw [Finset.sum_insert]\n        simp [h, this1, this2]\n        norm_num\n        simp [h]\n        exact fun h => by omega\n      · intro x hx\n        unfold_let s1 const_n_minus_one const_zero at hx\n        simp at hx\n        simp [hx]\n    have q2: (d * c) ⟨0, by linarith⟩ ⟨0, by linarith⟩ = 1 := by\n      unfold_let d c \n      simp [add_mul, mul_add]\n      unfold_let b a const_zero const_n_minus_one\n      rw [Matrix.mul_apply]\n      simp [this1, this2]\n    rw [q] at q1\n    rw [q1] at q2\n    have : (2: F) = 1 + 1 := by norm_num\n    rw [this] at q2\n    simp at q2\n  --Thus $c$ $d$ is an example for the noncommutative elements in $GLₙ(F)$, this finishes the proof.    \n  use c'' , d''\n  have val1: (c'' * d'').1 = c * d := by rfl\n  have val2: (d'' * c'').1 = d * c := by rfl\n  by_contra h\n  absurd ne\n  rw [←val1, ←val2, h]\n",
    "informalProof": "Proof:   \n1. Let $c$ be a matrix with diagonal elements and the upper right block to be 1 and $d$ be a matrix with diagonal elements and lower left elements to be 1.    \n2. We show that $c$ and $d$ belongs to $GLₙ(F)$. Let $c'$ be a matrix with diagonal elements 1 and the upper right block -1 and $d$ be a matrix with diagonal elements 1 and lower left elements -1. By calculation we can see that $c' * c = 1$ and $d' * d = 1$, so $c$ and $d$ are invertible and thus belongs to $GLₙ(F)$.   \n3. We show that $c * d ≠ d * c$, let's consider the upper left block, in $c * d$, it's 2. But in $d * c$, it's 1, thus it suffices to support that $c * d ≠ d * c$.   \n4. Thus $c$ $d$ is an example for the noncommutative elements in $GLₙ(F)$, this finishes the proof.    "
  },
  {
    "id": 399,
    "title": "Exercise_923",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3. Let $R$ be a Euclidean Domain. Let $m$ be the minimum integer in the set of norms of nonzero elements of $R$. Prove that every nonzero element of $R$ of norm $m$ is a unit. Deduce that a nonzero element of norm zero (if such an element exists) is a unit.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-Let $R$ be a Euclidean Domain. Let $m$ be the minimum integer in the set of norms of nonzero elements of $R$. Prove that every nonzero element of $R$ of norm $m$ is a unit. Deduce that a nonzero element of norm zero (if such an element exists) is a unit.-/\n/-Suppse the norm function is $f$. We prove : If $m$ satisfy that $\\forall a\\in R,a\\neq 0, f(a)\\geq f(m)$, then m is a unit of $R$-/\nexample {R : Type*} [EuclideanDomain R] (m : R) (mnz : m ≠ 0) (hm : ∀ a : R, a ≠ 0 -> ¬EuclideanDomain.r a m) : IsUnit m := by\n  /-Suppose $1=q*m+r$.-/\n  set r := EuclideanDomain.remainder 1 m with req \n  set q := EuclideanDomain.quotient 1 m with qeq\n  have quo := EuclideanDomain.quotient_mul_add_remainder_eq 1 m\n  /-Then $f(r)\\leq f(m)$. So $r=0$.-/\n  rw [← req, ← qeq] at quo\n  have rrm : EuclideanDomain.r r m := EuclideanDomain.remainder_lt 1 mnz\n  have rz : r = 0 := by\n    by_contra rnz \n    have := hm r rnz\n    exact this rrm\n  /- Thus $q*m=1$, $m$ is a unit.-/\n  rw [rz, add_zero] at quo\n  exact isUnit_of_mul_eq_one m q quo",
    "informalProof": "Let $R$ be a Euclidean Domain. Let $m$ be the minimum integer in the set of norms of nonzero elements of $R$. Prove that every nonzero element of $R$ of norm $m$ is a unit. Deduce that a nonzero element of norm zero (if such an element exists) is a unit.\n\nProof:\n1. Suppse the norm function is $f$. We prove : If $m$ satisfy that $\\forall a\\in R,a\\neq 0, f(a)\\geq f(m)$, then m is a unit of $R$。 \n2. Suppose $1=q*m+r$. Then $f(r)\\leq f(m)$. So $r=0$.\n3. Thus $q*m=1$, $m$ is a unit."
  },
  {
    "id": 402,
    "title": "Exercise_929",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "23. Let $G$ be a finite group which possesses an automorphism $\\sigma$ (cf. Exercise 20) such that $\\sigma(g)=g$ if and only if $g=1$. If $\\sigma^{2}$ is the identity map from $G$ to $G$, prove that $G$ is abelian (such an automorphism $\\sigma$ is called fixed point free of order 2). [Show that every element of $G$ can be written in the form $x^{-1} \\sigma(x)$ and apply $\\sigma$ to such an expression.]",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] [Finite G] (σ : MulEquiv G G) (h : ∀ g, σ g = g ↔ g = 1) (ids : σ ∘ σ = id) : CommGroup G := by\n  -- From the assumption that $σ ∘ σ = id$, we get that $σ (σ g) = g$ for all $g$.\n  have ids' (g : G) : σ (σ g) = g := congrFun ids g\n  -- We have that for every $g$, there exists some $x$ such that $g = x⁻¹ * σ x$.\n  have (g : G) : ∃ x, g = x⁻¹ * σ x := by\n    -- Prove this by showing that function $f x = x⁻¹ * σ x$ is bijective.\n    -- Since G is a finite group, we suffices to prove that f is injective.\n    have : (fun x ↦ x⁻¹ * σ x).Bijective := Finite.injective_iff_bijective.mp (by\n      intro x y hxy\n      -- Given x and y such that x⁻¹ * σ x = y⁻¹ * σ y, prove x = y by doing some calculation.\n      simp only at hxy\n      have hxy : y * x⁻¹ = (σ y) * (σ x)⁻¹ := by\n        rw [← mul_inv_cancel_right x⁻¹ (σ x), hxy]\n        group\n      have hxy : σ (y * x⁻¹) = y * x⁻¹ := by\n        nth_rw 1 [hxy, map_mul, ids', map_inv, ids']\n      have hxy : y * x⁻¹ = 1 := (h (y * x⁻¹)).mp hxy\n      rw [← one_mul x, ← hxy, mul_assoc, mul_left_inv, mul_one]\n    )\n    -- Since $f$ is bijective, thus surjective, for every $g$, there exists some $x$ such that $g = f x$.\n    exact (Function.Surjective.exists this.2).mp exists_eq'\n  -- Using the previous result, we have that $σ g = g⁻¹$ for all $g$.\n  have (g : G) : σ g = g⁻¹ := by\n    rcases (this g) with ⟨x, hx⟩\n    rw [hx, map_mul, map_inv, ids', mul_inv_rev, inv_inv]\n\n  -- To show $G$ is commutative, show $a * b = b * a$ for all $a$, $b$.\n  apply CommGroup.mk\n  intro a b\n  -- First we have $σ (a * b) = σ (b * a)$ by using $σ$'s properties.\n  have : σ (a * b) = σ (b * a) := by\n    calc\n      _ = b⁻¹ * a⁻¹ := by rw [this, mul_inv_rev]\n      _ = (σ b) * (σ a) := by rw [← this, ← this, ]\n      _ = σ (b * a) := Eq.symm (map_mul σ b a)\n\n  -- From that, we got $σ (σ (a * b)) = σ (σ (b * a))$.\n  rw [← ids' (a * b), ← ids' (b * a)]\n  -- Since $σ (σ g) = g$ for all $g$, we proved $a * b = b * a$.\n  exact congrArg _ this\n",
    "informalProof": "Proof. \n1. From the assumption that $σ ∘ σ = id$, we get that $σ (σ g) = g$ for all $g$.\n2. We have that for every $g$, there exists some $x$ such that $g = x⁻¹ * σ x$.\n3. Prove this by showing that function $f x = x⁻¹ * σ x$ is bijective.\n4. Since G is a finite group, we suffices to prove that f is injective.\n5. Given x and y such that x⁻¹ * σ x = y⁻¹ * σ y, prove x = y by doing some calculation.\n6. Since $f$ is bijective, thus surjective, for every $g$, there exists some $x$ such that $g = f x$.\n7. Using the previous result, we have that $σ g = g⁻¹$ for all $g$.\n8. To show $G$ is commutative, show $a * b = b * a$ for all $a$, $b$.\n9. First we have $σ (a * b) = σ (b * a)$ by using $σ$'s properties.\n10. From that, we got $σ (σ (a * b)) = σ (σ (b * a))$.\n11. Since $σ (σ g) = g$ for all $g$, we proved $a * b = b * a$."
  },
  {
    "id": 403,
    "title": "Exercise_931",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "23. Prove that in a Boolean ring (cf. Exercise 15 , Section 1) every prime ideal is a maximal ideal.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nProve that in a Boolean ring, every prime ideal is a maximal ideal.\n-/\nexample {R : Type*} [BooleanRing R] {I : Ideal R} (hi : I.IsPrime) : I.IsMaximal := by\n  -- To prove that a prime ideal $I$ of Boolean ring $R$ is a maximal ideal, we should assume that a proper ideal $J$ of $R$ strictly includes $I$, and prove that $J = R, \\ \\mathrm{i.e.} \\ 1 \\in J$.\n  apply Ideal.isPrime_iff.mp at hi\n  rcases hi with ⟨hi₁, hi₂⟩\n  apply Ideal.isMaximal_iff.mpr\n  constructor\n  · -- Firstly, $I$ should not equal to $R$. This is obvious because $I$ is a prime ideal.\n    exact (Ideal.ne_top_iff_one I).mp hi₁\n  · intro J x hij hx hj\n    have h1 := (Ideal.ne_top_iff_one I).mp hi₁\n    -- Since $I \\subsetneqq J$, let $x \\in J$ but $x \\notin I$. Hence, we know that $x \\cdot 1 \\cdot (x - 1) = x \\cdot x - x = 0$ since $R$ is a Boolean ring.\n    have h₁ : x * 1 * (x - 1) ∈ I := by\n      rw [mul_sub, mul_one, mul_one, BooleanRing.mul_self, sub_self]\n      exact Submodule.zero_mem I\n    -- At the same time, $x \\cdot 1 \\notin I$ because $I$ is a prime ideal and $x, 1 \\notin I$.\n    have h₂ : x * 1 ∉ I := by\n      by_contra h₂\n      apply hi₂ at h₂\n      tauto\n    -- Hence, we know $x - 1 \\in I \\le J$. Using $x \\in J$ we get $1 \\in J$, indicating $J = R$, so $I$ is a maximal ideal.\n    have h₃ := sub_mem hj (hij (or_iff_not_imp_left.mp (hi₂ h₁) h₂))\n    rw [← sub_add, sub_self, zero_add] at h₃\n    exact h₃",
    "informalProof": "Proof:\n\n1. To prove that a prime ideal $I$ of Boolean ring $R$ is a maximal ideal, we should assume that a proper ideal $J$ of $R$ strictly includes $I$, and prove that $J = R, \\ \\mathrm{i.e.} \\ 1 \\in J$.\n\n2. Firstly, $I$ should not equal to $R$. This is obvious because $I$ is a prime ideal.\n\n3. Since $I \\subsetneqq J$, let $x \\in J$ but $x \\notin I$. Hence, we know that $x \\cdot 1 \\cdot (x - 1) = x \\cdot x - x = 0$ since $R$ is a Boolean ring.\n\n4. At the same time, $x \\cdot 1 \\notin I$ because $I$ is a prime ideal and $x, 1 \\notin I$.\n\n5. Hence, we know $x - 1 \\in I \\le J$. Using $x \\in J$ we get $1 \\in J$, indicating $J = R$, so $I$ is a maximal ideal."
  },
  {
    "id": 424,
    "title": "Exercise_962",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. Prove that $C_{G}(A)=\\left\\{g \\in G \\mid g^{-1} a g=a\\right.$ for all $\\left.a \\in A\\right\\}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nProve that $C_{G}(A)=\\left\\{g \\in G \\mid g^{-1} a g=a\\right.$ for all $\\left.a \\in A\\right\\}$.\n-/\nexample {G : Type*} {A : Set G} [Group G] : Subgroup.centralizer A = {g : G | ∀ a ∈ A, g⁻¹ * a * g = a} := by\n  -- We prove that $C_G(A) \\subseteq \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\}$ and $\\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\} \\subseteq C_G(A)$.\n  apply Set.Subset.antisymm\n  · intro g hg\n    -- First, for $g \\in C_G(A)$, it satisfies that $\\forall a \\in A, \\ ag = ga$. Then, $\\forall a \\in A, \\ g^{-1}ag = g^{-1}ga = a, \\ \\mathrm{i.e.} \\ g \\in \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\}$.\n    apply Subgroup.mem_centralizer_iff.mp at hg\n    apply Set.mem_setOf.mpr\n    intro a ha\n    have ha' := hg a ha\n    rw [mul_assoc, ha', ← mul_assoc, mul_left_inv, one_mul]\n  · intro g hg\n    -- Second, for $g \\in \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\} , \\ \\forall a \\in A, \\ ga = g(g^{-1}ag) = ag, \\ \\mathrm{i.e.} \\ g \\in C_G(A)$.\n    apply Subgroup.mem_centralizer_iff.mpr\n    apply Set.mem_setOf.mp at hg\n    intro a ha\n    have ha' := hg a ha\n    nth_rw 2 [← ha']\n    group",
    "informalProof": "Proof:\n\n1. We prove that $C_G(A) \\subseteq \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\}$ and $\\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\} \\subseteq C_G(A)$.\n\n2. First, for $g \\in C_G(A)$, it satisfies that $\\forall a \\in A, \\ ag = ga$. Then, $\\forall a \\in A, \\ g^{-1}ag = g^{-1}ga = a, \\ \\mathrm{i.e.} \\ g \\in \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\}$.\n\n3. Second, for $g \\in \\{ g \\in G \\ | \\ \\forall a \\in A, \\ g^{-1}ag = a \\} , \\ \\forall a \\in A, \\ ga = g(g^{-1}ag) = ag, \\ \\mathrm{i.e.} \\ g \\in C_G(A)$."
  },
  {
    "id": 436,
    "title": "Exercise_979",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3. Determine the fixed field of complex conjugation on $\\mathbb{C}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport MIL.common\nimport Mathlib.Data.Complex.Basic\n\nopen ComplexConjugate\n-- Prove that the set of complex numbers fixed by conjugation is the set of real numbers\nexample : {z : ℂ | conj z = z} = {z : ℂ | ∃ (x : ℝ), z = x} := by\n  ext y\n  dsimp\n  constructor\n  -- Prove the forward direction: if conj y = y, then y is a real number\n  · intro h\n    use y.re\n    rw [Complex.conj_eq_iff_re] at h\n    exact h.symm\n  -- Prove the reverse direction: if y is a real number, then conj y = y\n  · intro h\n    rw [Complex.conj_eq_iff_re]\n    rw [Complex.ext_iff]\n    dsimp\n    rcases h with ⟨x, hx⟩\n    rw [Complex.ext_iff] at hx\n    dsimp at hx\n    constructor\n    rfl\n    rw [hx.2]",
    "informalProof": "Prove that the set of complex numbers fixed by conjugation is the set of real numbers\nProve the forward direction: if conj y = y, then y is a real number\nProve the reverse direction: if y is a real number, then conj y = y"
  },
  {
    "id": 437,
    "title": "Exercise_981",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "10. Assume $R$ is commutative. Prove that if $P$ is a prime ideal of $R$ and $P$ contains no zero divisors then $R$ is an integral domain.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nAssume $R$ is commutative. Prove that if $P$ is a prime ideal of $R$ and $P$ contains no zero divisors then $R$ is an integral domain.\n-/\nexample {R : Type*} [CommRing R] {P : Ideal R} [Nontrivial P] (_ : P.IsPrime) (hz : ∀ a : P, ∀ b : R, a * b = 0 → a = 0 ∨ b = 0) : IsDomain R where\n  -- Since $R$ is already commutative, we just have to prove that $R$ isn't trivial, and $R$ satisfies the left and right cancellation of multiplication.\n  mul_left_cancel_of_ne_zero := by\n    intro a b c ha hbc\n    -- For $a, b, c \\in R$ in which $a \\ne 0$, we just have to prove that $ab = ac$ implies $b = c$. Let $0 \\ne p \\in P$, then $pa, bp, cp \\in P$ since $P$ is an ideal.\n    have hp := exists_ne (0 : P)\n    rcases hp with ⟨p, hp⟩\n    have hxp : ∀ x : R, x * p ∈ P := fun x ↦ Ideal.mul_mem_left P x (Submodule.coe_mem p)\n    -- From $ab = ac$ we know that $pabp = pacp$, so $pa (bp - cp) = 0$. Hence, $pa = 0$ or $bp - cp = 0$.\n    have h₁ : (p * a) * (b * p) = (p * a) * (c * p) := by rw [← mul_assoc, ← mul_assoc, mul_assoc (p : R), hbc, ← mul_assoc]\n    have hpa := hxp a\n    rw [mul_comm] at hpa\n    have h₂ : (p * a) * (b * p - c * p) = 0 := by rw [mul_sub, h₁, sub_self]\n    have h₃ := hz ⟨(p * a), hpa⟩ (b * p - c * p) h₂\n    -- Since $a, p \\ne 0 $ and $P$ contains no zero divisors, we know $pa \\ne 0$, so $bp - cp = 0, \\ \\mathrm{i.e.} \\ bp = cp$.\n    have ha' : (⟨(p * a), hpa⟩ : P) ≠ 0 := by\n      by_contra ha'\n      simp only [AddSubmonoid.mk_eq_zero] at ha'\n      apply hz at ha'\n      exact ha (or_iff_not_imp_left.mp ha' hp)\n    have h₄ := or_iff_not_imp_left.mp h₃ ha'\n    simp only [AddSubmonoid.mk_eq_zero] at h₄\n    -- Since $P$ contains no zero divisors, $P$ satisfies right cancellation of multiplication, so $bp = cp$ implies $b = c$.\n    rw [← sub_mul, mul_comm] at h₄\n    apply hz at h₄\n    apply eq_of_sub_eq_zero (or_iff_not_imp_left.mp h₄ hp)\n  mul_right_cancel_of_ne_zero := by\n    -- For the right cancellation part, since $P$ is commutative, it is obviously proven by above.\n    intro b a c ha hbc\n    rw [mul_comm b, mul_comm c] at hbc\n    have hp := exists_ne (0 : P)\n    rcases hp with ⟨p, hp⟩\n    have hxp : ∀ x : R, x * p ∈ P := fun x ↦ Ideal.mul_mem_left P x (Submodule.coe_mem p)\n    have h₁ : (p * a) * (b * p) = (p * a) * (c * p) := by rw [← mul_assoc, ← mul_assoc, mul_assoc (p : R), hbc, ← mul_assoc]\n    have hpa := hxp a\n    rw [mul_comm] at hpa\n    have h₂ : (p * a) * (b * p - c * p) = 0 := by rw [mul_sub, h₁, sub_self]\n    have h₃ := hz ⟨(p * a), hpa⟩ (b * p - c * p) h₂\n    have ha' : (⟨(p * a), hpa⟩ : P) ≠ 0 := by\n      by_contra ha'\n      simp only [AddSubmonoid.mk_eq_zero] at ha'\n      apply hz at ha'\n      exact ha (or_iff_not_imp_left.mp ha' hp)\n    have h₄ := or_iff_not_imp_left.mp h₃ ha'\n    simp only [AddSubmonoid.mk_eq_zero] at h₄\n    rw [← sub_mul, mul_comm] at h₄\n    apply hz at h₄\n    apply eq_of_sub_eq_zero (or_iff_not_imp_left.mp h₄ hp)\n  exists_pair_ne := by\n    -- Since $P$ isn't trivial, $R$ is also nontrivial.\n    have h := exists_pair_ne P\n    rcases h with ⟨x, y, h⟩\n    use (x : R), (y : R)\n    exact Subtype.coe_ne_coe.mpr h",
    "informalProof": "Proof:\n\n1. Since $R$ is already commutative, we just have to prove that $R$ isn't trivial, and $R$ satisfies the left and right cancellation of multiplication.\n\n2. For $a, b, c \\in R$ in which $a \\ne 0$, we just have to prove that $ab = ac$ implies $b = c$. Let $0 \\ne p \\in P$, then $pa, bp, cp \\in P$ since $P$ is an ideal.\n\n3. From $ab = ac$ we know that $pabp = pacp$, so $pa (bp - cp) = 0$. Hence, $pa = 0$ or $bp - cp = 0$.\n\n4. Since $a, p \\ne 0 $ and $P$ contains no zero divisors, we know $pa \\ne 0$, so $bp - cp = 0, \\ \\mathrm{i.e.} \\ bp = cp$.\n\n5. Since $P$ contains no zero divisors, $P$ satisfies right cancellation of multiplication, so $bp = cp$ implies $b = c$.\n\n6. For the right cancellation part, since $P$ is commutative, it is obviously proven by above.\n\n7. Since $P$ isn't trivial, $R$ is also nontrivial."
  },
  {
    "id": 478,
    "title": "Exercise_1166",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(Characterization of P.I.D.s) \n\nProve that $R$ is a P.I.D. if and only if $R$ is a U.F.D. that is also a Bezout Domain. \n\nHint : [One direction is given by Theorem 14. For the converse, let $a$ be a nonzero element of the ideal $I$ with a minimal number of irreducible factors. Prove that $I=(a)$ by showing that if there is an element $b \\in I$ that is not in $(a)$ then $(a, b)=(d)$ leads to a contradiction.]",
    "comment": "使用反证法我在选取极小元那一步卡住了。所以我搬出了库定理。",
    "suggestion": "",
    "formalProof": "section Exercise_1166\nnamespace Exercise_1166\n/-\n设 $R$ 是整环。试证明：环 $R$ 作PID等价于环 $R$ 作Bezout-UFD。\n-/\nvariable {R : Type*} [CommRing R]\n\ntheorem Exercise_1166_pid_iff_ufd_and_bezout [IsDomain R] :\n  IsPrincipalIdealRing R ↔  UniqueFactorizationMonoid R ∧ IsBezout R := by\n  constructor\n  -- 一方面，从PID推出UFD和Bezout是显然的。\n  . intro h\n    constructor\n    . infer_instance\n    . infer_instance\n  -- 另一方面，若 $R$ 是Bezout-UFD环，则 $R$ 是诺特环，亦即 $R$ 的理想有限生成。\n  . intro h\n    rcases h with ⟨h_ufd, h_bezout⟩\n    rw [isPrincipalIdealRing_iff]\n    intro I\n    haveI : IsNoetherianRing R := by\n      exact ((IsBezout.TFAE (R := R)).out 2 0).mp h_ufd\n    -- 此时，由于 $R$ 是Bezout环，故 $R$ 的理想是主理想。\n    exact IsBezout.isPrincipal_of_FG I (IsNoetherian.noetherian _)\n\nend Exercise_1166\nend Exercise_1166",
    "informalProof": "问题：\n设 $R$ 是整环。试证明：环 $R$ 作PID等价于环 $R$ 作Bezout-UFD。\n\n证明：\n1. 一方面，从PID推出UFD和Bezout是显然的。\n2. 另一方面，若 $R$ 是Bezout-UFD环，则 $R$ 是诺特环，亦即 $R$ 的理想有限生成。此时，由于 $R$ 是Bezout环，故 $R$ 的理想是主理想。"
  },
  {
    "id": 496,
    "title": "Exercise_1196",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6. Let $H \\leq G$ and let $g \\in G$. Prove that if the right coset $H g$ equals some left coset of $H$ in $G$ then it equals the left coset $g H$ and $g$ must be in $N_{G}(H)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Set\nopen Subgroup\nopen scoped Pointwise\n\n-- Definitions and necessary imports\nvariable {G : Type*} [Group G] {H : Subgroup G} {g : G}\n\n-- Theorem: If the right coset Hg equals some left coset of H in G, then it equals the left coset gH and g must be in NG(H)\ntheorem right_coset_eq_left_coset (h : ∃ g' : G, MulOpposite.op g • H.carrier = g' • H.carrier) :\n  MulOpposite.op g • H.carrier = g • H.carrier ∧ g ∈ Subgroup.normalizer H := by\n  -- Assume Hg equals some left coset of H in G, say g'H.\n  rcases h with ⟨g', hcoset⟩\n  \n  -- Show that g is in the right coset Hg.\n  have : g ∈ MulOpposite.op g • H.carrier := by\n    apply (mem_rightCoset_iff g).mpr\n    simp\n    exact Subgroup.one_mem H\n  \n  -- Rewrite the assumption with the given coset equality.\n  rw [hcoset] at this\n  rw [hcoset]\n  rcases this with ⟨h1, h⟩\n  simp at *\n  \n  -- Prove that g' • H.carrier = g • H.carrier.\n  have hp: g' • H.carrier = g • H.carrier := by\n    ext x\n    constructor\n    -- First direction: g' • H.carrier ⊆ g • H.carrier\n    · intro hh\n      rcases hh with ⟨h2, hh⟩\n      simp at hh\n      use h1⁻¹ * h2\n      simp\n      constructor\n      · have: h1⁻¹ ∈ H := by apply (Subgroup.inv_mem_iff H).mpr; exact h.1\n        have this2: h2 ∈ H := by exact hh.1\n        exact (Subgroup.mul_mem_cancel_right H this2).mpr this\n      · rw [← h.2, ← hh.2]\n        group\n    -- Second direction: g • H.carrier ⊆ g' • H.carrier\n    · intro hh\n      rcases hh with ⟨h2, hh⟩\n      simp at hh\n      use h1 * h2\n      simp\n      constructor\n      · have: h1 ∈ H := by exact h.1\n        have this2: h2 ∈ H := by exact hh.1\n        exact (Subgroup.mul_mem_cancel_right H this2).mpr this\n      · rw [← hh.2, ← h.2, mul_assoc]\n  \n  constructor\n  -- Show that Hg = gH\n  · exact hp\n  \n  -- Prove that g is in the normalizer of H\n  · rw [hp] at hcoset\n    have: H = g⁻¹ • (MulOpposite.op g • H.carrier) := by\n      exact eq_inv_smul_iff.mpr (id (Eq.symm hcoset))\n    apply mem_normalizer_iff''.mpr\n    intro hh\n    constructor\n    -- First part: gHg⁻¹ ⊆ H\n    · intro hpp\n      have t1: ∃ ht: H, g⁻¹ * hh * g = ht := by\n        simp only [Subtype.exists, exists_prop, exists_eq_right']\n        have t2: g⁻¹ * hh * g ∈ g⁻¹ • MulOpposite.op g • H.carrier := by\n          apply mem_inv_smul_set_iff.mpr\n          apply (mem_rightCoset_iff g).mpr\n          simp\n          group\n          exact hpp\n        rw [← this] at t2\n        exact t2\n      rcases t1 with ⟨ht, t1⟩\n      rw [t1]\n      exact SetLike.coe_mem ht\n    -- Second part: H ⊆ gHg⁻¹\n    · intro hpp\n      have t1: ∃ ht: H, g⁻¹ * hh * g = ht := by\n        simp\n        exact hpp\n      rcases t1 with ⟨ht, t1⟩\n      have t2: ∃ htt: H, g⁻¹ * htt * g = ht := by\n        have t3: ht.1 ∈ g⁻¹ • MulOpposite.op g • H.carrier := by\n          rw [← this]\n          exact ht.2\n        rcases t3 with ⟨l, hl⟩\n        simp at hl\n        rcases hl.1 with ⟨l1, hl1⟩\n        simp at hl1\n        use ⟨l1, hl1.1⟩\n        simp\n        rw [mul_assoc, hl1.2, hl.2]\n      rcases t2 with ⟨htt, t2⟩\n      rw [← t1] at t2\n      simp at t2\n      rw [← t2]\n      exact SetLike.coe_mem htt\n\n\n\n  \n",
    "informalProof": "# Informal Proof\r\n\r\n**Theorem**: If the right coset \\( Hg \\) equals some left coset of \\( H \\) in \\( G \\), then it equals the left coset \\( gH \\) and \\( g \\) must be in the normalizer of \\( H \\) in \\( G \\).\r\n\r\n**Proof**:\r\n\r\n1. **Assumption**: Suppose \\( Hg = g'H \\) for some \\( g' \\in G \\). We need to show that \\( Hg = gH \\) and \\( g \\in N_G(H) \\) (the normalizer of \\( H \\) in \\( G \\)).\r\n\r\n2. **Step 1: Prove \\( Hg = gH \\)**\r\n    - By assumption, we have \\( Hg = g'H \\).\r\n    - We need to show that \\( g'H \\subseteq gH \\) and \\( gH \\subseteq g'H \\).\r\n\r\n    - For \\( g'H \\subseteq gH \\):\r\n        - Take any element \\( x \\in g'H \\). Then \\( x = g'h \\) for some \\( h \\in H \\).\r\n        - Since \\( g' = gk \\) for some \\( k \\in H \\), we have \\( x = gkh \\).\r\n        - We can write \\( h = h_1h_2 \\) for some \\( h_1, h_2 \\in H \\), so \\( x = g(kh_1)h_2 \\in gH \\).\r\n    \r\n    - For \\( gH \\subseteq g'H \\):\r\n        - Take any element \\( x \\in gH \\). Then \\( x = gh \\) for some \\( h \\in H \\).\r\n        - Since \\( g = g'k \\) for some \\( k \\in H \\), we have \\( x = g'kh \\).\r\n        - We can write \\( h = h_1h_2 \\) for some \\( h_1, h_2 \\in H \\), so \\( x = g'(kh_1)h_2 \\in g'H \\).\r\n\r\n3. **Step 2: Prove \\( g \\in N_G(H) \\)**\r\n    - The normalizer \\( N_G(H) \\) of \\( H \\) in \\( G \\) is defined as:\r\n      \\[ N_G(H) = \\{ g \\in G \\mid gHg^{-1} \\subseteq H \\} \\]\r\n    \r\n    - To show \\( g \\in N_G(H) \\), we need to prove that for all \\( h \\in H \\), \\( ghg^{-1} \\in H \\).\r\n    \r\n    - By the previous steps, we have \\( Hg = gH \\). This implies:\r\n      \\[ gHg^{-1} = H \\]\r\n    \r\n    - Therefore, for any \\( h \\in H \\), we have \\( ghg^{-1} \\in H \\). Hence, \\( g \\in N_G(H) \\).\r\n\r\n### Conclusion\r\n\r\nWe have shown that if the right coset \\( Hg \\) equals some left coset of \\( H \\) in \\( G \\), then it must equal the left coset \\( gH \\) and \\( g \\) must be in the normalizer of \\( H \\) in \\( G \\). This completes the proof.\r\n"
  },
  {
    "id": 544,
    "title": "Example_8003B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $G$ be a group, and $a, b \\in G$. For any positive integer $n$ we define $a^{n}$ by $a^{n}=\\underbrace{a a a \\cdots a}_{n \\text { factors }}$\n\nIf there is an element $x \\in G$ such that $a=x^{2}$, we say that $a$ has a square root in $G$. Similarly, if $a=y^{3}$ for some $y \\in G$, we say $a$ has a cube root in $G$. In general, $a$ has an $n$th root in $G$ if $a=z^{n}$ for some $z \\in G$. Prove\n$1\\left(b a b^{-1}\\right)^{n}=b a^{n} b^{-1}$, for every positive integer Prove by induction. \n",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type} [Group G] (a b:G) (n:ℕ) : (b*a*b⁻¹)^n=b*a^n*b⁻¹ := by\n  --用归纳法\n  induction' n with n ih\n  · simp only [pow_zero, mul_one, mul_right_inv]\n  · calc\n    _ = (b * a * b⁻¹) ^ n * (b * a * b⁻¹) :=by simp only [pow_succ]\n    --使用归纳假设后就简单了\n    _ = b*a^n*b⁻¹ * (b * a * b⁻¹) :=by simp only [ih]\n    _ = b*(a^n*a)*b⁻¹ :=by group\n    _ = _ :=by simp only [pow_succ]",
    "informalProof": "1、用归纳法，使用归纳假设简化即可\n\n2、同时归纳(a*b)^n=a^n*b^n 以及 b^n*a=a*b^n\n\n2.1、归纳前式要用到b^n*a=a*b^n，所以才需要同时归纳之\n\n2.2、后式的根本原因是a，b可交换\n\n3、用归纳法，2^(2*(n+1))化成^(2*n+1+1)的形式，容易使用pow_succ定理"
  },
  {
    "id": 555,
    "title": "Exercise_1579",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2 Show that $\\mathbf{z}_{10}$ is generated by 2 and 5 .",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\ntheorem task941 : Subgroup.closure ({x | x = (2 : ZMod 10) ∨ x = (5 : ZMod 10)} : Set (Multiplicative (ZMod 10))) = (⊤ : Subgroup (Multiplicative (ZMod 10))) := by\n  let clos : Subgroup (Multiplicative (ZMod 10)) := Subgroup.closure ({x | x = (2 : ZMod 10) ∨ x = (5 : ZMod 10)} : Set (Multiplicative (ZMod 10)))\n  have l₂ : (2 : ZMod 10) ∈ ({x | x = (2 : ZMod 10) ∨ x = (5 : ZMod 10)} : Set (Multiplicative (ZMod 10))) := by\n    left\n    rfl\n  have e₂ : (2 : ZMod 10) ∈ clos := Subgroup.subset_closure l₂\n  have l₅ : (5 : ZMod 10) ∈ ({x | x = (2 : ZMod 10) ∨ x = (5 : ZMod 10)} : Set (Multiplicative (ZMod 10))) := by\n    right\n    rfl\n  have e₅ : (5 : ZMod 10) ∈ clos := Subgroup.subset_closure l₅\n  have pow (k : ZMod 10) (e : k ∈ clos) : ∀ n : ℕ, n • (k : ZMod 10) ∈ clos := by\n    intro n\n    induction n\n    case zero =>\n      rw [zero_smul]\n      exact Subgroup.one_mem clos\n    case succ n ih =>\n      rw [add_smul,one_smul]\n      exact Subgroup.mul_mem clos ih e\n  -- $1 = 3 * 2 + 5 \\in \\left\\langle 2,5 \\right\\rangle$\n  have e₁ : (1 : ZMod 10) ∈ clos := by\n    have : (1 : ZMod 10) = 3 • (2 : ZMod 10) + (5 : ZMod 10) := by decide\n    exact Subgroup.mul_mem clos (pow 2 e₂ 3) e₅\n  have : ∀ n : ZMod 10, n = n.val • (1 : ZMod 10) := by decide\n  have : ∀ n : ZMod 10, n ∈ clos := by\n    intro n\n    rw [this n]\n    exact pow 1 e₁ n.val\n  exact (Subgroup.eq_top_iff' clos).mpr this",
    "informalProof": "$1 = 2 * 3 + 5$ and $1$ generates $Z / 10Z$."
  },
  {
    "id": 556,
    "title": "Exercise_1582",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "5 Show that every integer $z$ is generated by 5 and 7 .",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n-- Theorem: For every integer z, there exist integers a and b such that z = 5a + 7b.\nexample : ∀ z : ℤ, ∃ a b : ℤ, z = a * 5 + b * 7 := by\n  -- Introduce an arbitrary integer z.\n  intro z\n  -- Choose a = 3 * z and b = -2 * z.\n  use 3 * z, -2 * z\n  -- Simplify the expression to show that z = 5 * (3 * z) + 7 * (-2 * z).\n  group",
    "informalProof": "# Informal Proof\r\n\r\n**Theorem**: For every integer \\( z \\), there exist integers \\( a \\) and \\( b \\) such that \\( z = 5a + 7b \\).\r\n\r\n**Proof**:\r\n\r\nLet \\( z \\) be an arbitrary integer. We aim to show that \\( z \\) can be written as a linear combination of 5 and 7. Specifically, we need to find integers \\( a \\) and \\( b \\) such that \\( z = 5a + 7b \\).\r\n\r\nConsider the following choices:\r\n- Let \\( a = 3z \\)\r\n- Let \\( b = -2z \\)\r\n\r\nNow, let's verify that these choices satisfy the equation \\( z = 5a + 7b \\):\r\n\r\n\\[\r\n\\begin{align*}\r\n5a + 7b &= 5(3z) + 7(-2z) \\\\\r\n&= 15z - 14z \\\\\r\n&= z\r\n\\end{align*}\r\n\\]\r\n\r\nThus, we have found that for any integer \\( z \\), there exist integers \\( a = 3z \\) and \\( b = -2z \\) such that \\( z = 5a + 7b \\). Therefore, \\( \\mathbb{Z} \\) is generated by 5 and 7.\r\n\r\nThis completes the proof.\r\n"
  },
  {
    "id": 591,
    "title": "Exercise_1641",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1 Prove in $S_{n}$ : If $\\alpha=\\left(a_{1} \\ldots a_{s}\\right)$ is a cycle of length $s$, then $\\alpha^{k}=\\varepsilon$ if and only if $s | k$, and the order of $\\alpha$ is $s$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n/-Problem : Let $f$ be a cycle of length $s$, \nthen show that $\\forall k\\in \\mathbb{N},f^k=1\\iff s\\mid k$(This implies $\\forall k< n, f^k\\ne 1$). And the order of $f$ equals to $s$.-/\n--Just verify the definition of order.\nexample (n:ℕ)(f:Equiv.Perm (Fin n))(cyc: Equiv.Perm.IsCycle f)(length: f.support.card=s):\n(∀(k:ℕ), f^k=1 ↔s ∣ k) ∧ orderOf f=s :=by \n  constructor\n  · intro k\n    constructor\n    · intro h \n      rwa [← @orderOf_dvd_iff_pow_eq_one,Equiv.Perm.IsCycle.orderOf cyc,length] at h\n    · intro dvd\n      rw[←length,←Equiv.Perm.IsCycle.orderOf cyc] at dvd\n      exact orderOf_dvd_iff_pow_eq_one.mp dvd\n  · rwa [Equiv.Perm.IsCycle.orderOf cyc]\n\n    ",
    "informalProof": "Problem : Let $f$ be a cycle of length $s$, \nthen show that $\\forall k\\in \\mathbb{N},f^k=1\\iff s\\mid k$(This implies $\\forall k< n, f^k\\ne 1$). And the order of $f$ equals to $s$.\n\nProof\n\nLet $f=(1   2...s)$, then $f^s$ maps 1 to 1 , 2 to 2 ... s to s i.e. $f^s=1$, use this we can prove $\\forall k \\in \\mathbb{N}, s\\mid k, f^k=1$. And it's easy to verify $f^k\\ne 1 \\forall k\\in \\mathbb{N}, s\\nmid k$.  so the order of $f$ is $s$.Q.E.D."
  },
  {
    "id": 628,
    "title": "Exercise_1680",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Suppose $g=(a, b) \\in G \\times H$, where $a$ has order $m$ and $b$ has order $n$. Prove that $\\operatorname{ord}(g)=\\operatorname{LCM}(m,n)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Algebra.Group.Subgroup.ZPowers\nimport Mathlib.Tactic\nimport Mathlib.Algebra.Group.MinimalAxioms\n\n\nsection Example_1415B\n/-\n-/\n/-\nLet $G$ and $H$ be groups. Suppose $g=(a, b) \\in G \\times H$, where $a$ has order $m$ and $b$ has order $n$. Prove that $\\operatorname{ord}(g)=\\operatorname{LCM}(m,n)$.\n-/\nexample {G H : Type*} [Group G] [Group H] {a : G} {b : H} : orderOf (a, b) = Nat.lcm (orderOf a) (orderOf b) := by\n  --Note that $x = (a,b)$\n  let x : G × H := (a, b)\n  --We have $m \\mid orderOf x$ because $x^{orderOf x} = (1,*)$,i.e $a ^ {orderOf x} = 1$\n  have dvd1 : orderOf a ∣ orderOf x := by\n    apply orderOf_dvd_of_pow_eq_one\n    calc\n      _ = (x ^ orderOf x).1 := rfl\n      _ = _ := by simp only [pow_orderOf_eq_one x, Prod.fst_one]\n  --We have $n \\mid orderOf x$ as the same reason\n  have dvd2 : orderOf b ∣ orderOf x := by\n    apply orderOf_dvd_of_pow_eq_one\n    calc\n      _ = (x ^ orderOf x).2 := rfl\n      _ = _ := by simp only [pow_orderOf_eq_one x, Prod.snd_one]\n  --Hence we prove that $\\operatorname{LCM}(m,n) \\mid orderOf x$\n  have h1 : Nat.lcm (orderOf a) (orderOf b) ∣ orderOf x :=  Nat.lcm_dvd dvd1 dvd2\n  --We will $orderOf x \\mid \\operatorname{LCM}(m,n)$\n  have h2 : orderOf x ∣ Nat.lcm (orderOf a) (orderOf b) := by\n    apply orderOf_dvd_of_pow_eq_one\n    -- by prove $a ^ {\\operatorname{LCM}(m,n)} = 1$\n    have eq1 : a ^ Nat.lcm (orderOf a) (orderOf b) = 1:= by\n      apply orderOf_dvd_iff_pow_eq_one.mp\n      exact Nat.dvd_lcm_left (orderOf a) (orderOf b)\n    -- and $b ^ {\\operatorname{LCM}(m,n)} = 1$\n    have eq2 : b ^ Nat.lcm (orderOf a) (orderOf b) = 1:= by\n      apply orderOf_dvd_iff_pow_eq_one.mp\n      exact Nat.dvd_lcm_right (orderOf a) (orderOf b)\n    calc\n    _ = (a ^ Nat.lcm (orderOf a) (orderOf b), b ^ Nat.lcm (orderOf a) (orderOf b)) := rfl\n    _ = _ := by simp only [eq1, eq2, Prod.mk_eq_one, and_self]\n  --We have prove that $orderOf x = \\operatorname{LCM}(m,n)$\n  apply Nat.dvd_antisymm h2 h1\n\nend Example_1415B",
    "informalProof": "Let $G$ and $H$ be groups. Suppose $g=(a, b) \\in G \\times H$, where $a$ has order $m$ and $b$ has order $n$. Prove that $\\operatorname{ord}(g)=\\operatorname{LCM}(m,n)$.\n\n0.Note that $x = (a,b)$\n\n1.We have $m \\mid orderOf x$ because $x^{orderOf x} = (1,*)$,i.e $a ^ {orderOf x} = 1$\n\n2.We have $n \\mid orderOf x$ as the same reason\n\n3.Hence we prove that $\\operatorname{LCM}(m,n) \\mid orderOf x$\n\n4.We will $orderOf x \\mid \\operatorname{LCM}(m,n)$ by prove $a ^ {\\operatorname{LCM}(m,n)} = 1$ and $b ^ {\\operatorname{LCM}(m,n)} = 1$\n\n5.We have prove that $orderOf x = \\operatorname{LCM}(m,n)$\n"
  },
  {
    "id": 630,
    "title": "Example_1682",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6 Suppose $(c, d) \\in G \\times H$, where $c$ has order $m$ and $d$ has order $n$. Prove: If $m$ and $n$ are not relatively prime (hence have a common factor $q>1$ ), then the order of $(c, d)$ is less than $m n$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (G H : Type*) [Group G] [Group H] (c : G) (d : H) (m n : ℕ) (k1 : m > 0) (k2 : n > 0) (k3: orderOf c = m) (k4 : orderOf d = n ) (k5 : m.gcd n > 1): orderOf (c, d) < m * n := by\n  have lemma1 : orderOf (c, d) = Nat.lcm (orderOf c) (orderOf d):= by\n  --We first prove a lemma : orderOf (c, d) = Nat.lcm (orderOf c) (orderOf d).\n    refine Nat.dvd_antisymm ?_ ?_\n    --Divide the problem into two parts, so we only need to prove that both sides can be divided by the other.\n    · have h1 : (c, d) ^ (orderOf c).lcm (orderOf d) = 1 := by\n     --For the first part, we first want to prove h1 : (c, d) ^ (orderOf c).lcm (orderOf d) = 1.\n        refine Eq.symm (Prod.ext ?_ ?_)\n       --Then, we separate the equasion into two parts by definition.\n        · symm\n          dsimp\n          have h2 : (orderOf c) ∣ (orderOf c).lcm (orderOf d) := by\n            exact Nat.dvd_lcm_left (orderOf c) (orderOf d)\n          exact orderOf_dvd_iff_pow_eq_one.mp h2\n        --For the first part, since we can prove h2 : (orderOf c) ∣ (orderOf c).lcm (orderOf d) by definition, we can easily reach the goal.\n        · symm\n          dsimp\n          have h2 : (orderOf d) ∣ (orderOf c).lcm (orderOf d) := by\n            exact Nat.dvd_lcm_right (orderOf c) (orderOf d)\n          exact orderOf_dvd_iff_pow_eq_one.mp h2\n        --For the second part, we can finish the proof in the same way.\n      exact orderOf_dvd_of_pow_eq_one h1\n      --Finally, by using the facts about order, we can directly reach the conclusion of the first half.\n\n    · have h1 : (c, d) ^ orderOf (c, d) = 1 := by\n       exact pow_orderOf_eq_one (c, d)\n      simp only [Prod.pow_mk, Prod.mk_eq_one] at h1\n      --For the second half, by using the definition of order, we can get that c ^ orderOf (c, d) = 1 and d ^ orderOf (c, d) = 1.\n      refine Nat.lcm_dvd ?refine_2.H1 ?refine_2.H2\n      --By using the definition of lcm, we can also separate the problem into two parts.\n      · have h2 : c ^ orderOf (c, d) = 1 := by exact h1.1\n        exact orderOf_dvd_of_pow_eq_one h2\n      · have h2 : d ^ orderOf (c, d) = 1 := by exact h1.2\n        exact orderOf_dvd_of_pow_eq_one h2\n      --At last, by just using the definition and easy facts about order, we can prove the two parts without any difficulty. This finishes the proof of the lemma.\n  have lemma2 : orderOf (c, d) = m.lcm n := by\n    rw [← k3, ← k4]\n    exact lemma1\n  --Then, by using the given information and the lemma, we can get that orderOf (c, d) = m.lcm n.\n  have lemma3 : m * n = (Nat.gcd m n) * (Nat.lcm m n) := by\n    exact Eq.symm (Nat.gcd_mul_lcm m n)\n  --Besides we can use the theorem : m * n = (Nat.gcd m n) * (Nat.lcm m n).\n  rw [lemma3, lemma2]\n  refine (Nat.lt_mul_iff_one_lt_left ?hb).mpr k5\n  exact Nat.lcm_pos k1 k2\n  --After that, by rewriting the goal with all the facts we have got, the conclusion becomes obvious. This finishes the whole proof.",
    "informalProof": "Proof:\n1. We first prove a lemma : orderOf (c, d) = Nat.lcm (orderOf c) (orderOf d).\n2. Divide the problem into two parts, so we only need to prove that both sides can be divided by the other.\n3. For the first part, we first want to prove h1 : (c, d) ^ (orderOf c).lcm (orderOf d) = 1.\n4. Then, we separate the equasion into two parts by definition.\n5. For the first part, since we can prove h2 : (orderOf c) ∣ (orderOf c).lcm (orderOf d) by definition, we can easily reach the goal.\n6. For the second part, we can finish the proof in the same way.\n7. Finally, by using the facts about order, we can directly reach the conclusion of the first half.\n8. For the second half, by using the definition of order, we can get that c ^ orderOf (c, d) = 1 and d ^ orderOf (c, d) = 1.\n9. By using the definition of lcm, we can also separate the problem into two parts.\n10. At last, by just using the definition and easy facts about order, we can prove the two parts without any difficulty. This finishes the proof of the lemma.\n11. Then, by using the given information and the lemma, we can get that orderOf (c, d) = m.lcm n.\n12. Besides we can use the theorem : m * n = (Nat.gcd m n) * (Nat.lcm m n).\n13. After that, by rewriting the goal with all the facts we have got, the conclusion becomes obvious. This finishes the whole proof."
  },
  {
    "id": 691,
    "title": "Exercise_1757",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. In a ring with unity, prove that if $a$ is nilpotent, then $a+1$ and $a-1$ are both invertible. [HinT: Use the factorization\n\n$$\n\n1-a^{n}=(1-a)\\left(1+a+a^{2}+\\cdots+a^{n-1}\\right)\n\n$$\n\nfor $1-a$, and a similar formula for $1+a$.]\n\n2. In a commutative ring, prove that any product $x a$ of a nilpotent element $a$ by any element $x$ is nilpotent.\n\n3.\nIn a commutative ring, prove that the sum of two nilpotent elements is nilpotent. (HinT: You must use the binomial formula; see Exercise L.)\n\nAn element $a$ of a ring is **unipotent** iff $1-a$ is nilpotent.\n\n4. In a commutative ring, prove that the product of two unipotent elements $a$ and $b$ is unipotent. [HinT: Use the binomial formula to expand $1-a b=(1-a)+a(1-b)$ to power $n+m$.]\n\n5. In a ring with unity, prove that every unipotent element is invertible. (Hint: Use Part 1.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem inv {R : Type*} [Ring  R] (a : R) {h : IsNilpotent a}: (∃ (r : R), (1 + a) * r = 1) ∧ (∃ (s : R), (1 - a) * s = 1) := by\n  constructor\n--1. $\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.   \n  rcases h with ⟨n,hn⟩\n--Thus $1=1 - a^{n}=(1-a)(1+a+a^{2}+\\cdots+a^{n-1})$ Thus $1-a$ is invertible  \n  have h₁: (1 + a) * (∑ i ∈ Finset.range n, (-a) ^ i) = 1 - (-a) ^ n := by\n    have h: 1 + a = 1 - (-a) := by \n      exact Eq.symm (sub_neg_eq_add 1 a)\n    rw [h]\n    exact mul_neg_geom_sum (-a) n  \n  use (∑ i ∈ Finset.range n, (-a) ^ i)\n  have h₂: (-a) ^ n = (-1) ^ n * a ^ n := by exact neg_pow a n  \n  have p: (-a) ^ n = 0 := by \n    rw [h₂, hn]\n    ring_nf\n    exact neg_one_pow_mul_eq_zero_iff.mpr rfl\n  rw [p] at h₁\n  have q: (1 : R) - 0 = 1 := by norm_num\n  rw [q] at h₁ \n  exact h₁\n--Similarly $1=1 - (-a)^{n}=(1+a)(1+(-a)+(-a)^{2}+\\cdots+(-a)^{n-1})$ \n--Thus $1+a$ is invertible  \n  rcases h with ⟨n,hn⟩ \n  have h: (1 - a) * (∑ i ∈ Finset.range n, a ^ i) = 1 - a ^ n := by exact mul_neg_geom_sum a n\n  use (∑ i ∈ Finset.range n, a ^ i)\n  have q: (1 : R) - 0 = 1 := by norm_num\n  rw [hn, q] at h\n  exact h\n",
    "informalProof": "1. In a ring with unity, prove that if $a$ is nilpotent, then $a+1$ and $a-1$ are both invertible. [HinT: Use the factorization $1-a^{n}=(1-a)\\left(1+a+a^{2}+\\cdots+a^{n-1}\\right)$\n\nfor $1-a$, and a similar formula for $1+a$.]\n\n2. In a commutative ring, prove that any product $x a$ of a nilpotent element $a$ by any element $x$ is nilpotent.\n\n3.\nIn a commutative ring, prove that the sum of two nilpotent elements is nilpotent. (HinT: You must use the binomial formula; see Exercise L.)\n\nAn element $a$ of a ring is **unipotent** iff $1-a$ is nilpotent.\n\n4. In a commutative ring, prove that the product of two unipotent elements $a$ and $b$ is unipotent. [HinT: Use the binomial formula to expand $1-a b=(1-a)+a(1-b)$ to power $n+m$.]\n\n5. In a ring with unity, prove that every unipotent element is invertible. (Hint: Use Part 1.)\n\nProof.  \n    1. $\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.   \nThus $1=1 - a^{n}=(1-a)(1+a+a^{2}+\\cdots+a^{n-1})$.  \n Thus $1-a$ is invertible.  \n    Similarly $1=1 - (-a)^{n}=(1+a)(1+(-a)+(-a)^{2}+\\cdots+(-a)^{n-1})$.  \n Thus $1+a$ is invertible.  \n    2. $\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.  \n    By $R$ is a commutative ring $(xa)^{n}=x^{n}*a^{n}=0$.  \n    3. $\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.  \n    $\\because b$ is nilpotent $\\therefore \\exist m\\in\\mathbb N,s.t. b^{m}=0$.  \n    By $R$ is a commutative ring $(a + b)^{n+m}=\\sum_{r=0}^{r=n+m}C_{n+m}^{r}a^{r}*b^{n+m-r}$.  \n    $\\forall t\\ge n,a^{t}=0$.  \n    $\\forall s\\ge m,b^{s}=0$.  \n    By $r+(n+m-r)=n+m$.  \n we have $r\\ge n$ or $n+m-r\\ge m$ If $r\\ge n$ then $a^{r}=0$.  \n otherwise $n+m-r\\ge m$ then $b^{n+m-r}=0$.  \n and both cases imply that $a^{r}*b^{n+m-r}=0$.  \n    Thus $(a+b)^{n+m}=0,i.e.(a+b)$ is nilpotent.  \n    4. It suffices to show that $1-ab$ is nilpotent.   \n    By $1-ab=(1-a)+a(1-b)$, $1-a$ is nilpotent,  \n    $1-b$ is nilpotent, $R$ is a commutative ring and the conclusions above,   \nwe have $a(1-b)$ is nilpotent and $(1-a)+a(1-b)$ is nilpotnet $i.e. (1-ab)$ is nilpotnet.  \n    5.$\\because (1-a)$ is nilpotent.  \n By the conclusions above we have $1-(1-a)$ is invertible $i.e. a$ is invertible "
  },
  {
    "id": 713,
    "title": "Exercise_1785",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $A$ be an integral domain. Let $a \\in A$. If $A$ has characteristic $\\mathrm{p}$, and $\\mathrm{n} \\cdot a=0$ where $\\mathrm{n}$ is not a multiple of $\\mathrm{p}$, then $a=0$.\n\n",
    "comment": "对于第四小问，我默认p是素数，因而p=0时0 ^ p 缺失良定义。",
    "suggestion": "",
    "formalProof": "section Exercise_1785\nnamespace Exercise_1785\n\nvariable {A : Type*} [CommRing A] [IsDomain A] {p : ℕ} {a : A}\n\ntheorem Exercise_1785_part1 [CharP A p] (hn : n • a = 0) (hnp : ¬ p ∣ n) : a = 0 := by\n  -- 由于 $A$ 的特征为 $p$，而条件给出 $p$ 不能整除 $n$，因此 $n * (1 : A) ≠ 0$。\n  have h_n_ne_zero : ¬ (n : A) = 0  := by\n    contrapose! hnp\n    exact (CharP.cast_eq_zero_iff A p n).mp hnp\n  -- 于是从 $n * a = 0$ 推出 $a = 0$。\n  simp only [nsmul_eq_mul, mul_eq_zero, h_n_ne_zero, false_or] at hn\n  exact hn\n\ntheorem Exercise_1785_part2 [h_p_Prime: Fact p.Prime] (ha : a ≠ 0) (hp : p • a = 0) : CharP A p := by\n  -- 由 $a ≠ 0$ 推有 $p * (1 : A) = 0$，按定义，$A$ 的特征为 $p$。\n  simp only [nsmul_eq_mul, mul_eq_zero, ha, or_false] at hp\n  exact (CharP.charP_iff_prime_eq_zero h_p_Prime.out).mpr hp\n\ntheorem Exercise_1785_part3 [h_p_Prime: Fact p.Prime] (ha : a ≠ 0) {m : ℕ} (hpm : p ^ m • a = 0) : CharP A p := by\n  -- 由 $a ≠ 0$ 推有 $m ≠ 0$。\n  have : ¬ m = 0 := by\n    contrapose! ha\n    simp only [ha, pow_zero, one_smul] at hpm\n    exact hpm\n  -- 进而由 $m ≠ 0, a ≠ 0, p ^ m * (1 : A) = 0$ 联合推出 $p * (1 : A) = 0$。\n  simp only [nsmul_eq_mul, Nat.cast_pow p m, mul_eq_zero, ne_eq, this, not_false_eq_true, pow_eq_zero_iff, ha, or_false] at hpm\n  -- 按定义，$A$ 的特征为 $p$。\n  exact ((CharP.charP_iff_prime_eq_zero (R := A) (p := p) h_p_Prime.out).mpr hpm)\n\ndef Exercise_1785_part4 (p : ℕ) [CharP A p] [h_p_Prime: Fact p.Prime] : RingHom A A := {\n  toFun := fun x => x ^ p\n  -- 保持幺元和乘法由环性质决定。\n  map_one' := by\n    simp only [one_pow]\n  map_mul' := by\n    intro x y\n    simp only\n    ring\n  -- 由于 $p ≠ 0$，因而由环性质可以验证零元同样被保持。\n  map_zero' := by\n    simp only [ne_eq, NeZero.ne p, not_false_eq_true, zero_pow]\n  -- 考虑交换环特征非 $0$ 时，有恒等式 $(x + y)^p = x^p + y^p$，因而加法同样被保持。\n  map_add' := by\n    intro x y\n    simp only\n    exact add_pow_char A x y\n  -- 证明完成。\n}\n\nend Exercise_1785\nend Exercise_1785",
    "informalProof": "问题：\n设 $A$ 是一个整环。证明以下 $1-4$ 部分：\n\n1. 设 $a \\in A$。如果 $A$ 的特征为 $p$，且 $n \\cdot a=0$，其中 $n$ 不是 $p$ 的倍数，则 $a=0$。\n\n2. 如果 $p$ 是素数，且存在非零元素 $a \\in A$ 使得 $p \\cdot a=0$，则 $A$ 的特征为 $p$。\n\n3. 如果 $p$ 是素数，且存在非零元素 $a \\in A$ 使得对某个整数 $m$，有 $p^m \\cdot a=0$，则 $A$ 的特征为 $p$。\n\n4. 如果 $A$ 的特征为 素数 $p$，则函数 $f(a)=a^p$ 是从 $A$ 到 $A$ 的同态映射。\n\n证明：\n- 1. 由于 $A$ 的特征为 $p$，而条件给出 $p$ 不能整除 $n$，因此 $n * (1 : A) ≠ 0$。于是从 $n * a = 0$ 推出 $a = 0$。\n- 2. 由 $a ≠ 0$ 推有 $p * (1 : A) = 0$，按定义，$A$ 的特征为 $p$。\n- 3. 由 $a ≠ 0$ 推有 $m ≠ 0$。进而由 $m ≠ 0, a ≠ 0, p ^ m * (1 : A) = 0$ 联合推出 $p * (1 : A) = 0$。按定义，$A$ 的特征为 $p$。\n- 4. 保持幺元和乘法由环性质决定。\n  5. 由于 $p ≠ 0$，因而由环性质可以验证零元同样被保持。\n  6. 考虑交换环特征非 $0$ 时，有恒等式 $(x + y)^p = x^p + y^p$，因而加法同样被保持。"
  },
  {
    "id": 714,
    "title": "Exercise_1786",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $A \\subseteq B$ where $A$ and $B$ are integral domains. Prove: $A$ has characteristic $\\mathrm{p}$ iff $B$ has characteristic $\\mathrm{p}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nimport Mathlib.Algebra.Group.Submonoid.Basic\n\n\nexample [CommRing B] [IsDomain B] (A : Subring B) : (ringChar B = p) ↔ (ringChar A = p) := by\n  --We prove the equivalent proposition in two parts.\n  constructor\n  --From left to right, we simply know that for all x ∈ A, x ∈ B,too.\n  · intro h\n    apply ringChar.eq_iff.mpr\n    apply ringChar.eq_iff.mp at h\n    --So A has characteristic p.\n    exact CharP.subsemiring B p A.toSubsemiring\n  -- From right to left, we need to show that ∀ (x : ℕ), x * (1 : A) = 0 ↔ p ∣ x.\n  · intro h\n    apply ringChar.eq_iff.mpr\n    apply ringChar.eq_iff.mp at h\n    refine (charP_iff B p).mpr ?mpr.a\n    rw [charP_iff] at h\n    intro x\n    specialize h x\n    rcases h with ⟨h1, h2⟩\n    --Notice that 1 ∈ B and 1 ∈ A at the same time. p * 1 = 0, and for all x ∈ A, p * x = p * 1 * x = 0.\n    constructor\n    · intro h'\n      have zero_A : (x : A) = 0 := by\n        exact ZeroMemClass.coe_eq_zero.mp h'\n      exact h1 (h2 (h1 zero_A))\n    · intro h'\n      obtain hp := h2 (h')\n      exact ZeroMemClass.coe_eq_zero.mpr hp\n",
    "informalProof": "Proof  \r\n1. We prove the equivalent proposition in two parts.\r\n2. From left to right, we simply know that for all x ∈ A, x ∈ B,too.\r\n3. So A has characteristic p.\r\n4. From right to left, we need to show that ∀ (x : ℕ), x * (1 : A) = 0 ↔ p ∣ x.\r\n5. Notice that 1 ∈ B and 1 ∈ A at the same time. p * 1 = 0, and for all x ∈ A, p * x = p * 1 * x = 0."
  },
  {
    "id": 732,
    "title": "Exercise_1853",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6 Suppose $a(x)$ and $b(x)$ have degree $<n$. If $a(c)=b(c)$ for $n$ values of $c$, prove that $a(x)=b(x)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import mathlib\nimport Mathlib.Tactic.ComputeDegree\n\nopen Finset\nopen Polynomial\n\nexample {n : ℕ} (a b : ℝ[X]) (ha : degree a < n) (hb : degree b < n)(hc :Multiset.card (roots (a - b))= n) : a = b := by\n  by_contra t\n  --We prove this problem by using the reductio ad absurdum.\n  have h : a - b ≠ 0 := by exact sub_ne_zero_of_ne t\n  --First of all,   if $a \\neq b$, then  $a-b \\neq 0$.\n  have h1 : Multiset.card (roots (a - b)) ≤ (a - b).degree := by exact card_roots h\n  --By using a corollary of the fundamental theorem of algebra, we immediately know that the number of the roots of $a-b$ less than or equal to the degree of it.\n  have h2 : (a + (-b)).degree ≤  max a.degree (-b).degree := by\n    exact Polynomial.degree_add_le a (-b)\n  have h3 : max a.degree (-b).degree < n := by\n    have f : (-b).degree = b.degree := by exact degree_neg b\n    rw[← f] at hb\n    exact max_lt ha hb\n  have h4 : (a + (-b)).degree < n := by exact lt_of_le_of_lt h2 h3\n  have h5 : (a + (-b)).degree = (a - b).degree := by exact rfl\n  rw[h5] at h4\n  --Consider that degree of $a$ , $b$ less than $n$.So, the degree of $a - b$ less than $n$.\n  have h6 : Multiset.card (roots (a - b)) < n := by\n    exact_mod_cast lt_of_le_of_lt h1 h4\n  -- Imediately, we get that the number of the roots of $a-b$ less than $n$.\n  rw[hc] at h6\n  exact (lt_self_iff_false n).mp h6\n  --This contradicts condition the number of the roots of $a-b$ is $n$.\n",
    "informalProof": "We prove this problem by using the reductio ad absurdum.  \r\nFirst of all,  \r\n if $a \\neq b$, then  $a-b \\neq 0$.  \r\n By using a corollary of the fundamental theorem of algebra, we immediately know that the number of the roots of $a-b$ less than or equal to the degree of it.    \r\n Consider that degree of $a$ , $b$ less than $n$.So, the degree of $a - b$ less than $n$.  \r\n Imediately, we get that the number of the roots of $a-b$ less than $n$.This contradicts condition the number of the roots of $a-b$ is $n$."
  },
  {
    "id": 782,
    "title": "Exercise_1913",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $U$ and $V$ have the same dimension $n$. Prove that $h$ is injective iff $h$ is surjective.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.LinearAlgebra.FiniteDimensional\nimport Mathlib.LinearAlgebra.LinearIndependent\nimport Mathlib\nimport Mathlib.Tactic\nimport MIL.Common\n\nopen FiniteDimensional\n-- Define K as a field and U, V as finite-dimensional vector spaces over K\nvariable (K : Type) [Field K]\nvariable (U V : Type) [AddCommGroup U] [Module K U]\nvariable [AddCommGroup V] [Module K V]\nvariable [FiniteDimensional K U] [FiniteDimensional K V]\n\nlemma injective_iff_surjective_of_finrank_eq_finrank [FiniteDimensional K U]\n    [FiniteDimensional K V] (H : FiniteDimensional.finrank K U = FiniteDimensional.finrank K V) {f : U →ₗ[K] V} :\n    Function.Injective f ↔ Function.Surjective f := by\n  have := LinearMap.finrank_range_add_finrank_ker f\n  rw [← LinearMap.ker_eq_bot, ← LinearMap.range_eq_top]; refine' ⟨fun h => _, fun h => _⟩\n  · rw [h, finrank_bot, add_zero, H] at this\n    exact Submodule.eq_top_of_finrank_eq this\n  · rw [h, finrank_top, H] at this\n    exact Submodule.finrank_eq_zero.1 (add_right_injective _ this)\n",
    "informalProof": "-- informal answer\n\n/-\nProof:\n1. first，Define K as a field and U, V as finite-dimensional vector spaces over K\n2. Example proof that a linear map between finite-dimensional spaces of the same dimension is injective if and only if it is surjective\n3. Apply the known result that for finite-dimensional vector spaces, a linear map is injective if and only if it is surjective\n6. Hence, we got the proof.\n-/"
  },
  {
    "id": 817,
    "title": "Exercise_2042",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "29. Show that if $G$ is a finite group with identity $e$ and with an even number of elements, then there is $a \\neq e$ in $G$ such that $a * a=e$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nShow that if $G$ is a finite group with identity $e$ and with an even number of elements, then there is $a \\neq e$ in $G$ such that $a * a = e$.\nFirst by Sylow's first theorem any group whose order is divided by 2 has a 2-group as its subgroup, where 2-group denotes the group whose order is exactly the power of 2.\nSo it suffices to prove that any 2-group contains an element of order 2. Then we can obtain the result we desire.\nLet $K$ be the 2-subgroup of $G$m and $C$ be the center of $K$. we know that the center of a p-group is always nontrivial, thus we can always select an element $x \\in C$ that is not equal to $e$.\nSince the order of $x$ has to divide the order of $K$, thus it must be a power of 2 which is not $1$.\nThen $u = x^{\\text{orderof} x / 2}$ is just an element of order 2, because\n1. $u$ is not equal to $e$ since $\\text{orderof} x / 2$ is less the order of $x$.\n2. $u * u = e$ by some simple simplification and the definition of order.\nFinally combining the observations above we have proven that any group of even order contain an element of order 2.\n-/\nexample {G : Type*} [Group G] [Fintype G] (h : 2 ∣ Fintype.card G) : ∃ (a : G), a ≠ 1 ∧ a * a = 1 := by\n  -- First by Sylow's first theorem any group whose order is divided by 2 has a 2-group as its subgroup, where 2-group denotes the group whose order is exactly the power of 2.\n  haveI : ∀ H : Subgroup G, Fintype H := fun H => Fintype.ofFinite H\n  have pow_dvd_card : 2^1 ∣ Fintype.card G := h\n  obtain ⟨K, hK⟩ := Sylow.exists_subgroup_card_pow_prime 2 pow_dvd_card\n  have card_k_gt_1 : 1 < Fintype.card K := by\n    simp only [pow_one] at hK\n    have p : 1 < 2 := by norm_num\n    suffices hcard : @Fintype.card (↥K) (this K)= 2 from Nat.lt_of_lt_of_eq p (id (Eq.symm hcard))\n    rw [← hK]\n    convert rfl\n  have nontrivial_K : Nontrivial K := by\n    rw [← Finite.one_lt_card_iff_nontrivial]; simp; exact card_k_gt_1\n  have K_is_p_group : IsPGroup 2 K := by\n    apply IsPGroup.of_card\n    rw [← hK]\n    convert rfl\n  -- So it suffices to prove that any 2-group contains an element of order 2. Then we can obtain the result we desire.\n  have exists_for_2p_group : (K : Subgroup G) → (Nontrivial K) → (IsPGroup 2 K) → ∃ (a : K), a ≠ 1 ∧ a * a = 1 := by\n    -- Let $K$ be the 2-subgroup of $G$m and $C$ be the center of $K$. we know that the center of a p-group is always nontrivial, thus we can always select an element $x \\in C$ that is not equal to $e$.\n    intro K ntk pgk\n    let C : Subgroup K := Subgroup.center K\n    have nontrivial_center : Nontrivial C := by apply IsPGroup.center_nontrivial pgk\n    rw [Subgroup.nontrivial_iff_exists_ne_one] at nontrivial_center\n    let ⟨x, ⟨_, hneq1⟩⟩ := nontrivial_center\n    -- Since the order of $x$ has to divide the order of $K$, thus it must be a power of 2 which is not $1$.\n    have xorder_is_pow_of_2 : ∃ r : Nat, orderOf x = 2^r := IsPGroup.iff_orderOf.mp pgk x\n    let ⟨r, hxr⟩ := xorder_is_pow_of_2\n    have rgt0 : r ≠ 0 := by\n      by_contra hr0\n      have : x = 1 := by rw [← orderOf_eq_one_iff, hxr, hr0]; norm_num\n      contradiction\n    -- Then $u = x^{\\text{orderof} x / 2}$ is just an element of order 2, because\n    use x^(2^(r-1))\n    constructor\n    -- 1. $u$ is not equal to $e$ since $\\text{orderof} x / 2$ is less the order of $x$.\n    · apply pow_ne_one_of_lt_orderOf'\n      simp only [ne_eq, pow_eq_zero_iff', OfNat.ofNat_ne_zero, false_and, not_false_eq_true]\n      rw [hxr, Nat.pow_lt_pow_iff_right];\n      simp only [tsub_lt_self_iff, zero_lt_one, and_true]\n      exact Nat.zero_lt_of_ne_zero rgt0; norm_num\n    -- 2. $u * u = e$ by some simple simplification and the definition of order.\n    · rw [← npow_add, ← Nat.two_pow_succ];\n      calc\n        x^(2^(r - 1 + 1)) = x^(2^r) := by rw [Nat.sub_add_cancel]; exact Nat.zero_lt_of_ne_zero rgt0\n        _ = 1 := by rw [← pow_orderOf_eq_one x, hxr]\n  -- Finally combining the observations above we have proven that any group of even order contain an element of order 2.\n  obtain ⟨a, ⟨han1, hao2⟩⟩ := exists_for_2p_group K nontrivial_K K_is_p_group\n  use a\n  constructor\n  · by_contra ha1\n    rw [OneMemClass.coe_eq_one] at ha1; contradiction\n  · rw [Subtype.ext_iff] at hao2; exact hao2",
    "informalProof": "/-\nShow that if $G$ is a finite group with identity $e$ and with an even number of elements, then there is $a \\neq e$ in $G$ such that $a * a = e$.\nFirst by Sylow's first theorem any group whose order is divided by 2 has a 2-group as its subgroup, where 2-group denotes the group whose order is exactly the power of 2.\nSo it suffices to prove that any 2-group contains an element of order 2. Then we can obtain the result we desire.\nLet $K$ be the 2-subgroup of $G$m and $C$ be the center of $K$. we know that the center of a p-group is always nontrivial, thus we can always select an element $x \\in C$ that is not equal to $e$.\nSince the order of $x$ has to divide the order of $K$, thus it must be a power of 2 which is not $1$.\nThen $u = x^{\\text{orderof} x / 2}$ is just an element of order 2, because\n1. $u$ is not equal to $e$ since $\\text{orderof} x / 2$ is less the order of $x$.\n2. $u * u = e$ by some simple simplification and the definition of order.\nFinally combining the observations above we have proven that any group of even order contain an element of order 2.\n-/\n"
  },
  {
    "id": 818,
    "title": "Exercise_2044",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "31. If $*$ is a binary operation on a set $S$, an element $x$ of $S$ is an idempotent for $*$ if $x * x=x$. Prove that a group has exactly one idempotent element. (You may use any theorems proved so far in the text.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n--Let $G$ be a group.\nvariable {G : Type*} [Group G]\n\n--Let $ide= \\{ x$ $|$ $x*x=x \\}$ be a subset of $G$.\ndef ide : Set G := {x | x * x = x}\n\n--Show that $ide=\\{1\\}$.\nexample : ide = ({1} : Set G) := by\n  --Let $x$ be a element of $G$.\n  ext x\n  constructor\n  --Show that for any element $x$ in the group $G$, if $x \\in ide$, then $x=1$.\n  · intro hx\n    --Because if $x \\in ide$, we have $x=x^{-1}*(x*x)=x^{-1}*x=1$.\n    calc\n      x = x⁻¹ * (x * x) := by group\n      _= x⁻¹ * x := by rw [hx]\n      _= 1 := by group\n  · --On the other hand, 1 is obviously in $ide$.\n    intro hx\n    rw [hx]\n    show 1 * 1 = 1\n    group",
    "informalProof": ""
  },
  {
    "id": 821,
    "title": "Example_2047",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "34. Suppose that $G$ is a group and $a, b \\in G$ satisfy $a * b=b * a^{\\prime}$ where as usual, $a^{\\prime}$ is the inverse for $a$. Prove that $b * a=a^{\\prime} * b$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\r\nimport Mathlib.Algebra.Group.MinimalAxioms\r\nimport Mathlib.Algebra.Group.Defs\r\n\r\nexample {G : Type*} [Group G] (a b : G) (h : a * b = b * a⁻¹) : b * a = a⁻¹ * b := by\r\n--It's just a simp calculation b * a = a⁻¹ * a * b * a = a⁻¹ *  b * a⁻¹ * a = a⁻¹ * b\r\n  calc\r\n    _ = a⁻¹ * a * b * a := by\r\n      nth_rw 1 [← one_mul b]\r\n      rw [mul_left_inv a]\r\n    _ = a⁻¹ * b := by\r\n      rw [mul_assoc a⁻¹, h, ←mul_assoc, mul_assoc, mul_left_inv, mul_one]\r\n",
    "informalProof": "Proof\r\nIt's just a simp calculation  \r\n$b * a = a⁻¹ * a * b * a = a⁻¹ *  b * a⁻¹ * a = a⁻¹ * b$"
  },
  {
    "id": 822,
    "title": "Example_2048",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "35. Suppose that $G$ is a group and $a$ and $b$ are elements of $G$ that satisfy $a * b=b * a^{3}$. Then the element $(a * b)^{2}$ can be written in the form $b^{k} a^{r}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "namespace Example2048\n\n/-Suppose that $G$ is a group and $a$ and $b$ are elements of $G$ that satisfy $a * b=b * a^{3}$. Rewrite the element $(a * b)^{2}$ in the form $b^{k} a^{r}$. (See Exercise 33 for power notation.)-/\n\n-- informal answer\n\n/-\nProof:\n1. $ab=ba^3 \\Rightarrow a = b a^3 b^{-1}$\n2. Thus $a^4 = b a^{12} b^{-1}$\n3. Thus $(ab)^2 = abab = ba^3 ab = b a^4 b = b^2 a^{12}$\n-/\n\n-- formal answer\n\nexample [Group G] (a b : G) (h : a * b = b * (a ^ 3)) : ∃ k r : ℕ, (a * b) ^ 2 = b ^ k * a ^ r := by\n  -- $a^4 = b a^12 b^{-1}$\n  have : a ^ 4 = b * (a ^ 12) * b⁻¹ := by\n    -- $ab=ba^3 \\Rightarrow a = b a^3 b^{-1}$\n    apply congrArg (fun x ↦ x * b⁻¹) at h\n    rw [mul_assoc, mul_inv_self, mul_one] at h\n    -- Thus $a^4 = b a^{12} b^{-1}$\n    apply congrArg (fun x ↦ x ^ 4) at h\n    nth_rw 2 [pow_succ, pow_succ, pow_succ] at h\n    rw [pow_one, conj_mul, conj_mul, conj_mul] at h\n    rw [← pow_add a, ← pow_add a, ← pow_add a] at h\n    simp only [Nat.reduceAdd] at h; exact h\n  use 2, 12\n  -- Thus $(ab)^2 = abab = ba^3 ab = b a^4 b = b^2 a^{12}$\n  rw [pow_two]\n  nth_rw 1 [h]\n  rw [mul_assoc, ← mul_assoc (a ^ 3)]\n  nth_rw 2 [← pow_one a]\n  rw [← pow_add]\n  simp only [Nat.reduceAdd]\n  rw [this, mul_assoc, inv_mul_self, mul_one, ← mul_assoc, ← pow_two]\n\nend Example2048",
    "informalProof": "1. $ab=ba^3 \\Rightarrow a = b a^3 b^{-1}$\n2. Thus $a^4 = b a^{12} b^{-1}$\n3. Thus $(ab)^2 = abab = ba^3 ab = b a^4 b = b^2 a^{12}$"
  },
  {
    "id": 823,
    "title": "Exercise_2049",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "36. Let $G$ be a group with a finite number of elements. Show that for any $a \\in G$, there exists an $n \\in \\mathbb{Z}^{+}$such that $a^{n}=e$. See Exercise 33 for the meaning of $a^{n}$. [Hint: Consider $e, a, a^{2}, a^{3}, \\ldots, a^{m}$, where $m$ is the number of elements in $G$, and use the cancellation laws.]",
    "comment": "",
    "suggestion": "",
    "formalProof": "import MIL.Common\n\nvariable {G : Type*} [Group G] [Fintype G]\nexample : ∀ a : G, ∃ n : ℕ, n ≠ 0 ∧ a ^ n = 1 := by\n  --Asserts that $G$ has decidable equality\n  have G_decid : DecidableEq G := Classical.typeDecidableEq G\n  --∀ a ∈ G\n  intro a\n  --There are two cases: $a=1$ and $a ≠ 1$\n  by_cases h : a = 1\n  · --In the case where $a = 1$ , the result is trivially evident.\n    use 1\n    have : a ^ 1 = 1 := by rw [h, one_pow]\n    rw [this]; norm_num\n  ·--In the case where $a ≠ 1$, given that $G$ is a finite group, denote |G|=nG.\n    let nG := Fintype.card G\n    -- Try to proof ∃ p q : ℕ , p ≠ q ∧ a ^ p = a ^ q.\n    have : ∃ p q : ℕ , p ≠ q ∧ a ^ p = a ^ q := by\n      -- Consider the set $S={a^{0}, a^{1}, a^{2}, ⋯, a^{nG}}$.\n      let S := Finset.image (fun i => a ^ i) (List.toFinset (List.range (nG + 1)))\n      --Since all elements of S are drawn from G, we have h1: |S|≤ |G|=nG.\n      have h1 : Finset.card S ≤ nG := by\n        apply Finset.card_le_card\n        exact Finset.subset_univ S\n      --Employing proof by contradiction.\n      by_contra h0\n      push_neg at h0\n      --The hypothesis h0 informs us that (fun i => a ^ i) is an injective function.\n      have h21 : Function.Injective (fun i => a ^ i) := by\n        intro x y hxy\n        by_contra hxy1\n        have hxy : a ^ x = a ^ y := hxy\n        have : _ := h0 x y hxy1\n        rw [hxy] at this\n        absurd this\n        rfl\n      have h22 : (List.range (nG + 1)).toFinset.card = (List.range (nG + 1)).length := by\n        apply List.toFinset_card_of_nodup\n        exact List.nodup_range (nG + 1)\n      --Since the function is injective, we have h2: |S|=(List.range (nG + 1)).length=nG+1.\n      have h2 : Finset.card S = nG + 1 := by\n        rw [Finset.card_image_of_injective (List.toFinset (List.range (nG + 1))) h21, h22]\n        exact List.length_range (nG + 1)\n      --By examining  h_1  and  h_2 , we can derive a contradiction.\n      rw [h2] at h1\n      absurd h1\n      linarith\n    --From the preceding deductions, we can identify  p and  q  that satisfy the given conditions.\n    rcases this with ⟨p, q, hne, hpq⟩\n    --There are two cases: $p > q$ and $q > p$\n    by_cases pq : p > q\n    · --Use p-q. It is evident that p - q > 0 ; the only requirement is to prove that a^(p-q)=1.\n      use p - q\n      constructor\n      · exact Nat.sub_ne_zero_iff_lt.mpr pq\n      · --From hpq : a ^ p = a ^ q, it follows that a^(p-q) = a^p * a^-q = a^q * a^-q = 1.\n        calc\n          _ = a ^ (p) * (a ^ (q))⁻¹ := by\n            apply pow_sub\n            exact Nat.le_of_succ_le pq\n          _ = _ := by simp only [hpq, mul_right_inv]\n    · --when q > p, the conclusion can be similarly obtained.\n      push_neg at pq\n      have qp : q > p := Nat.lt_of_le_of_ne pq hne\n      use q - p\n      constructor\n      · exact Nat.sub_ne_zero_iff_lt.mpr qp\n      · calc\n          _ = a ^ (q) * (a ^ (p))⁻¹ := by\n            apply pow_sub\n            exact Nat.le_of_succ_le qp\n          _ = _ := by simp only [hpq, mul_right_inv]",
    "informalProof": "**Case 1: $a = e$**\n   - If $a = e$, then taking $n = 1$ suffices since $a^n = e^1 = e$.\n\n**Case 2: $a \\neq e$**\n   - Consider the set $S = \\{a^0, a^1, a^2, \\ldots, a^{|G|}\\}$.\n   - By the Pigeonhole Principle, since there are $|G| + 1$ elements in $S$ but only $nG$ distinct elements in $G$, there must exist $p, q$ with $p \\neq q$ such that $a^p = a^q$.\n   - Without loss of generality, assume $p > q$.\n   - Then, $a^p = a^q \\implies a^p \\cdot (a^q)^{-1} = e \\implies a^{p-q} = e$.\n   - Since $p > q$, $p - q$ is a positive integer, satisfying our requirement for $n$.\n"
  },
  {
    "id": 824,
    "title": "Exercise_2050",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "37. Show that if $(a * b)^{2}=a^{2} * b^{2}$ for $a$ and $b$ in a group $G$, then $a * b=b * a$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem comm_of_square_eq (G : Type*) [Group G] (a b : G)\n  (h : (a * b) ^ 2 = a ^ 2 * b ^ 2) : a * b = b * a := by\n  -- 1.compute : $a * b = a⁻¹ * ( a * a * b * b) * b⁻¹ = a⁻¹ * ( a ^ 2 * b ^ 2) * b⁻¹ = a⁻¹ * (a * b)^2  * b⁻¹ = a⁻¹ * ((a * b) * (a * b))  * b⁻¹ = b * a$\n  calc\n    a * b = a⁻¹ * ( a * a * b * b) * b⁻¹ := by group\n    _ = a⁻¹ * ( a ^ 2 * b ^ 2) * b⁻¹ := by group\n    _ = a⁻¹ * (a * b)^2  * b⁻¹ := by rw[ ← h]\n    _ = a⁻¹ * ((a * b) * (a * b))  * b⁻¹ := by rw[← pow_two]\n    _ = b * a := by group",
    "informalProof": "Proof:\n1.compute : $a * b = a⁻¹ * ( a * a * b * b) * b⁻¹ = a⁻¹ * ( a ^ 2 * b ^ 2) * b⁻¹ = a⁻¹ * (a * b)^2  * b⁻¹ = a⁻¹ * ((a * b) * (a * b))  * b⁻¹ = b * a$\n"
  },
  {
    "id": 826,
    "title": "Example_2052",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "39. Let $G$ be a group and suppose that $a * b * c=e$ for $a, b, c \\in G$. Show that $b * c * a=e$ also.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample {G : Type*}[Group G](a b c : G)(h : a * b * c = 1) : b * c * a = 1 := by\n  calc\n    -- We have $a * b * c = 1 \\implies b * c = a ^ {-1}\n    _ = a⁻¹ * a * b * c * a := by\n      rw [mul_left_inv, one_mul]\n    -- \\implies b * c = a ^ {-1} \\implies b * c * a = 1$\n    _ = _ := by\n      simp only [mul_assoc, h, one_mul]\n      simp only [mul_left_inv]\n    -- Done!\n",
    "informalProof": "We have $a * b * c = 1 \\implies b * c = a ^ {-1} \\implies b * c * a = 1$.Done!"
  },
  {
    "id": 833,
    "title": "Example_2096",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "31. Show that $S_{n}$ is a nonabelian group for $n \\geq 3$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import mathlib\n\n-- Open the `Equiv.Perm` namespace to use permutation functions and types directly.\nopen Equiv.Perm\n\n-- Define `SymmGroup` as an abbreviation for the symmetric group of permutations on `Fin n`.\nabbrev SymmGroup (n : ℕ) := Equiv.Perm <| Fin n\n-- Declare a variable `n` representing the size of the set being permuted.\nvariable {n : ℕ}\n\n-- State an example that for any `n ≥ 3`, there exist two elements `a` and `b` in the symmetric group, such that `a * b ≠ b * a`, demonstrating non-commutativity.\nexample :∀ n ≥ 3, ∃ a b : SymmGroup n, a * b ≠ b * a := by\n  -- Introduce `n` and the assumption `n ≥ 3`.\n  intro n hn\n  -- Prove that `1 < n`, `2 < n`, and `0 < n` using the assumption `n ≥ 3`.\n  have use1 : 1 < n ∧ 2 < n ∧ 0 < n:= by\n      constructor\n      -- Prove `1 < n` as a consequence of `n ≥ 3`.\n      · exact Nat.lt_of_succ_lt hn\n      -- Prove `2 < n ∧ 0 < n` using the maximum of two inequalities implied by `n ≥ 3`.\n      · exact Nat.max_lt.mp hn\n  -- Define three elements `f1`, `f2`, and `f3` of `Fin n` using the proven inequalities.\n  let f1 : Fin n := ⟨1, use1.1⟩\n  let f2 : Fin n := ⟨2, use1.2.1⟩\n  let f3 : Fin n := ⟨0, use1.2.2⟩\n  -- Define two permutations `x` and `y` by swapping `f1` with `f2`, and `f2` with `f3`, respectively.\n  let x : SymmGroup n := Equiv.swap f1 f2\n  let y : SymmGroup n := Equiv.swap f2 f3\n  -- Use `x` and `y` as the elements demonstrating non-commutativity.\n  use x, y\n  -- Show that the composition of `x` and `y` is not equal to the composition of `y` and `x`.\n  show (Equiv.swap f1 f2) * (Equiv.swap f2 f3) ≠ (Equiv.swap f2 f3) * (Equiv.swap f1 f2)\n  -- Prove the non-commutativity by showing the action of the compositions on `f3` is different.\n  have : ((Equiv.swap f1 f2) * (Equiv.swap f2 f3)) f3 ≠ ((Equiv.swap f2 f3) * (Equiv.swap f1 f2)) f3 := by\n    -- Simplify the expressions using the definitions of function composition and `Equiv.swap`.\n    simp only [coe_mul, Function.comp_apply, Equiv.swap_apply_right, ne_eq]\n    #check Equiv.swap_apply_of_ne_of_ne (by exact ne_of_beq_false rfl : f3 ≠ f1) (by exact ne_of_beq_false rfl : f3 ≠ f2)\n    -- Use `(Equiv.swap f1 f2) f3 = f3` to rewrite equation.\n    rw[Equiv.swap_apply_of_ne_of_ne (by exact ne_of_beq_false rfl : f3 ≠ f1) (by exact ne_of_beq_false rfl : f3 ≠ f2)]\n    -- Simplify the expression to show that the action on `f3` is different for the two compositions.\n    simp only [Equiv.swap_apply_right]\n    -- Conclude the proof of non-commutativity by showing the inequality.\n    exact ne_of_beq_false rfl\n  -- Apply the proven inequality to conclude the example.\n  exact fun a ↦ this (congrFun (congrArg DFunLike.coe a) f3)",
    "informalProof": "When $n \\ge 3, (1, 2)$, $(2,3)\\in S_n$. But$ (1,2)(2,3)=(1,2,3)\\ne (2,1)=(2,3)(1,2)$, which means $S_n$ is nonabelian."
  },
  {
    "id": 840,
    "title": "Exercise_2130",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "49. Prove that for any integer $n \\geq 3, S_{n}$ has a subgroup isomorphic with $D_{n}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\n49. Prove that for any integer $n \\geq 3, S_{n}$ has a subgroup isomorphic with $D_{2n}$.\n-/\nvariable (n : ℕ) (h : n ≥ 3)\nexample : ∃ (h : Subgroup (Equiv.Perm (Fin n))), Nonempty (DihedralGroup n ≃* h) := by\n  cases' n with n'\n  · simp at h\n  let n := n' + 1\n  --Define a morphism $f$ : $D_{2n}$ $→$ $S_{n}$ , that sends $r$ to the cycle that sends $i$ to $i+1$ for $i < n$ and sends $n$ to 1 and sends $s$ to the element in $S_{n}$ that sends $i$ to $n-i$ for $i ≤ n$. It can be checked that this morphism is well defined.   \n  let f : DihedralGroup n →* Equiv.Perm (Fin n) := {\n    toFun := fun\n      | .r x => .addLeft x\n      | .sr x => .trans (.neg _) (.addLeft (-x))\n    map_one' := by simp [DihedralGroup.one_def]\n    map_mul' := fun x y ↦ by\n      cases x <;> cases y <;> (ext; simp)\n      all_goals congr 1; abel\n  }\n  --We show this mapping is injective. \n  have hf : Function.Injective f := by \n    refine (injective_iff_map_eq_one f).mpr ?_\n    intro a hfa\n    cases' a with a a <;> simp [f, Equiv.ext_iff] at hfa\n    -- If $f(a)=1$, then $a$ can't be written as a power of $r$ that is not equal to one by definition.\n    · subst hfa\n      exact rfl\n    -- If $a$ can be written as form of $sr^i$ for some integer $i < n$, then $i$ is nonzero by definition. It's also clear that in the case $i ≠ 0$, $f(sr^i) = f(s)f(r^i)$ is nonzero by definition.\n    · by_cases ha : a = 0\n      · subst ha\n        specialize hfa 1\n        simp at hfa\n        absurd hfa\n        exact @ZMod.neg_one_ne_one _ ⟨h⟩\n      · specialize hfa 0\n        simp [ha] at hfa\n  --Note that the Image of a morphism of group is also a group, thus $D_{2n}$ is isomorphic to some subgroup of $S_{n}$.  \n  exact ⟨f.range, ⟨MonoidHom.ofInjective hf⟩⟩",
    "informalProof": "Proof:  \n1. Define a morphism $f$ : $D_{2n}$ $→$ $S_{n}$ , that sends $r$ to the cycle that sends $i$ to $i+1$ for $i < n$ and sends $n$ to 1 and sends $s$ to the element in $S_{n}$ that sends $i$ to $n-i$ for $i ≤ n$. It can be checked that this morphism is well defined.     \n2. We show this mapping is injective.     \n3. If $f(a)=1$, then $a$ can't be written as a power of $r$ that is not equal to one by definition.    \n4. If $a$ can be written as form of $sr^i$ for some integer $i < n$, then $i$ is nonzero by definition. It's also clear that in the case $i ≠ 0$, $f(sr^i) = f(s)f(r^i)$ is nonzero by definition.     \n5. Note that the Image of a morphism of group is also a group, thus $D_{2n}$ is isomorphic to some subgroup of $S_{n}$.      "
  },
  {
    "id": 841,
    "title": "Exercise_2133",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "52. Prove that if $G$ is a cyclic group and $|G| \\geq 3$, then $G$ has at least 2 generators.",
    "comment": "题面和证明",
    "suggestion": "",
    "formalProof": "import Mathlib\nset_option linter.unusedVariables false\n\n-- informal answer\n\n/-\nProof:\n1. We show that if $G$ is a cyclic group and $|G| \\geq 3$, then $G$ has at least 2 generators.\n2. Let $g$ be the generator of $G$, $n$ be the cardinality of $G$, so $n$ is also the order of $g$.\n3. We claim that $g$ and $g^{-1}$ are the two different generators of $G$.\n4. If $g=g^{-1}$, then $g^2=1$; that is, $G$ is cyclic of period $2$, contradicting the assumption that the order of $G$ is greater than $2$\n5. For any $x\\in G$, there is some $m$ such that $x= g^m$. Hence, $x= (g^{-1})^{-m}$, so $g^{-1}$ is indeed a generator of $G$.\n-/\n\n-- formal answer\nopen Subgroup QuotientGroup\nvariable {G : Type*} [Group G] [hc : IsCyclic G]\n\n/-We show that if $G$ is a cyclic group and $|G| \\geq 3$, then $G$ has at least 2 generators.-/\ntheorem thm (h : Nat.card G ≥ 3) : ∃ g₁ g₂ : G, g₁ ≠ g₂ ∧ zpowers g₁ = ⊤ ∧ zpowers g₂ = ⊤ := by\n  -- Let $g$ be the generator of $G$.\n  rcases hc.exists_generator with ⟨g, hg⟩\n  -- register `G` as `Fintype`\n  have : Fintype G :=\n    have := Nat.finite_of_card_ne_zero (by linarith [h] : Nat.card G ≠ 0)\n    Fintype.ofFinite G\n  --$n$ be the cardinality of $G$\n  let n := Fintype.card G\n  have hn : n ≥ 3 := by\n    rw [Nat.card_eq_fintype_card] at h\n    exact h\n  --$n$ is also the order of $g$.\n  have horderOfg : orderOf g = Fintype.card G := orderOf_eq_card_of_forall_mem_zpowers hg\n  --We claim that $g$ and $g^{-1}$ are the two different generators of $G$.\n  use g\n  use g⁻¹\n  constructor\n    -- If $g=g^{-1}$, then $g^2=1$; that is, $G$ is cyclic of period $2$, contradicting the assumption that the order of $G$ is greater than $2$\n  · intro he\n    have he : g ^ 2 = 1 :=\n      calc\n        g ^ 2 = g * g := by apply pow_two\n        _ = g⁻¹ * g := by nth_rw 1 [he]\n        _ = 1 := by group\n    rw [← orderOf_dvd_iff_pow_eq_one, horderOfg] at he\n    have he : n ≤ 2 := Nat.le_of_dvd (by norm_num) he\n    rw [Nat.card_eq_fintype_card] at h\n    revert h he\n    omega\n  · constructor\n      -- $g$ is a generator by assumption\n    · exact (eq_top_iff' (zpowers g)).mpr hg\n      --For any $x\\in G$, there is some $m$ such that $x= g^m$. Hence, $x= (g^{-1})^{-m}$, so $g^{-1}$ is indeed a generator of $G$.\n    · rw [eq_top_iff']\n      intro x\n      rcases hg x with ⟨m, hm⟩\n      dsimp at hm\n      use -m\n      dsimp\n      calc\n        _ = g ^ m := by group\n        _ = x := hm\n",
    "informalProof": "Proof:\n1. We show that if $G$ is a cyclic group and $|G| \\geq 3$, then $G$ has at least 2 generators.\n2. Let $g$ be the generator of $G$, $n$ be the cardinality of $G$, so $n$ is also the order of $g$.\n3. We claim that $g$ and $g^{-1}$ are the two different generators of $G$.\n4. If $g=g^{-1}$, then $g^2=1$; that is, $G$ is cyclic of period $2$, contradicting the assumption that the order of $G$ is greater than $2$\n5. For any $x\\in G$, there is some $m$ such that $x= g^m$. Hence, $x= (g^{-1})^{-m}$, so $g^{-1}$ is indeed a generator of $G$."
  },
  {
    "id": 847,
    "title": "Example_2145",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "64. Show that a group with no proper nontrivial subgroups is cyclic.",
    "comment": "剩下的have命题都是涉及rcases、导出矛盾或者是运用在等价命题推到中的，不太清楚还是否能简化",
    "suggestion": "",
    "formalProof": "import mathlib\n\n-- Define a variable G as a type that has a Group structure\nvariable {G : Type*} [Group G]\n\n-- The main example statement: if a group G has no non-trivial proper subgroups, then G is cyclic.\nexample (h : ∀ H : Subgroup G, H = ⊥ ∨ H = ⊤ ) :  ∃ (g : G), ∀ (x : G),  ∃ n : ℤ, x =  g ^ n := by\n  -- First, check if there exists a non-identity element in G\n  by_cases h1 : ∃ g : G, g ≠ 1\n  · -- If there is a non-identity element, name it g₁ and prove that it generates G\n    rcases h1 with ⟨g₁, hg₁⟩\n    -- Assume for contradiction that G is not cyclic\n    by_contra hep\n    push_neg at hep\n    -- Prove that the subgroup generated by g₁ is not the trivial group\n    have h2 : ¬ (Subgroup.zpowers g₁ = ⊥) := by exact Subgroup.zpowers_ne_bot.mpr hg₁\n    -- Since the subgroup generated by g₁ is not trivial, it must be G itself\n    have h3 : Subgroup.zpowers g₁ = ⊤ := by apply (or_iff_right h2).mp  (h (Subgroup.zpowers g₁))\n    -- Use the contradiction assumption to find an element x₁ that supposedly cannot be generated by g₁\n    rcases hep g₁ with ⟨x₁, hx₁⟩\n    -- Show that x₁ cannot be an element of the subgroup generated by g₁, leading to a contradiction\n    have : x₁ ∉ Subgroup.zpowers g₁ := by\n      by_contra heq\n      -- If x₁ is in the subgroup, then it can be written as g₁ raised to some integer power\n      have : ∃ n₁ : ℤ ,  g₁ ^ n₁ = x₁ := by apply Subgroup.mem_zpowers_iff.mp heq\n      rcases this with ⟨n₁, hn₁⟩\n      -- This leads to a contradiction because it would imply x₁ ≠ x₁, which contradicts the assumption\n      have : x₁ ≠ x₁ := by nth_rw 2 [← hn₁]; apply hx₁\n      contradiction \n    -- However, since the subgroup generated by g₁ is G itself, x₁ must be in the subgroup, another contradiction\n    have : x₁ ∈ Subgroup.zpowers g₁ := by rw[h3]; exact trivial\n    contradiction\n  · -- If there is no non-identity element in G, then G is the trivial group, which is cyclic\n    push_neg at h1\n    use 1; intro x; use 0\n    simp only [zpow_zero]\n    -- In this case, every element x must be the identity\n    apply h1 x",
    "informalProof": "1. if $G$ is trivial, then it's obvious.\n2. if $G$ is non-trivial, assume $G$ is not cyclic. Then $\\forall g\\ne 1 \\in G , \\exist x_g, st \\ x_g \\notin <g>$. That means $<g>$ is a nontrivial subgroup, which derive contradiction."
  },
  {
    "id": 854,
    "title": "Example_2171",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "60. Let $G$ be a group and suppose $a \\in G$ generates a cyclic subgroup of order 2 and is the unique such element. Show that $a x=x a$ for all $x \\in G$. [Hint: Consider $\\left(x a x^{-1}\\right)^{2}$.]",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] (S : Subgroup G ) (h2 : ∃! a : G , orderOf a = 2) : ∀ x : G, h2.choose * x = x * h2.choose := by\n  rw [ExistsUnique] at h2\n  rcases h2 with ⟨a1, ha⟩\n  --Because order a = 2, a^2 =1\n  have h : a1^2 =1 :=by\n    rw [← ha.1]\n    exact pow_orderOf_eq_one a1\n  intro x \n  --Proof that (x * a * x⁻¹)^2 =1\n  have h' : (x * a1 * x⁻¹)^2 =1 :=by\n    rw  [conj_pow, conj_eq_one_iff,h]\n  --we have order(x * a * x⁻¹)≠ 1\n  have h'' : orderOf (x * a1 * x⁻¹) ≠ 1 :=by\n    by_contra ha1\n    rw [orderOf_eq_one_iff,← mul_right_inv x,mul_right_cancel_iff,← mul_one x,mul_assoc,mul_left_cancel_iff,one_mul] at ha1\n    rw [← orderOf_eq_one_iff] at ha1\n    rw [ha.1] at ha1\n    simp at ha1\n  --So we have order(x* a * x⁻¹)=2\n  apply orderOf_le_of_pow_eq_one  at h'\n  have h5 : 2 ≤  orderOf (x * a1 * x⁻¹) :=by\n    rw [Nat.two_le_iff]\n    constructor\n    · have t :0 < orderOf (x * a1 * x⁻¹) :=by\n        rw [orderOf_pos_iff,isOfFinOrder_iff_pow_eq_one]\n        use 2\n        simp only [Nat.ofNat_pos, conj_pow, conj_eq_one_iff, true_and,h]\n      exact Nat.not_eq_zero_of_lt t\n    · exact h''\n  · have hh : orderOf (x * a1 * x⁻¹) = 2 :=by\n      exact Eq.symm (Nat.le_antisymm h5 h')\n    have tt : x * a1 * x⁻¹ = a1 :=by\n      apply ha.2 \n      rw [hh]\n    rw [← mul_one a1,← mul_right_inv x,← mul_assoc,← mul_assoc,← mul_assoc,mul_right_cancel_iff,mul_assoc,mul_right_inv,mul_one ] at tt\n    --we have unique a, such that order a=2,\n    --so x * a * x⁻¹ = a\n    have yy : a1 * x = x * a1 := by\n      rw [tt]\n    have : a1 = h2.choose := h2.unique ha.1 h2.choose_spec.1\n    rw [← this]\n    exact yy\n  --we have a * x = x * a\n  · simp only [Nat.ofNat_pos]",
    "informalProof": "1. Begin by noting that since $a$ generates a cyclic subgroup of order 2, it follows that:  \n\n$$  \n\na^2 = e  \n\n$$  \n\nwhere $e$ is the identity element of the group $G$.  \n\n2. Now, let's analyze $(x a x^{-1})^2$:  \n\n$$  \n\n(x a x^{-1})^2 = x a x^{-1} x a x^{-1} = x a (x^{-1} x) a x^{-1} = x a e a x^{-1} = x a^2 x^{-1} = x e x^{-1} = x x^{-1} = e  \n\n$$  \n\n3. Since $(x a x^{-1})^2 = e$, this implies that the element $x a x^{-1}$ also generates a cyclic subgroup of order 2. In a group, the only elements that can generate a cyclic subgroup of order 2 are those that are either the identity or an involution (an element of order 2), but since $a$ is the unique element of order 2 in $G$, it follows that:  \n\n$$  \n\nx a x^{-1} = e \\quad \\text{or} \\quad x a x^{-1} = a  \n\n$$  \n\n4. Now consider the first case:  \n（1）. If $x a x^{-1} = e$, this implies $x a = a x$, which is what we want.  \nNow consider the second case:  \n（2）. If $x a x^{-1} = a$, then rearranging gives us $x a = a x$.  \n  \nBoth cases lead to the conclusion that $a x = x a$.  \nSince $x$ was an arbitrary element of the group $G$, we conclude that:  \n\n$$  \n\nax = xa \\quad \\text{for all } x \\in G.  \n\n$$  \nThus, we have shown that $a$ commutes with every element $x$ in $G$. Therefore, the proof is complete."
  },
  {
    "id": 857,
    "title": "Example_2177",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "66. Show that $\\mathbb{Z}_{p}$ has no proper nontrivial subgroups if $p$ is a prime number.",
    "comment": "",
    "suggestion": "",
    "formalProof": "section Example_2177\nopen Classical\nvariable (p : ℕ) [Fact p.Prime] (pp : Nat.Prime p)\n\nexample {G : Type} [Group G] [Fintype G] (H : Subgroup G) (hGp:Fintype.card G = p) : H = ⊥ ∨ H = ⊤ :=by\n  --使用拉格朗日定理，得到card H ∣ card G\n  have hHsubG:Fintype.card H ∣ Fintype.card G :=by exact Subgroup.card_subgroup_dvd_card H\n  --由于card G = p ,card H = 1 or p\n  have hHcd:Fintype.card H = 1∨Fintype.card H=p :=by\n    refine (Nat.dvd_prime pp).mp ?_\n    rw[← hGp]\n    apply hHsubG\n  rcases hHcd with hH1|hHp\n  · --card H = 1时，H = ⊥\n    left\n    exact Subgroup.eq_bot_of_card_eq H hH1\n  · --card H = p时，H = ⊤\n    right\n    refine Subgroup.eq_top_of_card_eq H ?inr.h.h\n    simp only [hHp, hGp]\n\nend Example_2177",
    "informalProof": "1、使用拉格朗日定理，得到card H ∣ card G\n2、由于card G = p ,card H = 1 or p\n3、card H = 1时，H = ⊥\n4、card H = p时，H = ⊤"
  },
  {
    "id": 866,
    "title": "Example_2217",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "47. Consider $S_{n}$ for a fixed $n \\geq 2$ and let $\\sigma$ be a fixed odd permutation. Show that every odd permutation in $S_{n}$ is a product of $\\sigma$ and some permutation in $A_{n}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem task1209 (n : ℕ) (σ : Equiv.Perm (Fin n)) (odd : Equiv.Perm.sign σ = -1) : ∀ τ : Equiv.Perm (Fin n), Equiv.Perm.sign τ = -1 → ∃ (π : Equiv.Perm (Fin n)), π ∈ alternatingGroup (Fin n) ∧ τ = σ * π := by\n  intro τ odd'\n  have : Equiv.Perm.sign (σ⁻¹ * τ) = 1 := by\n    rw [Equiv.Perm.sign_mul,Equiv.Perm.sign_inv,odd,odd']\n    norm_num\n  exact ⟨σ⁻¹ * τ,by assumption,by group⟩\n",
    "informalProof": "Using $\\sigma^{-1} \\tau$."
  },
  {
    "id": 867,
    "title": "Exercise_2218",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "48. Show that if $\\sigma$ is a cycle of odd length, then $\\sigma^{2}$ is a cycle.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n#check Equiv.Perm\n--Problem :If $f$ is an odd cycle, then $f^2$ is also a cycle.\nvariable(n:ℕ) (f: Equiv.Perm (Fin n))(cyc: Equiv.Perm.IsCycle f)(oddcyc : Odd (orderOf f))\nexample : Equiv.Perm.IsCycle (f^2) :=by  \n--Use lemma $f^n$ is a cylce if and only if $n$ is coprime with $o(f)$.\n  apply (Equiv.Perm.IsCycle.pow_iff cyc).mpr\n  simp only [Nat.coprime_two_left, Nat.odd_iff_not_even]\n  exact Nat.odd_iff_not_even.mp oddcyc",
    "informalProof": "Problem :If $f$ is an odd cycle, then $f^2$ is also a cycle.\n\nProof \n\nLet $f$ be $(1 2 ... k)$ where $k$ is an odd number. Then we only need to show $f^2$ is also an element of order $k$. This is trivial by $o(f^2)=\\frac {k}{gcd(k,2)}=k$. Q.E.D."
  },
  {
    "id": 883,
    "title": "Example_2267",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "53. Prove that if a finite abelian group has order a power of a prime $p$, then the order of every element in the group is a power of $p$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n--Problem : If a Commgroup G is a p-group(p is a prime), then the order of every elemnt of G is a power of p.\n/-In fact, G is commutative is not necessary, we only use the fact that $\\forall g \\in G$,$o(g)\\mid |G|=p^k$ for some k\n, so $o(g)$ must be a power of $p$. -/  \nexample {G:Type*} [CommGroup G][Fintype G](prime : p.Prime)(order : Fintype.card G=p^n):∀ (g:G),(@Exists ℕ fun k => k ≤ n ∧ orderOf g = p ^ k):=by \n  intro g \n  have dvd : orderOf g ∣ Fintype.card G :=orderOf_dvd_card\n  rw[order] at dvd; rw [propext (Nat.dvd_prime_pow prime)] at dvd\n  exact dvd",
    "informalProof": "Problem : If a Commgroup G is a p-group(p is a prime), then the order of every elemnt of G is a power of p.\n\nProof\nIn fact, G is commutative is not necessary, we only use the fact that $\\forall g \\in G$,$o(g)\\mid |G|=p^k$ for some k\n, so $o(g)$ must be a power of $p$.\n"
  },
  {
    "id": 901,
    "title": "Example_2292",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "30. Let $H$ be a subgroup of a group $G$ such that $g^{-1} h g \\in H$ for all $g \\in G$ and all $h \\in H$. Show that every left coset $g H$ is the same as the right coset $\\mathrm{Hg}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open scoped Pointwise\nopen Function MulOpposite Set\nexample {G : Type*} [Group G] (H: Subgroup G) (prop: ∀ (h: H), ∀ (g: G), g * h * g⁻¹ ∈ H): ∀ (g : G),  g • (H : Set G) = op g • (H : Set G) := by\n  /-\n  **First, prove that $H$ is a normal subgroup**:\n   - By the given condition $\\text{prop}: \\forall (h \\in H), \\forall (g \\in G), g * h * g^{-1} \\in H$, we have that $H$ is closed under conjugation by any element of $G$.\n  -/\n  have: H.Normal := by\n    refine { conj_mem := ?conj_mem }\n    simp only [Subtype.forall] at prop\n    exact prop\n  /-\n  **By the equivalent condition of a normal subgroup**:\n   - For a normal subgroup $H$, the left coset $gH$ is equal to the right coset $Hg$. This is what we needed to prove.\n  -/\n  rw [normal_iff_eq_cosets] at this\n  exact this\n",
    "informalProof": "Proof:\n\n1. **First, prove that $H$ is a normal subgroup**:\n   - By the given condition $\\text{prop}: \\forall (h \\in H), \\forall (g \\in G), g * h * g^{-1} \\in H$, we have that $H$ is closed under conjugation by any element of $G$.\n\n2. **By the equivalent condition of a normal subgroup**:\n   - For a normal subgroup $H$, the left coset $gH$ is equal to the right coset $Hg$. This is what we needed to prove.\n"
  },
  {
    "id": 916,
    "title": "Exercise_2360",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "32. Let $H$ be a normal subgroup of a group $G$, and let $m=(G: H)$. Show that $a^{m} \\in H$ for every $a \\in G$.",
    "comment": "题面与证明",
    "suggestion": "",
    "formalProof": "import Mathlib\nset_option linter.unusedVariables false\n\n-- informal answer\n\n/-\nProof:\n1. Let $H$ be a normal subgroup of a group $G$, and let $m=(G: H)$. Show that $a^{m} \\in H$ for every $a \\in G$.\n2. If $G/H$ is an infinite set, then by definition $[G:H]=0$, so $a^{[G:H]}=1\\in H$\n3. If $G/H$ is finite, then $a^{[G:H]}H=(aH)^{[G:H]}=H$, which is equivalent to $a^{[G:H]}\\in H$.\n-/\n\n-- formal answer\nvariable {G : Type*} [Group G] {H : Subgroup G} [H.Normal]\nopen Subgroup QuotientGroup\n\n/-Let $H$ be a normal subgroup of a group $G$, and let $m=(G: H)$. Show that $a^{m} \\in H$ for every $a \\in G$.-/\ntheorem thm : ∀ a : G, a ^ (H.index) ∈ H := by\n  intro g\n  rw [← eq_one_iff]\n  by_cases h : H.index = 0\n    --If $G/H$ is an infinite set, then by definition $[G:H]=0$, so $a^{[G:H]}=1\\in H$\n  · rw [h]\n    simp\n    --If $G/H$ is finite, then $a^{[G:H]}H=(aH)^{[G:H]}=H$, which is equivalent to $a^{[G:H]}\\in H$.\n  · -- register `G ⧸ H` as Fintype\n    have : Fintype (G ⧸ H) :=\n      have := Nat.finite_of_card_ne_zero h\n      Fintype.ofFinite (G ⧸ H)\n    calc\n      (g ^ H.index : G ⧸ H) = (g : G ⧸ H) ^ H.index := by simp only [mk_zpow]\n      _ = 1 := by rw [index_eq_card, pow_card_eq_one]\n",
    "informalProof": "Proof:\n1. Let $H$ be a normal subgroup of a group $G$, and let $m=(G: H)$. Show that $a^{m} \\in H$ for every $a \\in G$.\n2. If $G/H$ is an infinite set, then by definition $[G:H]=0$, so $a^{[G:H]}=1\\in H$\n3. If $G/H$ is finite, then $a^{[G:H]}H=(aH)^{[G:H]}=H$, which is equivalent to $a^{[G:H]}\\in H$."
  },
  {
    "id": 917,
    "title": "Example_2361",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "33. Show that an intersection of normal subgroups of a group $G$ is again a normal subgroup of $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Sylow\nimport Mathlib.GroupTheory.Perm.Cycle.Concrete\nimport Mathlib.GroupTheory.Perm.Subgroup\nimport Mathlib.GroupTheory.PresentedGroup\n\nimport MIL.Common\n\n-- 为证明任意正规子群的交为正规子群，只需证明两个正规子群的情形即可，如下\n\nexample {G : Type*} [Group G] (M : Subgroup G) [hM: M.Normal] (N : Subgroup G) [hN: N.Normal] :\n(M ⊓ N).Normal := by\n  exact Subgroup.normal_inf_normal M N\n\n-- 由此证毕.",
    "informalProof": "证明:  \n下证任意两个正规子群的交为正规子群.  \n设群$G$具有正规子群$M$和$N$, 即对于任意的$a\\in G$有$aMa^{-1}=M, aNa^{-1}=N$.  \n令$K=M \\cap N$, 现欲证$K$是正规子群, 即证对于任意的$a\\in G$有$aKa^{-1}=K$.  \n① $aKa^{-1}\\subset K$  \n对于任意$y\\in K = M \\cap N$, 由于$M$和$N$正规, 有$aya^{-1}\\in M$, $aya^{-1}\\in N$,  \n从而有$aya^{-1}\\in M \\cap N = K$, 于是$aKa^{-1}\\subset K$.  \n② $K \\subset aKa^{-1}$  \n对于任意$y\\in K = M \\cap N$, 由于$M$和$N$正规, 可知存在$z_1\\in M , z_2 \\in N$, 使得 $a z_1 a^{-1} = a z_2 a^{-1} = y$  \n此时$z_1 = z_2 = a^{-1} y a$, 故$z = z_1 = z_2 \\in K = M \\cap N$, 于是$aKa^{-1}\\subset K$.  \n  \n对于任意个正规子群，可以通过归纳的方式得到，其交仍正规.  \n  \n综合以上, 证毕."
  },
  {
    "id": 929,
    "title": "Example_2396",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "44. Show that if $H$ and $K$ are normal subgroups of a group $G$ such that $H \\cap K=\\{e\\}$, then $h k=k h$ for all $h \\in H$ and $k \\in K$. [Hint: Consider the commutator $h k h^{-1} k^{-1}=\\left(h k h^{-1}\\right) k^{-1}=h\\left(k h^{-1} k^{-1}\\right)$.]",
    "comment": "改好啦 :)",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Sylow\nimport Mathlib.GroupTheory.Perm.Cycle.Concrete\nimport Mathlib.GroupTheory.Perm.Subgroup\nimport Mathlib.GroupTheory.PresentedGroup\nimport MIL.Common\nimport Mathlib.Analysis.SpecialFunctions.Log.Basic\n\nimport Mathlib.RingTheory.Ideal.QuotientOperations\nimport Mathlib.RingTheory.Localization.Basic\nimport Mathlib.RingTheory.DedekindDomain.Ideal\nimport Mathlib.Analysis.Complex.Polynomial\nimport Mathlib.Data.ZMod.Quotient\n\nsection Example_4203B\n\nopen BigOperators\nopen Pointwise\n\nvariable {G : Type*} [Group G](N K : Subgroup G) (nN : N.Normal) (nK : K.Normal) (h1 : (N : Set G) ∩ (K : Set G) = (1 : Set G) ) (h2 : (N : Set G) * (K : Set G) = Set.univ)\n\n/-\nshow that $\\forall n\\in N, k\\in K, n * k=k * n$\nWe only need to show that $n * k * n^{-1} * k^{-1} = 1$.\nNotice that $n * k * n^{-1}\\in K$ hence $n * k * n^{-1} * k^{-1} \\in K$\nWe can prove $n * k * n^{-1} * k^{-1} \\in N$ in the same way.\nSo $n * k * n^{-1} * k^{-1} \\in N\\cap K = \\{1\\}$\n-/\n\n\n-- 2. show that $∀ n ∈ N, k ∈ K, nk=kn$.\ntheorem comm_nk {n k : G} (nin : n ∈ N) (kin : k ∈ K) : n * k = k * n := by\n  -- We only need to show that $n * k * n^{-1} * k^{-1} = 1$.\n  -- Notice that $n * k * n^{-1}\\in K$ hence $n * k * n^{-1} * k^{-1} \\in K$\n  have ll1 : n * k * n⁻¹ * k⁻¹ ∈ K := (Subgroup.mul_mem_cancel_right K ((Subgroup.inv_mem_iff K).mpr kin)).mpr (nK.conj_mem k kin n)\n  -- We can prove $n * k * n^{-1} * k^{-1} \\in N$ in the same way.\n  have ll2 : n * k * n⁻¹ * k⁻¹ ∈ N := by\n    have : k * n⁻¹ * k⁻¹  ∈ N := (nN.conj_mem n⁻¹ ((Subgroup.inv_mem_iff N).mpr nin) k)\n    have := (Subgroup.mul_mem_cancel_right N this).mpr nin\n    rw [← mul_assoc, ← mul_assoc] at this\n    exact this\n  -- So $n * k * n^{-1} * k^{-1} \\in N\\cap K = \\{1\\}$\n  have : n * k * n⁻¹ * k⁻¹ ∈ (N : Set G) ∩ (K : Set G) := by simp [ll1, ll2]\n  simp [h1] at this\n  apply_fun ( · * k * n) at this\n  group at this\n  rw [this]\n",
    "informalProof": "show that $\\forall n\\in N, k\\in K, n * k=k * n$\nWe only need to show that $n * k * n^{-1} * k^{-1} = 1$.\nNotice that $n * k * n^{-1}\\in K$ hence $n * k * n^{-1} * k^{-1} \\in K$\nWe can prove $n * k * n^{-1} * k^{-1} \\in N$ in the same way.\nSo $n * k * n^{-1} * k^{-1} \\in N\\cap K = \\{1\\}$"
  },
  {
    "id": 933,
    "title": "Exercise_3533",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "9. Suppose that $\\operatorname{Fix}(\\alpha)=\\operatorname{Fix}(\\beta)$, where $\\alpha, \\beta \\in S_{n}$. Prove that\n\n$$\n\n\\operatorname{Fix}(\\alpha) \\subseteq \\operatorname{Fix}(\\alpha \\beta) .\n\n$$\n",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport Mathlib.GroupTheory.Perm.Cycle.Concrete\n\nvariable {n : ℕ} (α β : Equiv.Perm <| Fin n) \n\n-- Define the set $\\operatorname{Fix}(α) = {x | α(x) = x}$\ndef Fix : Set (Fin n) := {x | α x = x}\n\n-- Prove that $\\operatorname{Fix}(α) ⊆ \\operatorname{Fix}(α β)$\nexample (h : Fix α = Fix β) : Fix α ⊆ Fix (α * β) := by\n  simp only [Fix, Equiv.Perm.coe_mul, Function.comp_apply, Set.setOf_subset_setOf]\n  -- We have to prove $∀ x < n, α(x) = x → α(β(x)) = x$\n  intro x hx\n  -- From $\\operatorname{Fix}(α) = \\operatorname{Fix}(β)$ and $α(x) = x$, \n  -- we have $α(x) = x → x ∈ \\operatorname{Fix}(α) → x ∈ \\operatorname{Fix}(β) → β(x) = x$\n  have : β x = x := \n    have : x ∈ Fix β := by rw [← h]; exact hx\n    this\n  -- Thus $α(β(x)) = α(x) = x$\n  rw [this, hx]\n",
    "informalProof": "Proof.\n1. Define the set $\\operatorname{Fix}(α) = {x | α(x) = x}$\n2. Prove that $\\operatorname{Fix}(α) ⊆ \\operatorname{Fix}(α β)$\n3. We have to prove $∀ x < n, α(x) = x → α(β(x)) = x$\n4. From $\\operatorname{Fix}(α) = \\operatorname{Fix}(β)$ and $α(x) = x$,   \n    we have $α(x) = x → x ∈ \\operatorname{Fix}(α) → x ∈ \\operatorname{Fix}(β) → β(x) = x$\n5. Thus $α(β(x)) = α(x) = x$\n6. Example: $α = (0 1 2 3 4), β = (0 2 4 1 3)$ in $S_5$.  \n    We have $\\operatorname{Fix}(α)$ = $\\operatorname{Fix}(β)$ and $\\operatorname{Fix}(α)$ = $\\operatorname{Fix}(αβ)$\n7. Example: $α = (0 1 2), β = (0 2 1)$ in $S_3$.  \n    We have $\\operatorname{Fix}(α)$ = $\\operatorname{Fix}(β)$ and $\\operatorname{Fix}(α)$ ≠ $\\operatorname{Fix}(αβ)$,  \n    thus $\\operatorname{Fix}(α)$ is a proper subset of $\\operatorname{Fix}(αβ)$"
  },
  {
    "id": 941,
    "title": "Exercise_3552",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "12. Show that $\\operatorname{Aut}(\\mathbb{Q})$ is a group with only a single element.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example : Nat.card (RingAut ℚ) = 1 := by\n  --In fact, the only element is the identity map.\n  --We prove by showing that any two elements are equal. And that is $\\forall x \\in \\Q, f(x)=x$.\n  have h' : ∀ f g : RingAut ℚ, f = g := by\n    intros f g\n    ext x\n    simp only [eq_ratCast, Rat.cast_eq_id, id_eq]\n  --Thus, the cardinality of $\\operatorname{Aut}(\\mathbb{Q})$ is $1$.\n  refine Nat.card_eq_one_iff_unique.mpr ?_\n  constructor\n  exact { allEq := h' }\n  exact instNonemptyOfInhabited",
    "informalProof": "In fact, the only element is the identity map.  \nBy the definition of homomorphism, we have$f(0)=0$and$f(1)=1$. Then, it's trivial that $\\forall x \\in \\mathbb{Q}, f(x)=x$ by induction.  \nThus, $\\mathrm{Aut}(\\mathbb{Q})$ is a group with only a single element."
  },
  {
    "id": 946,
    "title": "Example_3565",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2. Prove Theorem 20.1c. That is, suppose that $G$ is a group and $g, h \\in G$. Prove that $g x=h$ has a unique solution; likewise, prove that $x g=h$ has a unique solution. (We have written the equations multiplicatively.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "--the former one is the equation x*g=h ,the latter one is the equation g*x=h\nexample {G : Type*} [Group G] (g h : G) : ((∃ x : G, x * g = h) ∧ (∀ x y : G,((x * g = h) ∧  (y * g = h)) → (x = y)))∧ ((∃ x : G, g * x = h) ∧ (∀ x y : G,((g * x = h) ∧  (g * y = h)) → (x = y))) := by\n  constructor\n  · constructor\n    · use h * g⁻¹ \n      group\n    · intro x y h0\n      rcases h0 with ⟨h0x,h0y⟩ \n      apply eq_mul_inv_of_mul_eq at h0x\n      apply eq_mul_inv_of_mul_eq at h0y\n      simp only [h0x,h0y]\n  · constructor\n    · use g⁻¹ * h \n      group\n    · intro x y h0\n      rcases h0 with ⟨h0x,h0y⟩ \n      apply eq_inv_mul_of_mul_eq at h0x\n      apply eq_inv_mul_of_mul_eq at h0y\n      simp only [h0x,h0y]",
    "informalProof": ""
  },
  {
    "id": 947,
    "title": "Example_3566",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3. Prove Theorem 20.1d. That is, prove that in a group, every element has exactly one inverse.",
    "comment": "",
    "suggestion": "",
    "formalProof": "-- We prove that in a group, every element has exactly one inverse.\nexample {G : Type*} [Group G] {g : G} : ∃! (h : G), g * h = 1 ∧ h * g = 1 := by\n  -- To prove that the inverse is unique, we first prove that it exists.\n  use g⁻¹\n  constructor\n  · constructor\n    group\n  · -- And the inverse can only be g⁻¹.\n    intro k hk\n    rw [← mul_one k, ← mul_inv_self g, ← mul_assoc, hk.2, one_mul]\n",
    "informalProof": "-- We prove that in a group, every element has exactly one inverse.\n\n  -- To prove that the inverse is unique, we first prove that it exists.\n  \n  -- And the inverse can only be g⁻¹.\n"
  },
  {
    "id": 951,
    "title": "Example_3570",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "7. Let $G$ be a group, and $a, b, c \\in G$. Prove that the equation $a x c=b$ has a unique solution in $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] (a b c : G) : ∃! x : G, a * x * b = c := by\n  --Firstly, we can find that the solution is exactly x = a⁻¹ * c * b⁻¹.\n  use (a⁻¹ * c * b⁻¹)\n  constructor\n  · group\n  --If there is another solution y, then a * y * b = c can induce that y = x.\n  · intro h1 h2\n    rw [← h2]\n    group",
    "informalProof": " --Firstly, we can find that the solution is exactly x = a⁻¹ * c * b⁻¹.\n  --If there is another solution y, then a * y * b = c can induce that y = x."
  },
  {
    "id": 959,
    "title": "Example_3585",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "22. Suppose that $G$ and $H$ are groups with operations $\\circ$ and $*$ and suppose $g, k \\in G$ are inverses; that is, $g \\circ k=e_{G}$. If $\\varphi: G \\rightarrow H$ is a group isomorphism, prove that $\\varphi(g)$ and $\\varphi(k)$ are inverses in $H$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport MIL.Common\n-- Suppose G and H are groups with operations ∘ and ∗ and suppose g, k ∈ G are inverses; that is, g ∘ k = e_G.\n-- If φ: G → H is a group isomorphism, prove that φ(g) and φ(k) are inverses in H.\ntheorem isomorphism_inverses {G H : Type*} [Group G] [Group H] (φ : G →* H) (g k : G) (hgk : g * k = 1) : φ g* φ k = 1 := by\n  -- φ is a group isomorphism, so it preserves the group operation and the identity element.\n  have h1 : φ (g * k)  = φ g * φ k  := φ.map_mul g k\n  -- Applying φ to both sides of the equation g * k = 1.\n  have h2 : φ 1 = 1 := φ.map_one\n  -- Since g * k = 1 in G, we get φ(g * k) = φ(1) in H.\n  rw [hgk] at h1\n  rw [h2] at h1\n  -- Thus, φ(g) * φ(k) = 1 in H.\n  rw [h1]",
    "informalProof": "φ is a group isomorphism, so it preserves the group operation and the identity element.\nApplying φ to both sides of the equation g * k = 1.\nSince g * k = 1 in G, we get φ(g * k) = φ(1) in H.\nThus, φ(g) * φ(k) = 1 in H."
  },
  {
    "id": 968,
    "title": "Exercise_3599",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "g. Explain why the order of $g^{-1}$ is the same as $g$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] (a : G) : orderOf a = orderOf (a⁻¹) := by\n--we suppose that the order of a is m, and the order of $a^{-1}$ is n.\n--It suffice to show that $m|n$ and $n|m$.\n  have h0:orderOf a ∣ orderOf a⁻¹:=by\n    apply orderOf_dvd_of_pow_eq_one\n--For the first part, we can just exchange the power of $a^{-1}$, and then prove the proposition.\n    calc\n      _=(a⁻¹)⁻¹^orderOf a⁻¹:=by rw[DivisionMonoid.inv_inv a]\n      _=(a⁻¹^orderOf a⁻¹)⁻¹:=by rw[inv_pow a⁻¹ (orderOf a⁻¹)]\n      _=1⁻¹:=by rw[pow_orderOf_eq_one a⁻¹]\n      _=1:=by rw[inv_one]\n  have h1:orderOf a⁻¹ ∣ orderOf a:=by\n    apply orderOf_dvd_of_pow_eq_one\n--The proof of the second part is similar to the first.\n    calc\n      _=(a^orderOf a)⁻¹:=by rw[inv_pow a (orderOf a)]\n      _=1⁻¹:=by rw[pow_orderOf_eq_one a]\n      _=_:=by rw[inv_one]\n  apply Nat.dvd_antisymm h0 h1",
    "informalProof": "Proof:\n\n1. we suppose that the order of a is m, and the order of $a^{-1}$ is n. It suffice to show that $m|n$ and $n|m$.\n\n2. For the first part, we can just exchange the power of $a^{-1}$, and then prove the proposition.\n\n3. The proof of the second part is similar to the first."
  },
  {
    "id": 969,
    "title": "Exercise_3604",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. A finite group cannot be isomorphic to a proper subgroup of itself.",
    "comment": "",
    "suggestion": "",
    "formalProof": "--先证明在有限群条件下是不可能成立的\nopen Classical\nexample {G : Type} [Fintype G][Group G] (H : Subgroup G)(h1:H < ⊤) : (G ≃* H) → False:=by \n  intro f\n  --同构会导致G和H的阶数相同\n  have jp1:Fintype.card G= Fintype.card H:=by\n    refine Fintype.card_congr ?f\n    exact f.toEquiv\n --导致G=H ，与真子群条件矛盾\n  have jp2: H = ⊤ := by\n      refine (Subgroup.card_eq_iff_eq_top H).mp ?_\n      simp[jp1]\n  have jp3: H≠ ⊤:=by\n      exact LT.lt.ne_top h1\n  exact jp3 jp2    \n",
    "informalProof": "--先证明在有限群条件下是不可能成立的\n --同构会导致G和H的阶数相同\n--导致G=H ，与真子群条件矛盾\n--证明Z同构于2*Z\n--将x 映射到2*x\n--将2*x 映射到x\n--左逆条件成立\n--右逆条件成立\n--满足加法结合律\n--证明是真子群\n--明显1是Z中元素，不是2*Z中的元素"
  },
  {
    "id": 970,
    "title": "Exercise_3605",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "$\\mathrm{m}$. Let $R$ be a finite ring, and consider its additive group and its group of units. Could these two groups be isomorphic?",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Classical\n--首先他们当然是不同构的\nexample {R : Type}[Fintype R][Ring R](h1:Nontrivial R):(Multiplicative R ≃* Rˣ) → False:=by\n  intro jp1\n  --如果成立，那么环的加法群和可逆元群是同构的\n  have jp2 :Nat.card (Multiplicative R)=Nat.card (Rˣ) :=by\n    refine Nat.card_congr ?f\n    exact jp1.toEquiv\n  --但很显然有限环条件下这是不可能的\n  have jp4:   ¬Fintype.card (R) =Fintype.card (Rˣ) :=by\n    refine Nat.ne_of_lt' ?_\n    refine card_units_lt R\n  --整理条件导出条件\n  have jp5: Fintype.card (R) =Fintype.card (Rˣ):=by\n    refine Fintype.card_eq.mpr ?_\n    exact Finite.card_eq.mp jp2\n  exact jp4 jp5",
    "informalProof": "--首先他们当然是不同构的\n --如果成立，那么环的加法群和可逆元群是同构的\n--但很显然有限环条件下这是不可能的\n--整理条件导出矛盾"
  },
  {
    "id": 971,
    "title": "Exercise_3607",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2. Prove that every subgroup of a cyclic group is cyclic.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Algebra.EuclideanDomain.Defs\nimport Mathlib.Algebra.Group.Subgroup.Basic\nimport Mathlib.Tactic\nimport Mathlib.Algebra.Group.MinimalAxioms\nimport Mathlib.Tactic\nimport Mathlib.Algebra.Group.MinimalAxioms\nimport Mathlib.Logic.Function.Basic\n\n#check Nat.lt.isWellOrder\n#check  instWellFoundedLTNat\n#check Int.toNat\n\n\nopen Classical\n-- class EuclideanDomain(R : Type u) extends CommRing , Nontrivial :ℤ\n--#synth IntCast Nat\nexample {G : Type*} [Group G] {H: Subgroup G} (h: IsCyclic G): IsCyclic H := by\n--Firstly, we suppose that $g $ is the generator of G.\n  rcases h with ⟨g , hg⟩\n--We can find the element with the smallest power, which is denoted by $g^n$.\n  by_cases h_triv : ∀ h : H, h = 1\n  · use 1\n    intro h\n    use 1\n    rw [←  h_triv h]\n    group\n\n  · push_neg at h_triv\n    obtain ⟨h, h_nontriv⟩ := h_triv\n    have hn : ∃ n > 0, g ^ n ∈ H := by\n      obtain ⟨n, nh⟩ :=  hg h\n      by_cases sign :  0  ≤  n\n      · use n.toNat\n        have : g ^n = g ^ (n.toNat) := by\n          rw [← (Int.toNat_of_nonneg sign)]\n          exact zpow_natCast g n.toNat\n        rw [← this]\n        simp only [nh, SetLike.coe_mem]\n        simp only [gt_iff_lt, Int.lt_toNat, CharP.cast_eq_zero, and_true]\n        apply lt_of_le_of_ne sign (id (Ne.symm _))\n        by_contra n_zero\n        apply h_nontriv\n        rw [n_zero] at nh\n        simp at nh\n        exact Subtype.val_inj.mp (Eq.symm nh)\n      · use (-n).toNat\n        simp at sign\n        have :g ^(-n) = g ^ ((-n).toNat):=by\n          have w: 0 ≤ -n := by linarith\n          rw [← (Int.toNat_of_nonneg w)]\n          exact zpow_natCast g (-n).toNat\n        rw [← this]\n        simp only [zpow_neg, inv_mem_iff, nh, SetLike.coe_mem]\n        simp only [gt_iff_lt, Int.lt_toNat, CharP.cast_eq_zero, Left.neg_pos_iff, and_true]\n        exact sign\n    let n := Nat.find hn\n    use ⟨g ^ n, (Nat.find_spec hn).2⟩\n  --Suppose H is a subgroup of G, then the elements of H can be represented by the power of g.\n  --$\\forall h \\in H, h=g^{m}$\n    intro h\n    have t1: ∃m:ℤ , g^m = h:=by\n      exact hg ↑h\n--Since $m=n*[n/m]+b$ ,which is guaranteed by Euclidean division and $b$ is the reminder.\n    rcases t1 with ⟨m,t1m⟩\n    have t11: n*(m/n)+m%n=m:=by\n      --apply EuclideanDomain.div_add_mod m n\n      exact Int.ediv_add_emod m ↑n\n    have v: m%n=0:=by\n      apply of_not_not\n      intro h1\n--Then since $g^{b}=g^m*g^{-n*[n/m]} \\in H$\n      have t':g^(m%n)∈ H:=by\n        have that: m%n=m-n*(m/n):=by\n          exact eq_sub_of_add_eq' t11\n        let a:=m-n*(m/n)\n        let b:=n*(m/n)\n        have :g^(m%n)=g^m/g^(n*(m/n)):=by\n          rw[that]\n          apply eq_div_iff_mul_eq'.mpr\n          rw[ Eq.symm (zpow_add g a b)]\n          have : a+b=m:=by\n            exact Int.sub_add_cancel m (↑n * (m / ↑n))\n          rw[this]\n        rw[this]\n        let ii:=(n:ℤ )\n        have :g^(n*(m/n))=(g^n)^(m/n):=by\n          rw[ zpow_mul g ii (m/n)]\n          simp[ii]\n\n        let hx:g^n∈ H:=by simp[Nat.find_spec hn]\n        let i:g^m∈ H:=by simp[t1m,h.2]\n        let j:g^b∈ H:=by\n          simp[b]\n          rw[this]\n          exact Subgroup.zpow_mem H hx (m / ↑n)\n        exact Subgroup.div_mem H i j\n--and b<n\n      have t'':m%n < n:=by\n        apply Int.emod_lt_of_pos m ?H\n\n        simp[n]\n--then we have b=0 from above because n is the smallest power.\n      have mod_pos : 0 < m % n := by\n        apply lt_of_le_of_ne\n        · apply Int.emod_nonneg\n          simp [n]\n        · symm; assumption\n\n      have : m.natMod n = m % n := by\n        rw [Int.natMod, Int.toNat_of_nonneg]\n        exact mod_pos.le\n\n      have t1: m.natMod n < Nat.find hn:=by\n        zify\n        rw [this]\n        simp [t'']\n\n      have t11:¬(m % n > 0 ∧ g^(m % n) ∈ H):= by\n        rw [← this]\n        simp only [Nat.cast_pos, zpow_natCast]\n        exact Nat.find_min hn t1\n\n      have h1':m%n>0∧ g^(m%n) ∈ H:=by\n        simp[mod_pos,t']\n      exact t11 h1'\n--we have proved that any element of H can be represented by the power of $g^n$. Then $g^n$ is the generator of H, and H is a cyclical group.\n    rw [v] at t11\n    rw[← t11] at t1m\n    have :g^(n*(m/n))=g^(n*(m/n)+0):=by simp\n    have v1:h=(g^n)^(m/n):=by\n      rw[← t1m,← this, zpow_mul]\n      simp\n    use m/n\n    simp\n    apply Subtype.val_inj.mp\n    dsimp\n    rw [v1]",
    "informalProof": "Proof:\n\n1. Firstly, we suppose that $g $ is the generator of G. We can find the element with the smallest power, which is denoted by $g^n$.\n\n2. Suppose H is a subgroup of G, then the elements of H can be represented by the power of g. $\\forall h \\in H, h=g^{m}$.\n\n3. Since $m=n*[n/m]+b$ ,which is guaranteed by Euclidean division and $b$ is the reminder. Then since $g^{b}=g^m*g^{-n*[n/m]} \\in H$and$b<n$. Then we have b=0 from above because n is the smallest power.\n\n4. In conclusion, we have proved that any element of H can be represented by the power of $g^n$. Then $g^n$ is the generator of H, and H is a cyclical group."
  },
  {
    "id": 977,
    "title": "Exercise_3614",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "9. Prove that if $G$ is a finite cyclic group with more than two elements, then $G$ has more than one element whose order equals to $|G|$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] [l: IsCyclic G] [Fintype G] (hG_card : Fintype.card G > 2) : ∃ a b : G, a ≠ b ∧ orderOf a = Fintype.card G ∧ orderOf b = Fintype.card G := by\n  -- We start by finding a generator g of the cyclic group G\n  let ⟨g, hg⟩ := IsCyclic.exists_generator (α := G)\n  -- We use g and its inverse g⁻¹ as our elements a and b\n  use g, g⁻¹\n  -- We need to show that g ≠ g⁻¹, orderOf g = Fintype.card G, and orderOf g⁻¹ = \n  -- Fintype.card G\n  constructor\n  · -- Prove that g ≠ g⁻¹\n    intro h\n    -- If g = g⁻¹, then g^2 = 1\n    have h1: g^2 = 1 := by \n      have: g * g = 1 := by exact mul_eq_one_iff_eq_inv.mpr h\n      rw [← this]\n      exact pow_two g\n    -- This implies that the order of g is 2\n    have h2: orderOf g = 2 := by\n      have: 0 < 2 := by exact Nat.zero_lt_two\n    -- By the definition of the order, we need to prove g^2 = 1 and g^1 ≠ 1.\n      apply (orderOf_eq_iff this).mpr\n      constructor\n      · exact h1\n      · intro m hm1 hm2\n        have h2: m = 1 := by exact Nat.eq_of_le_of_lt_succ hm2 hm1\n        rw [h2]\n        rw [pow_one]\n        intro g1\n        absurd hG_card\n     -- If g = 1, then it contradicts our assumption about the order of G.\n        have h3: orderOf g = Fintype.card G := by exact orderOf_eq_card_of_forall_mem_zpowers hg\n        rw [← h3]\n        have h4: orderOf g = 1 := by exact orderOf_eq_one_iff.mpr g1\n        rw [h4]\n        exact Nat.not_lt.mpr this\n    -- Contradiction: the order of g cannot be both 2 and Fintype.card G\n    absurd hG_card\n    have h5: orderOf g = Fintype.card G := by exact orderOf_eq_card_of_forall_mem_zpowers hg\n    rw [← h5, h2]\n    exact Nat.lt_irrefl 2\n  constructor\n  · -- Prove that orderOf g = Fintype.card G just by the property of cyclic group\n    exact orderOf_eq_card_of_forall_mem_zpowers hg\n  · -- Prove that orderOf g⁻¹ = Fintype.card G by orderOf g = orderOf g⁻¹\n    have h6: orderOf g = orderOf g⁻¹ := by exact Eq.symm (orderOf_inv g)\n    rw [← h6]\n    exact orderOf_eq_card_of_forall_mem_zpowers hg\n",
    "informalProof": "Informal Proof:\nWe need to find two distinct elements in a cyclic group $G$ of finite order greater than 2, both of which have order equal to the cardinality of $G$.\n\n1. Since $G$ is cyclic, there exists a generator $g$ such that every element of $G$ is a power of $g$.\n2. We choose $g$ and its inverse $g^{-1}$ as our elements $a$ and $b$.\n3. We need to show that $g \\neq g^{-1}$, $\\text{orderOf}(g) = \\text{Fintype.card}(G)$, and $\\text{orderOf}(g^{-1}) = \\text{Fintype.card}(G)$.\n4. If $g = g^{-1}$, then $g^2 = 1$, implying that the order of $g$ is 2. This contradicts the assumption that the order of $g$ is $\\text{Fintype.card}(G)$, which is greater than 2.\n5. Therefore, $g \\neq g^{-1}$.\n6. The order of $g$ is $\\text{Fintype.card}(G)$ because $g$ is a generator of $G$.\n7. The order of $g^{-1}$ is also $\\text{Fintype.card}(G)$ because the order of an element and its inverse are the same in a group.\n\nThus, we have found two distinct elements $g$ and $g^{-1}$ in $G$ with order equal to $\\text{Fintype.card}(G)$.\n"
  },
  {
    "id": 980,
    "title": "Exercise_3621",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "If $G$ is a finite group where every non-identity element is a generator of $G$, show that the order of $G$ is prime or $1$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] [Fintype G] (h : ∀ x : G, x ≠ 1 → Subgroup.zpowers x = ⊤) : (Fintype.card G).Prime ∨  Fintype.card G = 1 := by\n  by_cases G_card : Fintype.card G = 1\n  --If $G$ has only one element, then the order of $G$ is $1$.\n  · exact Or.inr G_card\n  --Otherwise, we are to prove that the order of $G$ is prime.\n  · by_contra h'\n    push_neg at h'\n    push_neg at G_card\n    --Because every non-identity element is a generator of $G$, we have $\\forall x \\in G, x \\neq 1, \\operatorname{orderOf}(x)=\\operatorname{card}(G)$.\n    have order_eq : ∀ x : G, x ≠ 1 → orderOf x = Fintype.card G := by\n      intros x hx\n      have h₁ : orderOf x = (Fintype.card (Subgroup.zpowers x)) := by\n        exact Eq.symm Fintype.card_zpowers\n      have h₂ : Fintype.card (Subgroup.zpowers x) = Fintype.card G := by\n        exact (Subgroup.card_eq_iff_eq_top (Subgroup.zpowers x)).mpr (h x hx)\n      rw [h₁, h₂]\n    --Assume that the order of $G$ is not prime. Then we have $\\exists p, p \\neq \\operatorname{card}(G), p \\| \\operatorname{card}(G)$.\n    have composition : ∃ p : ℕ, p.Prime ∧ p ∣ Fintype.card G := by\n      exact Nat.exists_prime_and_dvd G_card\n    rcases composition with ⟨p, hp₁, hp₂⟩\n    --and $p \\neq \\operatorname{card}(G)$.\n    have p_neq : p ≠ Fintype.card G := by\n      by_contra h''\n      have contradiction : (Fintype.card G).Prime := by\n        rw [← h'']\n        exact hp₁\n      exact h'.1 contradiction\n    have card_pos : Fintype.card G > 0 := by\n      exact Fintype.card_pos\n    have p_card : p < Fintype.card G := by\n      have p_card' : p ≤ Fintype.card G := by\n        apply Nat.le_of_dvd card_pos hp₂\n      exact Nat.lt_of_le_of_ne p_card' p_neq\n    have fact_p : Fact (p.Prime) := ⟨hp₁⟩\n    --By Cauchy Theorem, we have $\\exists x \\in G, \\operatorname{orderOf}(x)=p$.\n    have p_order : ∃ x : G, orderOf x = p := by\n      exact exists_prime_orderOf_dvd_card p hp₂\n    rcases p_order with ⟨x, hx⟩\n    have x_order : orderOf x < Fintype.card G := by\n      calc\n        _ = p := by rw [hx]\n        _ < _ := by exact p_card\n    --It's a contradiction that $x$ is not a generator of $G$.\n    have x_order' : orderOf x ≠ Fintype.card G := by\n      exact Nat.ne_of_lt x_order\n    have x_one : x ≠ 1 := by\n      by_contra h''\n      have h''' : orderOf x = 1 := by\n        exact orderOf_eq_one_iff.mpr h''\n      have contradiction : p = 1 := by\n        calc\n          _ = orderOf x := by rw [hx]\n          _ = 1 := by exact h'''\n      have p_one : p ≠ 1 := by\n        exact hp₁.ne_one\n      exact x_order' (order_eq x fun _ => p_one contradiction)\n    --Thus, the order of $G$ is prime.\n    exact x_order' (order_eq x x_one)",
    "informalProof": "If $G$ has only one element, then the order of $G$ is $1$.  \nOtherwise, we are to prove that the order of $G$ is prime. Because every non-identity element is a generator of $G$, we have $\\forall x \\in G, x \\neq 1, \\operatorname{order}(x)=|G|$. Assume that the order of $G$ is not prime. Then we have $\\exists p, p \\neq \\operatorname{card}(G), p \\mid |G|$ and $p \\neq |G|$. By Cauchy Theorem, we have $\\exists x \\in G, \\operatorname{order}(x)=p$. It's a contradiction that $x$ is not a generator of $G$. Thus, the order of $G$ is prime."
  },
  {
    "id": 982,
    "title": "Exercise_3625",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "20. (a) Show that if $G$ is a group and $H_{1}, H_{2}$ are proper subgroups, then it is impossible that $G=H_{1} \\cup H_{2}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Classical\n\nexample {G : Type*} [Group G] (H₁ H₂ : Subgroup G) (p₁ : H₁ ≠ ⊤) (p₂ : H₂ ≠ ⊤): ¬ (H₁.carrier ∪ H₂.carrier = ⊤) := by\n  -- Assume for contradiction that $G = H_1 \\cup H_2$.\n  intro eq_top\n  -- We claim that $H_1 \\subseteq H_2$ or $H_2 \\subseteq H_1$.\n  have : H₁ ≤ H₂ ∨ H₂ ≤ H₁ := by\n    -- Suppose that $H_1 \\not\\subseteq H_2$ and $H_2 \\not\\subseteq H_1$,\n    by_contra no_contain\n    rw [SetLike.le_def, SetLike.le_def] at no_contain\n    push_neg at no_contain\n    -- then there exist $h_1 \\in H_1 \\setminus H_2$ and $h_2 \\in H_2 \\setminus H_1$.\n    rcases no_contain.left with ⟨h₁, h₁H₁, h₁not2⟩\n    rcases no_contain.right with ⟨h₂, h₂H₂, h₂not1⟩\n    -- Since $G = H_1 \\cup H_2$, $h_1 h_2 \\in H_1$ or $h_1 h_2 \\in H_2$.\n    have in1or2 : h₁ * h₂ ∈ H₁.carrier ∪ H₂.carrier := by simp [eq_top]\n    cases' in1or2 with in1 in2\n    -- If $h_1 h_2 \\in H_1$, then $h_2 \\in H_1$ (contradiction),\n    · apply (mul_mem_cancel_left h₁H₁).mp at in1; contradiction\n    -- if $h_1 h_2 \\in H_2$, then $h_1 \\in H_2$ (contradiction).\n    · apply (mul_mem_cancel_right h₂H₂).mp at in2; contradiction\n  cases' this with onein2 twoin1\n  -- Suppose first $H_1 \\subseteq H_2$,\n  · have : H₁.carrier ∪ H₂.carrier = H₂.carrier := Set.union_eq_self_of_subset_left onein2\n    -- then $H_1 \\cup H_2 = H_2$, so $G = H_2$ (contradiction).\n    rw [this] at eq_top; apply Subgroup.coe_eq_univ.mp at eq_top; contradiction\n  -- Otherwise, if $H_2 \\subseteq H_1$,\n  · have : H₁.carrier ∪ H₂.carrier = H₁.carrier := Set.union_eq_self_of_subset_right twoin1\n    -- we have $H_1 \\cup H_2 = H_1$, so $G = H_1$ (contradiction).\n    rw [this] at eq_top; apply Subgroup.coe_eq_univ.mp at eq_top; contradiction",
    "informalProof": "Theorem: If $H_1$ and $H_2$ are proper subgroups of $G$, then $G \\ne H_1 \\cup H_2$.\nProof:\n1. Assume for contradiction that $G = H_1 \\cup H_2$. We claim that $H_1 \\subseteq H_2$ or $H_2 \\subseteq H_1$.\n2. Suppose that $H_1 \\not\\subseteq H_2$ and $H_2 \\not\\subseteq H_1$, then there exist $h_1 \\in H_1 \\setminus H_2$ and $h_2 \\in H_2 \\setminus H_1$.\n3. Since $G = H_1 \\cup H_2$, $h_1 h_2 \\in H_1$ or $h_1 h_2 \\in H_2$.\n4. If $h_1 h_2 \\in H_1$, then $h_2 \\in H_1$ (contradiction), if $h_1 h_2 \\in H_2$, then $h_1 \\in H_2$ (contradiction), hence we proved the claim.\n5. Suppose first $H_1 \\subseteq H_2$, then $H_1 \\cup H_2 = H_2$, so $G = H_2$ (contradiction).\n6. Otherwise, if $H_2 \\subseteq H_1$, we have $H_1 \\cup H_2 = H_1$, so $G = H_1$ (contradiction)."
  },
  {
    "id": 992,
    "title": "Exercise_3647",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "8. Suppose that $G$ is a group for which every element has order a power $p^{n}$ of a fixed prime $p$. (We call such a group a $p$-group; we will discover much more about them in Section 28.1). Let $\\varphi: G \\rightarrow H$ be a surjective homomorphism. Prove that $H$ is a $p$-group too.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-$H$ is a $p$-group because the order of $f(g)$ in $H$ divides the order of $g$ in G. So every element has order a power $p^{n}$ of the same prime $p$.-/\nexample {G H : Type*} {p : ℕ} [Group G] [Group H] (_ : p.Prime) (gp : IsPGroup p G) (f : G →* H) (sf : Function.Surjective f) : IsPGroup p H := by \n  exact IsPGroup.of_surjective gp f sf",
    "informalProof": "1. $H$ is a $p$-group because the order of $f(g)$ in $H$ divides the order of $g$ in $G$. So every element has order a power $p^{n}$ of the same prime $p$.\n2. Suppose $H$ is not a $p$-group, we take the trival homomorphism $f : G \\to H, g \\mapsto 1$. So the proposition does not hold when $f$ is not surjective."
  },
  {
    "id": 1007,
    "title": "Exercise_3682",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "d. If $H$ is a subgroup of $G$ and two cosets of $H$ share an element, then these two cosets are equal.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Coset\nopen Function MulOpposite Set\nopen scoped Pointwise\n\nvariable {G : Type*} [Group G]\nvariable (H : Subgroup G)\nvariable [Mul G]\n\ntheorem coset_intersection_implies_equality (a b : G) : (a • (H : Set G)) ∩ (b • (H : Set G)) ≠ ∅ →  \n QuotientGroup.mk (s := H) a = QuotientGroup.mk (s := H) b  := by\n  -- Assume the intersection is non-empty.\n  intro h0\n  have h1: ∃ x : G, x ∈ (a • (H : Set G)) ∩ (b • (H : Set G)) := by\n    refine inter_nonempty.mp ?_\n    exact nonempty_iff_ne_empty.mpr h0\n  -- Find an element x in the intersection.\n  rcases h1 with ⟨x, hx⟩\n  have h2: x ∈ (a • (H : Set G)) := by exact mem_of_mem_inter_left hx\n  -- x is in aH.\n  apply (mem_leftCoset_iff a).mp at h2\n  have h3: x ∈ (b • (H : Set G)) := by exact mem_of_mem_inter_right hx\n  -- x is in bH.\n  apply (mem_leftCoset_iff b).mp at h3\n  -- a⁻¹ * x ∈ H and b⁻¹ * x ∈ H.\n  simp only [smul_eq_mul, SetLike.mem_coe] at h2 h3\n  have h22 := QuotientGroup.eq.2 h2 \n  have h33 := QuotientGroup.eq.2 h3 \n  -- a⁻¹ * b ∈ H and b⁻¹ * a ∈ H, we have aH = bH.\n  exact h22.trans h33.symm\n",
    "informalProof": "Informal Proof:\nWe need to show that if the cosets $aH$ and $bH$ intersect, then $a$ and $b$ are in the same coset.\n\n1. Assume the intersection of $aH$ and $bH$ is non-empty.\n2. There exists an element $x$ in both $aH$ and $bH$.\n3. Since $x$ is in $aH$, we have $a⁻¹ * x ∈ H$.\n4. Since $x$ is in $bH$, we have $b⁻¹ * x ∈ H$.\n5. From $a⁻¹ * x ∈ H$, we get $a⁻¹ * x * x⁻¹ ∈ H$, which simplifies to $a⁻¹ * b ∈ H$.\n6. From $b⁻¹ * x ∈ H$, we get $b⁻¹ * x * x⁻¹ ∈ H$, which simplifies to $b⁻¹ * a ∈ H$.\n7. Since $a⁻¹ * b ∈ H$ and $b⁻¹ * a ∈ H$, we have $aH = bH$.\n\nThus, if the cosets $aH$ and $bH$ intersect, then $a$ and $b$ are in the same coset."
  },
  {
    "id": 1010,
    "title": "Exercise_3685",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "g. Suppose that $G$ is an infinite group, and $H$ is a subgroup of $G$ with finitely many elements. Then there are infinitly many distinct cosets of $H$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {G : Type*} [Group G]\nvariable (H : Subgroup G)\nvariable (hH : Finite H)\nvariable (hG : Infinite G)\ntheorem infinite_cosets : Infinite (G ⧸ H) := by\n  -- We need to show that the set of cosets G ⧸ H is infinite.\n  refine { not_finite := ?not_finite }\n  simp only [not_finite_iff_infinite]\n  -- Assume for contradiction that G ⧸ H is finite.\n  by_contra h0\n  -- This will imply that G is finite,which contradicts our assumption that G is infinite.\n  absurd hG\n  simp only [not_infinite_iff_finite]\n  simp only [not_infinite_iff_finite] at h0\n  -- We use the fact that there is a bijection between G and (G ⧸ H) × H.\n  have h3: G ≃ (G ⧸ H) × H := Subgroup.groupEquivQuotientProdSubgroup\n  -- This bijection implies that the cardinality of $$ G $$ is equal to the cardinality of \n  -- (G ⧸ H) × H .\n  have h4: Nat.card G = (Nat.card ((G ⧸ H) ×  H)) := by exact Nat.card_congr h3\n  -- The cardinality of the product (G ⧸ H) × H is the product of the cardinalities of \n  -- G ⧸ H  and H.\n  have h5: Nat.card ((G ⧸ H) ×  H) =  Nat.card (G ⧸ H) * Nat.card H := Nat.card_prod (G ⧸ H) ↥H\n  -- Since G ⧸ H is assumed to be finite, its cardinality is non-zero.\n  have h6: Nat.card (G ⧸ H) ≠ 0 := by \n    refine Nat.card_ne_zero.mpr ?_\n    constructor\n    · exact instNonemptyOfInhabited\n    · exact h0\n  -- Similarly, since H is finite, its cardinality is non-zero.\n  have h7: Nat.card H ≠ 0 := by\n    refine Nat.card_ne_zero.mpr ?_\n    constructor\n    · exact One.instNonempty\n    · exact hH\n  -- Therefore, the cardinality of (G ⧸ H) × H is non-zero.\n  have h8: Nat.card ((G ⧸ H) × ↥H) ≠ 0 := by\n    rw [h5]\n    exact Nat.mul_ne_zero h6 h7\n  -- This implies that the cardinality of G is non-zero, which contradicts the assumption \n  -- that G is infinite.\n  rw [← h4] at h8\n  exact Nat.finite_of_card_ne_zero h8",
    "informalProof": "Informal Proof:\nWe need to show that the set of cosets $G ⧸ H$ is infinite given that $G$ is infinite and $H$ is a finite subgroup of $G$.\n\n1. Assume for contradiction that $G ⧸ H$ is finite.\n2. This assumption implies that $G$ is finite, which contradicts our initial assumption that $G$ is infinite.\n3. We use the fact that there is a bijection between $G$ and $(G ⧸ H) × H$.\n4. This bijection implies that the cardinality of $G$ is equal to the cardinality of $(G ⧸ H) × H$.\n5. The cardinality of the product $(G ⧸ H) × H$ is the product of the cardinalities of $G ⧸ H$ and $H$.\n6. Since $G ⧸ H$ is assumed to be finite, its cardinality is non-zero.\n7. Similarly, since $H$ is finite, its cardinality is non-zero.\n8. Therefore, the cardinality of $(G ⧸ H) × H$ is non-zero.\n9. This implies that the cardinality of $G$ is non-zero, which contradicts the assumption that $G$ is infinite.\n\nThus, the set of cosets $G ⧸ H$ must be infinite."
  },
  {
    "id": 1014,
    "title": "Exercise_3695",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "9. Let $G$ be a group of order $p^{2}$, where $p$ is prime. Show that every proper subgroup of $G$ is cyclic.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type*} [Group G] [Fintype G] (p : ℕ) (hp : Prime p) (h : Fintype.card G = p ^ 2) : ∀ H : Subgroup G, H < ⊤ → IsCyclic H := by\n  intro H h'\n  have H_Fintype : Fintype H := by\n    exact Fintype.ofFinite ↥H\n  have fact : Fact (Nat.Prime p) := by\n      refine { out := ?out }\n      exact Prime.nat_prime hp\n  have prime : Nat.Prime p := by\n    exact fact.out\n  by_cases H_one : H = ⊥\n  --If $H$ is the trivial subgroup, then $H$ is cyclic.\n  · rw [H_one]\n    exact Bot.isCyclic\n  --Otherwise, we are to prove that $H$ is cyclic.\n  · push_neg at H_one\n    --By Lagrange Theorem, we have $|H| \\mid p^2$.\n    have order_p : Fintype.card H ∣ p ^ 2 := by\n      rw [← h]\n      exact Subgroup.card_subgroup_dvd_card H\n    --Because $p$ is prime, we have $|H|=1, p$ or $p^2$.\n    have card_eq_p : Fintype.card H = p := by\n      have h₁ : Fintype.card H > 1 := by\n        exact (Subgroup.one_lt_card_iff_ne_bot H).mpr H_one\n      --And $H$ is a proper subgroup of $G$, so $|H| \\neq p^2$.\n      have h₂ : Fintype.card H ≠ p ^ 2 := by\n        rw [← h]\n        contrapose! h'\n        have contra_eq : H = ⊤ := by\n          exact Subgroup.eq_top_of_card_eq H h'\n        exact not_lt_top_iff.mpr contra_eq\n      --And $H$ is not a trivial subgroup, so $|H| \\neq 1$.\n      have h₃ : Fintype.card H ≠ 1 := by\n        exact Ne.symm (Nat.ne_of_lt h₁)\n      have p_pow : ∃ k ≤ 2, Fintype.card H = p ^ k:= by\n        exact (Nat.dvd_prime_pow prime).mp order_p\n      rcases p_pow with ⟨k, hk₁, hk₂⟩\n      have k_eq : k ≤ 1 := by\n        by_contra h''\n        push_neg at h''\n        have : k = 2 := by\n          exact Nat.le_antisymm hk₁ h''\n        rw [this] at hk₂\n        exact h₂ hk₂\n      have k_eq' : k ≥ 1 := by\n        by_contra h''\n        push_neg at h''\n        have : k = 0 := by\n          exact Nat.lt_one_iff.mp h''\n        rw [this] at hk₂\n        exact h₃ hk₂\n      --So $|H|=p$.\n      have k_eq'' : k = 1 := by\n        exact Eq.symm (Nat.le_antisymm k_eq' k_eq)\n      rw [k_eq'', pow_one] at hk₂\n      exact hk₂\n    --Because every group of a prime order is cyclic, $H$ is cyclic.\n    exact isCyclic_of_prime_card card_eq_p",
    "informalProof": "If $H$ is the trivial subgroup, then $H$ is cyclic.  \nOtherwise, we are to prove that $H$ is cyclic. By Lagrange Theorem, we have $|H| \\mid p^2$. Because $p$ is prime, we have $|H|=1, p$ or $p^2$. And $H$ is a proper subgroup of $G$, so $|H| \\neq p^2$. $H$ is not a trivial subgroup, so $|H| \\neq 1$. So $|H|=p$. Because every group of a prime order is cyclic, $H$ is cyclic."
  },
  {
    "id": 1033,
    "title": "Exercise_3951",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "10. In the proof of Lemma 38.1 we needed to show that $x^{3}-2$ has only one real root; we did this using algebra. Prove this result using calculus.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem real_root_unique : ∃! x : ℝ, x^3 = 2 := by\n  -- Let $x = 2^{1/3}$, and first prove $x^3 = 2$.\n  let x : ℝ := 2 ^ (3⁻¹ : ℝ)\n  have h : x ^ 3 = 2 := by\n    calc\n    _ = ((2 : ℝ) ^ (3⁻¹ : ℝ)) ^ 3 := rfl\n    _ = ((2 : ℝ) ^ (3⁻¹ : ℝ)) * ((2 : ℝ) ^ (3⁻¹ : ℝ)) * ((2 : ℝ) ^ (3⁻¹ : ℝ)) := by\n      exact pow_three' (2 ^ 3⁻¹)\n    _ = (2 : ℝ) ^ (3⁻¹ + 3⁻¹ : ℝ) * ((2 : ℝ) ^ (3⁻¹ : ℝ)) := by\n      congr 1\n      refine Eq.symm (Real.rpow_add' (by norm_num) (by norm_num))\n    _ = (2 : ℝ) ^ (3⁻¹ + 3⁻¹ + 3⁻¹ : ℝ) := by\n      refine Eq.symm (Real.rpow_add' (by norm_num) (by norm_num))\n    _ = (2 : ℝ) ^ (1 : ℝ) := by\n      congr 1\n      norm_num\n    _ = 2 := by\n      exact Real.rpow_one 2\n  use x\n  constructor\n  -- Existence: $x$ satisfies the condition.\n  · exact h\n  -- Uniqueness: Assume there exists another $y$ such that $y^3 = 2$.\n  · rintro y hy\n    rw [← h] at hy\n    -- Since $x^3 = y^3$, we have $0 = (y - x) \\cdot ((2y + x)^2 + 3x^2)$. From this, we get $y = x$ or $(2y + x)^2 + 3x^2 = 0$.\n    have : 0 = (y - x) * ((2 * y + x) ^ 2 + 3 * x ^ 2) := by\n      ring_nf\n      rw [← sub_mul, hy, sub_self, zero_mul]\n    simp only [zero_eq_mul] at this\n    rcases this with (h1 | h2)\n    · exact sub_eq_zero.mp h1\n    -- If $(2y + x)^2 + 3x^2 = 0$\n    · have h2 : (2 * y + x) ^ 2 ≥ 0 := by exact sq_nonneg (2 * y + x)\n    -- we know that $(2y + x)^2 \\geq 0$, $3x^2 \\geq 0$,\n      have h3 : x ^ 2 ≥ 0 := by exact sq_nonneg x\n    -- so $x^2 = 0$,\n      have h4 : x ^ 2 = 0 := by linarith [h2, h3]\n    -- which contradicts $x^3 = 2$.\n      have h5 : x = 0 := by exact pow_eq_zero h4\n      have h6 : x ^ 3 = 0 := by rw [h5, zero_pow (by norm_num)]\n      rw [h6] at h\n      apply False.elim\n      exact two_ne_zero h.symm",
    "informalProof": "Proof:\n1. Let $x = 2^{1/3}$, and first prove $x^3 = 2$.\n2. **Existence**: $x$ satisfies the condition.\n3. **Uniqueness**: Assume there exists another $y$ such that $y^3 = 2$. Since $x^3 = y^3$, we have $0 = (y - x) \\cdot ((2y + x)^2 + 3x^2)$. From this, we get $y = x$ or $(2y + x)^2 + 3x^2 = 0$.\n4. If $(2y + x)^2 + 3x^2 = 0$, we know that $(2y + x)^2 \\geq 0$, $3x^2 \\geq 0$, so $x^2 = 0$, which contradicts $x^3 = 2$.\n"
  },
  {
    "id": 1082,
    "title": "Exercise_4236",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.23 Show that an $r$-cycle is an even permutation if and only if $r$ is odd.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Equiv\nvariable {α : Type*} [Fintype α] [DecidableEq α]\nvariable (r : ℕ)\n\nexample [DecidableEq α]  {σ : Perm α} (h1 : σ.IsCycle) (h2 : σ.support.card = r) : Equiv.Perm.sign σ = 1 ↔ Odd (r) := by\n--When the $\\sigma$ is a cycle, its card is equal to the length of the cycle\n  rw [← Perm.sum_cycleType σ] at h2\n  have : Multiset.card σ.cycleType = 1 := by\n    rw [Perm.card_cycleType_eq_one]\n    exact h1\n--We use the fact that the sign of a permutation is $(-1)^{r+t}$, where $r$ is the number of cycles and $t$ is the total cycle length in the permutation.\n  rw [Perm.sign_of_cycleType,h2, this]\n--So we only need to say $(-1)^{r+1} = 1$ iff $r$ is odd.It is trivial in math but in lean we should convert their type to the same.\n  constructor\n  · intro h\n    rw [npow_add] at h\n    simp only [pow_one, mul_neg, mul_one] at h\n    rw [←Units.eq_iff] at h\n    by_contra re\n    rw [← Nat.even_iff_not_odd] at re\n    rw [Even.neg_one_pow re] at h\n    tauto\n\n  · intro h\n    rw [npow_add]\n    simp only [pow_one, mul_neg, mul_one]\n    rw [←Units.eq_iff]\n    rw [Odd.neg_one_pow h]\n    exact rfl\n",
    "informalProof": "When the $\\sigma$ is a cycle, its card is equal to the length of the cycle.We use the fact that the sign of a permutation is $(-1)^{r+t}$, where $r$ is the number of cycles and $t$ is the total cycle length in the permutation.So we only need to say $(-1)^{r+1} = 1$ iff $r$ is odd.It is trivial in math but in lean we should convert their type to the same."
  },
  {
    "id": 1087,
    "title": "Exercise_4241",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.28 (i) Prove, for all $i$, that $\\alpha \\in S_{n}$ moves $i$ if and only if $\\alpha^{-1}$ moves $i$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem Task598 {u : Type*} (α : Equiv.Perm u) (i : u) : α i ≠ i ↔ α⁻¹ i ≠ i := by\n  -- Use the fact that α⁻¹ i = j ↔ α j = i\n  have (β : Equiv.Perm u) : β i = i → β⁻¹ i = i := by\n    intro h\n    let k := congrArg (λ x => β⁻¹ x) h\n    dsimp only at k\n    rw [Equiv.Perm.inv_apply_self β i] at k\n    exact Eq.symm k\n  constructor\n  · have := this α⁻¹\n    exact fun a a_1 => a (this a_1)\n  · have := this α\n    exact fun a a_1 => a (this a_1)",
    "informalProof": "By bijective of $\\alpha$, $\\alpha i = i \\iff i = \\alpha^{-1} i$\n\nTrivial calculation."
  },
  {
    "id": 1089,
    "title": "Exercise_4243",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.30 Give an example of $\\alpha, \\beta, \\gamma \\in S_{5}$, none of which is the identity (1), with $\\alpha \\beta=\\beta \\alpha$ and $\\alpha \\gamma=\\gamma \\alpha$, but with $\\beta \\gamma \\neq \\gamma \\beta$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "\ntheorem Task599 : ∃ α β γ : Equiv.Perm (Fin 5), α ≠ 1 ∧ β ≠ 1 ∧ γ ≠ 1 ∧ α * β = β * α ∧ α * γ = γ * α ∧ β * γ ≠ γ * β := by\n  -- Define alpha := (0,1) beta := (2,3) gamma := (3,4)\n  #check Equiv.swap\n  let α : Equiv.Perm (Fin 5) := Equiv.swap 0 1\n  let β : Equiv.Perm (Fin 5) := Equiv.swap 2 3\n  let γ : Equiv.Perm (Fin 5) := Equiv.swap 3 4\n  -- use α,β,γ\n  exact ⟨α,β,γ, by decide⟩",
    "informalProof": "$\\alpha := (0,1) \\beta := (2,3) \\gamma := (3,4)$\n"
  },
  {
    "id": 1094,
    "title": "Exercise_4248",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.35 Let $G$ be a group and let $a \\in G$ have order $p k$ for some prime $p$, where $k \\geq 1$. Prove that if there is $x \\in G$ with $x^{p}=a$, then the order of $x$ is $p^{2} k$, and hence $x$ has larger order than $a$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n#check orderOf\n#check orderOf_pow_dvd\n#check orderOf_dvd_of_pow_eq_one\n#check dvd_antisymm'\n#check IsOfFinOrder\n#check dvd_of_mul_left_dvd\n\nexample {G : Type*} [Group G] (a : G) (x : G) (k : ℕ) [Fact p.Prime] (h₀ : k ≥ 1) (h :orderOf a = p * k) (hp: x ^ p = a ):\n orderOf x = (p ^ 2) * k := by\n  set o_x := orderOf x\n  have : (x ^ (p * p * k)) = 1 := by\n   calc\n    _ = (x ^ p) ^ (p * k) := by group\n    _ = a ^ (p * k) := by rw [hp]\n    _ = 1 := by rw [← h,pow_orderOf_eq_one]\n  apply dvd_antisymm'\n-- 1. show that $p^2 k | o_x$ which follows from order of $a$ equals $pk$.\n  · rw [pow_two, mul_assoc]\n    have h₁ : orderOf a = o_x / gcd o_x p := by\n      rw [← hp]\n      apply IsOfFinOrder.orderOf_pow\n      apply isOfFinOrder_iff_pow_eq_one.2\n      use p * p * k\n      simp [NeZero.ne p]\n      exact ⟨h₀, this⟩\n    have h₂ : p * k = o_x / gcd o_x p := by rw [← h, h₁]\n    have h₃ :  (p * k) * (gcd o_x p) = o_x := by\n      rw [h₂]\n      exact (Nat.dvd_iff_div_mul_eq o_x (gcd o_x p)).mp (gcd_dvd_left o_x p)\n    rw [← h₃, mul_comm]\n    apply mul_dvd_mul_left\n    have h₄ : p ∣ o_x := by \n      rw [← h₃, Nat.mul_assoc]\n      apply dvd_mul_right p (k * gcd o_x p)\n    have h₅ : p ∣ p := by\n      exact Nat.dvd_refl p\n    exact dvd_gcd h₄ h₅\n -- 2. show that $o_x | p^2 k$, which follows from $x ^ {p^2 k} = 1$\n  · apply orderOf_dvd_of_pow_eq_one\n    rw [← this, Nat.pow_two]\n",
    "informalProof": "--informal answer\n\n/-\nLet $o_x$ denote the order of $x$. We want to show $o_x = p^2 k$ by the antisymmetry of divisibility\n1. show that $p^2 k | o_x$ which follows from order of $a$ equals $pk$.\n2. show that $o_x | p^2 k$, which follows from $x ^ {p^2 k} = 1$\n-/"
  },
  {
    "id": 1103,
    "title": "Exercise_4257",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.44 Prove that every element in a dihedral group $D_{2 n}$ has a unique factorization of the form $a^{i} b^{j}$, where $0 \\leq i<n$ and $j=0$ or 1 .",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen BigOperators\nopen Set\nopen Finset\n--First we prove a lemma that any DiheralGroup element can be written as $r^i$ or $sr^i$.\nlemma ss (g : DihedralGroup n) : ∃ (t : ZMod n) , g = (DihedralGroup.r t) ∨  g = (DihedralGroup.sr t) := by\n  cases g with\n  | r t => exact ⟨t,Or.inl rfl⟩\n  | sr t => exact ⟨t,Or.inr rfl⟩\n\nexample (n : ℕ) [NeZero n] [DecidableEq (DihedralGroup n)] (g : DihedralGroup n) : ∃! (i : ℕ) , ∃! (j  : ℕ) , i < n ∧ j ≤ 1 ∧ g = ((DihedralGroup.r 1) ^ i) * ((DihedralGroup.sr 0) ^ j) := by\n--Using the lemma proved above, we can prove the main theorem.\n  have h := ss g\n  rcases h with ⟨ t ,ht | ht⟩\n--In the first case, we have $g = r^t*s^0$ and $t,0$ is unique.\n  · have : t.val < n := by\n      exact ZMod.val_lt t\n    simp only [DihedralGroup.r_one_pow]\n    use t.val\n    constructor\n    · simp only [ZMod.natCast_val, ZMod.cast_id', id_eq]\n      use 0\n      constructor\n      · refine and_rotate.mp ?h.left.a\n        simp\n        exact ⟨ht,this⟩\n--As the uniquelity of $t$, we can cases the index of $r$, which can only be $0$ or $1$.\n      · simp only [and_imp]\n        intro h _ h0 g0\n        rw [ht] at g0\n        simp only [self_eq_mul_right] at g0\n        have : h=0 ∨ h=1 := by\n          exact Nat.le_one_iff_eq_zero_or_eq_one.mp h0\n        by_cases h1: h=0\n        · exact h1\n        · have : h=1 := by\n            tauto\n          rw [this] at g0\n          simp only [pow_one] at g0\n          tauto\n--As the uniquelity of $0$, we can also calculate the two different cases.\n    · simp only\n      intro m hm\n      rcases hm with ⟨m1,⟨⟨hm,hm1,hg⟩,_⟩⟩\n      rw [ht] at hg\n      by_cases h1: m1=0\n      · rw [h1] at hg\n        simp only [pow_zero, mul_one, DihedralGroup.r.injEq] at hg\n        have := ZMod.val_natCast_of_lt hm\n        rw [← this]\n        exact congrArg ZMod.val (id (Eq.symm hg))\n      · have : m1=0 ∨ m1=1 := by\n          exact Nat.le_one_iff_eq_zero_or_eq_one.mp hm1\n        have : m1=1 := by\n          tauto\n        rw [this] at hg\n        simp only [pow_one, DihedralGroup.r_mul_sr, zero_sub] at hg\n--In the second case, we have $g = s*r^t$, we need to prove $g=r ^ {n - t} * s$ if $t \\neq 0$ and $g = s$ if $t = 0$.\n--So we need to cases $t=0$ or $t\\neq 0$.\n  · by_cases htt:t.val=0\n    · use 0\n      simp\n      constructor\n--If $t=0$, we use $0$ and to prove the uniquelity.\n      · use 1\n        simp\n        constructor\n        · constructor\n          · exact Fin.size_pos'\n          · rw [ht]\n            simp only [DihedralGroup.sr.injEq]\n            exact (ZMod.val_eq_zero t).mp htt\n--Then we need to prove the uniquelity using the same method as above.\n        · intro h _ hh g0\n          rw [ht] at g0\n          have : h=0 ∨ h=1 := by\n            exact Nat.le_one_iff_eq_zero_or_eq_one.mp hh\n          by_cases h1: h=0\n          · rw [h1] at g0\n            simp only [pow_zero] at g0\n            tauto\n          · tauto\n      · intro m hm\n        rcases hm with ⟨m1,⟨⟨hm,hm1,hg⟩,_⟩⟩\n        rw [ht] at hg\n        have : m1=0 ∨ m1=1 := by\n          exact Nat.le_one_iff_eq_zero_or_eq_one.mp hm1\n        by_cases h1: m1=0\n        · rw [h1] at hg\n          simp only [pow_zero, mul_one, DihedralGroup.sr.injEq] at hg\n        · have : m1=1 := by\n            tauto\n          rw [this] at hg\n          simp only [pow_one, DihedralGroup.r_mul_sr, zero_sub, DihedralGroup.sr.injEq] at hg\n          have := (ZMod.val_eq_zero t).mp htt\n          rw [this] at hg\n          simp only [zero_eq_neg] at hg\n          have := ZMod.val_natCast_of_lt hm\n          rw [← this,hg]\n          exact ZMod.val_zero\n--If $t\\neq 0$, we use $n-t$ and to prove the uniquelity.It is the same as above.\n    · have htt1: 1 ≤ t.val := by\n        exact Nat.one_le_iff_ne_zero.mpr htt\n      use n - t.val\n      simp\n      constructor\n      · use 1\n        simp\n        constructor\n        · constructor\n          · refine Nat.sub_lt ?h.left.left.a htt1\n            exact Fin.size_pos'\n          · rw [ht]\n            simp only [DihedralGroup.sr.injEq]\n            rw [Nat.cast_sub]\n            simp\n            exact ZMod.val_le t\n        · intro m _ hm hg\n          rw [ht] at hg\n          by_cases hmm: m = 0\n          · rw [hmm] at hg\n            simp at hg\n          · have : m = 0 ∨ m = 1 := by\n              exact Nat.le_one_iff_eq_zero_or_eq_one.mp hm\n            have : m = 1 := by  tauto\n            exact this\n      · intro m hm\n        rcases hm with ⟨k,⟨⟨hk,hk1,hg⟩,_⟩⟩\n        have : k = 0 ∨ k = 1 := by\n            exact Nat.le_one_iff_eq_zero_or_eq_one.mp hk1\n        by_cases hkk: k = 0\n        · rw [hkk, ht] at hg\n          simp only [pow_zero, mul_one] at hg\n        · have : k = 1 := by tauto\n          rw [ht, this] at hg\n          simp only [pow_one, DihedralGroup.r_mul_sr, zero_sub, DihedralGroup.sr.injEq] at hg\n          rw [← @neg_eq_iff_eq_neg] at hg\n          have : -t = (n - t) := by\n            rw [ZMod.natCast_self,zero_sub]\n          rw [this] at hg\n          have tt:= congrArg ZMod.val (id (Eq.symm hg))\n          have hm := ZMod.val_natCast_of_lt hk\n          rw [← hm,tt]\n          refine Nat.eq_sub_of_add_eq' ?_\n          have : (↑n - t).val = n - t.val := by\n            simp only [CharP.cast_eq_zero, zero_sub]\n            have non: NeZero t := by\n              rw [neZero_iff]\n              intro h\n              have : t.val = 0 := by\n                exact (ZMod.val_eq_zero t).mpr h\n              tauto\n            exact ZMod.val_neg_of_ne_zero t\n          rw [this]\n          refine Nat.add_sub_of_le ?_\n          exact ZMod.val_le t\n",
    "informalProof": "First we prove a lemma that any DiheralGroup element can be written as $r^i$ or $sr^i$.Using the lemma proved above, we can prove the main theorem.In the first case, we have $g = r^t*s^0$ and $t,0$ is unique.As the uniquelity of $t$, we can cases the index of $r$, which can only be $0$ or $1$.As the uniquelity of $0$, we can also calculate the two different cases.\n\nIn the second case, we have $g = s*r^t$, we need to prove $g=r ^ {n - t} * s$ if $t \\neq 0$ and $g = s$ if $t = 0$.So we need to cases $t=0$ or $t\\neq 0$.If $t=0$, we use $0$ and to prove the uniquelity.Then we need to prove the uniquelity using the same method as above.If $t\\neq 0$, we use $n-t$ and to prove the uniquelity.It is the same as above."
  },
  {
    "id": 1108,
    "title": "Exercise_4262",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.49 If $H$ and $K$ are subgroups of a group $G$ and if $|H|$ and $|K|$ are relatively prime, prove that $H \\cap K=\\{1\\}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example{G : Type u} [Group G] [Fintype G] (H : Subgroup G) (K : Subgroup G) (h : Nat.Coprime (Nat.card H) (Nat.card K)) : H.carrier ∩ K.carrier = {1} := by\n  ext x\n  constructor\n  · intro hx\n--On the one hand, we need to show that $H \\cap K \\subseteq \\{1\\}$.\n    have : ∀ x ∈ H.carrier ∩ K.carrier, x = 1 :=by\n      intro x hx\n      rw [Set.mem_inter_iff] at hx\n--We have the fact that the order of $x$ divides both $|H|$ and $|K|$.\n      rcases hx with ⟨hxH, hxK⟩\n      have hh : orderOf x ∣ Nat.card H := by\n        exact Subgroup.orderOf_dvd_natCard H hxH\n      have hk : orderOf x ∣ Nat.card K := by\n        exact Subgroup.orderOf_dvd_natCard K hxK\n--Since $|H|$ and $|K|$ are coprime, the order of $x$ must be $1$.Therefore, $x = 1$.\n      have h1 : orderOf x ∣ Nat.gcd (Nat.card H) (Nat.card K) := by\n        exact Nat.dvd_gcd hh hk\n      rw [h,orderOf_dvd_iff_pow_eq_one,npow_one] at h1\n      exact h1\n    exact this x hx\n  · intro hx\n--On the other hand, we need to show that $1 \\in H \\cap K$, it is obvious.\n    rw [Set.mem_singleton_iff] at hx\n    rw [hx]\n    exact ⟨H.one_mem, K.one_mem⟩",
    "informalProof": "On the one hand, we need to show that $H \\cap K \\subseteq \\{1\\}$.We have the fact that the order of $x$ divides both $|H|$ and $|K|$.Since $|H|$ and $|K|$ are coprime, the order of $x$ must be $1$.Therefore, $x = 1$.On the other hand, we need to show that $1 \\in H \\cap K$, it is obvious."
  },
  {
    "id": 1110,
    "title": "Exercise_4264",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.51 Let $G$ be a group of order 4. Prove that either $G$ is cyclic or $x^{2}=1$ for every $x \\in G$. Conclude, using Exercise 2.38 on page 143 , that $G$ must be abelian.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n--Prove that if a group has 4 elements, then it is either cyclic or $x^2=1\\forall x\\in G$.And $G$ must be abelian.\nexample {G:Type*}[Group G][Fintype G](h: Fintype.card G=4):((∃(x:G),orderOf x=4) ∨ ∀(x:G), x^2=1)∧(∀(x y:G),x*y=y*x) :=by\n  by_cases h1:∃(x:G),orderOf x=4\n  · constructor\n    · exact Or.intro_left (∀ (x : G), x ^ 2 = 1) h1\n    · intro x y \n      obtain ⟨z,hz⟩:=h1\n      have cyc :=isCyclic_iff_exists_ofOrder_eq_natCard.mpr ⟨z,by simpa only [Nat.card_eq_fintype_card,h]⟩\n      obtain ⟨g,hg⟩:=cyc\n      obtain ⟨m,hx⟩ :=(hg x)\n      obtain ⟨n,hy⟩ :=(hg y)\n      simp only at *\n      rw[←hx,←hy]\n      group\n  · push_neg at h1\n--Use the fact that $o(x)\\ne 4$ to conclude that $x^2=1$.\n    have h2:∀(y:G),y^2=1 :=by \n        intro y \n        have h3:=h1 y\n        have dvd: orderOf y ∣ 2^2 :=by simp only [Nat.reducePow];rw[←h];exact orderOf_dvd_card\n        obtain⟨k,le_two,order⟩:=(Nat.dvd_prime_pow Nat.prime_two).mp (dvd)\n        have ne_two:k≠2 :=by \n          by_contra h\n          simp only [h,Nat.reducePow] at order\n          tauto \n        have either: k=0∨k=1 := Nat.le_one_iff_eq_zero_or_eq_one.mp (Nat.le_of_lt_succ (Nat.lt_of_le_of_ne le_two ne_two )) \n        cases' either with eq_zero eq_one\n        · simp only [eq_zero,pow_zero,orderOf_eq_one_iff] at order\n          rw[order,pow_two,mul_one]\n        · simp only [eq_one,pow_one] at order\n          rw[←order,pow_orderOf_eq_one]\n    constructor\n    · apply Or.inr\n      intro x\n      by_cases hx: x=1\n      · rw[hx,pow_two,mul_one]\n      · simp[← (h2 x ),pow_orderOf_eq_one]        \n    · intro x y\n      have eq1:=h2 x\n      have eq2:=h2 y\n      have eq3:=h2 (x*y)\n      rw [pow_two,←eq1,pow_two,mul_assoc,mul_right_inj,←mul_assoc] at eq3\n      nth_rw 2[←eq3];group\n      rw[←pow_two y,eq2,one_mul]\n",
    "informalProof": "Problem Prove that if a group has 4 elements, then it is either cyclic or $x^2=1\\forall x \\in G$, and G must be abelian.\nProof \nLet G be a group with 4 elements. If there is an  element of order 4, then G is cyclic,which is obviously abelian. If there is no element of order 4, then by $4=2^2$ and $2$ is a prime, we have $\\forall x\\in G, x^2=1$. We need to prove that $\\forall x,y\\in G, x*y=y*x$. Use fact that $x^2=1, y^2=1, (x*y)^2=1$, we can easily conclude that $x*y=y*x$."
  },
  {
    "id": 1112,
    "title": "Exercise_4266",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.53 Let $G$ be a fi nite group, and let $S$ and $T$ be (not necessarily distinct) nonempty subsets. Prove that either $G=S T$ or $|G| \\geq|S|+|T|$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport Mathlib\nimport Mathlib.Algebra.Group.MinimalAxioms\nimport Mathlib.GroupTheory.Sylow\nimport Mathlib.GroupTheory.Perm.Cycle.Concrete\nimport Mathlib.GroupTheory.Perm.Subgroup\nimport Mathlib.GroupTheory.PresentedGroup\n\n--rewrite the proposition\nexample {G : Type*} [Group G] [Fintype G] (H K: Set G)[Fintype K][Fintype H] [Fintype ↑Kᶜ] (h : Fintype.card G < Fintype.card H + Fintype.card K) : ∀ g : G ,∃ h : H  ,∃ k : K , g = h * k  := by\n  intro g\n  by_contra h' \n  let S := {h⁻¹ * g | h ∈ H}\n  have h₀ : Fintype S  := by \n    exact Fintype.ofFinite ↑S\n--prove the |S|=|H| by constructor bijection\n  have h₁ : Fintype.card ↑S = Fintype.card ↑H := by\n    have cor : S ≃ H := {\n      toFun := by \n        intro a \n        use (a * g⁻¹)⁻¹ \n        rcases a.property with ⟨b, bin, eq⟩  \n        rw [← eq]\n        simp\n        exact bin\n      invFun := by\n        intro a\n        use (a.1)⁻¹ * g\n        refine Set.mem_setOf.mpr ?property.a\n        use a\n        constructor\n        · exact Subtype.coe_prop a \n        · exact rfl\n      left_inv := by\n        intro a \n        simp\n      right_inv := by\n        intro x\n        simp\n    }\n    exact Fintype.card_congr cor\n--prove S ⊆ Kᶜ  \n  have h₂ : S ⊆ Kᶜ  := by \n    by_contra t\n    have t₁ : ∃ s ∈  S, ¬ s ∈ Kᶜ := by\n      exact Set.not_subset.mp t\n    rcases t₁ with ⟨s,s1,ss⟩\n    have s2 : s ∈ K := by \n      refine Set.not_mem_compl_iff.mp ?_\n      exact ss\n    have hh : ∃ l ∈ H , l⁻¹ * g = s := by exact s1\n    rcases hh with ⟨l,ll,lll⟩\n    have : ∃ l': H , l' = l := by exact CanLift.prf l ll\n    rcases this with ⟨l',u⟩\n    have f : ∃ (h : H) (k : K) ,g = h * k := by \n      use l'\n      refine SetCoe.exists.mpr ?h.a\n      use s\n      use s2\n      show g = l' * s \n      rw[u]\n      rw[← lll] \n      group\n    exact h' f\n--from h2 we have |S| ≤ |G| -|K|\n  have h₃ : Fintype.card S ≤ Fintype.card G - Fintype.card K := by\n    let M := Kᶜ\n    have t : Fintype.card G - Fintype.card ↑K = Fintype.card ↑Kᶜ := by \n      exact Eq.symm (Fintype.card_compl_set K)\n    have t' : Fintype.card ↑Kᶜ ≥ Fintype.card S := by\n      exact Set.card_le_card h₂\n    exact le_of_le_of_eq t' (id (Eq.symm t))\n  have h₅ : Fintype.card G ≥ Fintype.card K := set_fintype_card_le_univ K\n  rw [h₁] at h₃\n  have hf: Fintype.card H + Fintype.card K ≤ Fintype.card G - Fintype.card K + Fintype.card K := by \n    simp\n    exact h₃\n  rw [Nat.sub_add_cancel h₅] at hf\n  have false : ¬ Fintype.card H + Fintype.card K ≤ Fintype.card G := by \n    push_neg\n    exact h\n  exact false hf\n",
    "informalProof": "if we have ∣G∣≥∣S∣+∣T∣，the proposition has been proved\nso we only to need to prove that if ∣G∣<∣S∣+∣T∣ , then we have G =ST\nfor any  element g in G , the set H := {h⁻¹ * g | h ∈ S}must have  intercourse with T\nthus we finish the proof"
  },
  {
    "id": 1124,
    "title": "Exercise_4279",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.66 If $f: G \\rightarrow H$ is a homomorphism and if $(|G|,|H|)=1$, prove that $f(x)=1$ for all $x \\in G$",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n-- informal proof\n\n/-\nProof:\nSuppose $x\\in G$.\nThen $\\operatorname{ord}(f(x))\\mid\\operatorname{ord}(x)$ and $\\operatorname{ord}(x)\\mid|G|$ implies $\\operatorname{ord}(f(x))\\mid|G|$.\nAlso $\\operatorname{ord}(f(x))\\mid|H|$.\nThen $\\operatorname{ord}(f(x))\\mid\\operatorname{gcd}(|G|,|H|)$.\nThen $f(x)=1$.\n-/\n\n-- formal proof\n\n/-\n(i) If $f: G \\rightarrow H$ is a group homomorphism and $x \\in G$ has order $k$, prove that $f(x) \\in H$ has order $m$, where $m \\mid k$.\n(ii) If $f: G \\rightarrow H$ is a homomorphism and if $(|G|,|H|)=1$, prove that $f(x)=1$ for all $x \\in G$.\n-/\n#check orderOf_map_dvd\nexample {G H : Type*} [Group G] [Group H] (f : G →* H) [Fintype G] [Fintype H] (h : gcd (Fintype.card G) (Fintype.card H) = 1) : ∀ x : G, f x = 1 := by\n  -- Suppose $x\\in G$.\n  intro x\n  -- Then $\\operatorname{ord}(f(x))\\mid\\operatorname{ord}(x)$ and $\\operatorname{ord}(x)\\mid|G|$ implies $\\operatorname{ord}(f(x))\\mid|G|$.\n  have h1: orderOf (f x) ∣ Fintype.card G := dvd_trans (orderOf_map_dvd f x) orderOf_dvd_card\n  -- Also $\\operatorname{ord}(f(x))\\mid|H|$.\n  have h2 : orderOf (f x) ∣ Fintype.card H := orderOf_dvd_card\n  -- Then $\\operatorname{ord}(f(x))\\mid\\operatorname{gcd}(|G|,|H|)$.\n  have := dvd_gcd h1 h2\n  -- Then $f(x)=1$.\n  rewrite [h, Nat.dvd_one, orderOf_eq_one_iff] at this\n  exact this",
    "informalProof": ""
  },
  {
    "id": 1129,
    "title": "Exercise_4285",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.72 Let $G$ be a fi nite group written multiplicatively. Prove that if $|G|$ is odd, then every $x \\in G$ has a unique square root; that is, there exists exactly one $g \\in G$ with $g^{2}=x$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example{G : Type u} [Fintype G] [Group G] (hg : Odd (Fintype.card G)) : ∀ (x : G), ∃! (y : G), y ^ 2 = x := by\n  intro x\n--First we have $x^{Fintype.card G} = 1$, so $x^{Fintype.card G + 1} = x$.\n  have h : ∀ (x : G), x ^ Fintype.card G = 1 := by\n    intro x ; exact pow_card_eq_one\n  have hx : ∀ (x : G), x = x ^ (Fintype.card G + 1) := by\n    intro x ; rw [npow_add, h x,pow_one, one_mul]\n--From the given hypothesis, we know that $Fintype.card G$ is odd, so $Fintype.card G + 1$ is even.So we choose $m = \\frac{Fintype.card G + 1}{2}$, and $x^m$ is the unique element we want.\n  have exen : Even (Fintype.card G + 1) := by\n    rw [Nat.even_add']\n    tauto\n  let m := (Fintype.card G + 1)/2\n  have hm : Fintype.card G + 1 = 2 * m := by\n    exact Eq.symm (Nat.two_mul_div_two_of_even exen)\n  use x ^ m\n  constructor\n--For one thing, we need to show $(x^m)^2 = x$, it is trivial.\n  · show (x ^ m) ^ 2 = x\n    rw [← npow_mul,Nat.div_two_mul_two_of_even exen]\n    exact id (Eq.symm (hx x))\n--For another, we need to show that if $y^2 = x$, then $y = x^m$.\n  · intro y hy\n--It is easy that $y^2 = (x^{m}) ^ 2$\n    have : (x ^ m) ^ 2 = x := by\n      rw [← npow_mul,Nat.div_two_mul_two_of_even exen]\n      exact id (Eq.symm (hx x))\n    rw [← this] at hy\n--Then we get the fact that $y^{2m} = (x^{m})^{2m}$\n    have : (y ^ 2) ^ m = ((x ^ m) ^ 2) ^ m := by rw [hy]\n    have : y ^ (2 * m) = (x ^ m) ^ (2 * m) := by\n      rw [npow_mul, npow_mul]\n      exact this\n--So we have $y = x^m$\n    rw [hm] at hx\n    have hx1 := hx y\n    have hx2 := hx (x ^ m)\n    rw [← hx1,← hx2] at this\n    exact this\n",
    "informalProof": "First we have $x^{Fintype.card G} = 1$, so $x^{Fintype.card G + 1} = x$.From the given hypothesis, we know that $Fintype.card G$ is odd, so $Fintype.card G + 1$ is even.So we choose $m = \\frac{Fintype.card G + 1}{2}$, and $x^m$ is the unique element we want.For one thing, we need to show $(x^m)^2 = x$, it is trivial.For another, we need to show that if $y^2 = x$, then $y = x^m$.It is easy that $y^2 = (x^{m}) ^ 2$.Then we get the fact that $y^{2m} = (x^{m})^{2m}$.So we have $y = x^m$.\n"
  },
  {
    "id": 1141,
    "title": "Exercise_4297",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "prove that $|\\operatorname{Aut}(Z/pZ)|=p-1$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Sylow\nimport Mathlib.GroupTheory.Perm.Cycle.Concrete\nimport Mathlib.GroupTheory.Perm.Subgroup\nimport Mathlib.GroupTheory.PresentedGroup\nimport MIL.Common\nopen Finset\nvariable {p : ℕ} [Fact <| Nat.Prime p]\nexample : Nat.card (AddAut (ZMod p)) = p - 1 := by\n-- define a map from  Zp* to Aut(Zp)\n  let f : (ZMod p)ˣ → (AddAut (ZMod p)) := by\n    intro b\n    exact {\n      toFun := fun x => b * x\n      invFun := fun x => b⁻¹ * x\n      left_inv := Units.inv_mul_cancel_left _\n      right_inv := Units.mul_inv_cancel_left _\n      map_add' := by simp [mul_add]\n    }\n  -- define the inverse map\n  let g : (AddAut (ZMod p)) → (ZMod p)ˣ := fun φ ↦ .mk0 (φ 1) (by simp)\n  -- implies that these two are equivalant\n  have h : (ZMod p)ˣ ≃ (AddAut (ZMod p)) := {\n    toFun := f\n    invFun := g\n    left_inv := by\n      intro x\n      dsimp [f, g]\n      simp\n    right_inv := by\n      intro x\n      dsimp [f, g]\n      ext y\n      simp\n      trans y.val • x 1\n      · simp [mul_comm]\n      · rw [← map_nsmul]\n        simp\n  }\n  -- show that the cardinality of  Aut(Zp) = p-1\n  have :  Nat.card (AddAut (ZMod p)) = Nat.card (ZMod p)ˣ := by\n    exact Nat.card_congr (id h.symm)\n  rw [this]\n  have : Fintype.card (ZMod p)ˣ = p-1 := by\n    exact ZMod.card_units p\n  rw [← this]\n  exact Nat.card_eq_fintype_card\n  \n",
    "informalProof": "-- define a map from  Zp* to Aut(Zp)\n-- define the inverse map\n-- implies that these two are equivalant\n-- show that the cardinality of  Aut(Zp) = p-1"
  },
  {
    "id": 1144,
    "title": "Exercise_4300",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.87 If $G$ is a group and $G / Z(G)$ is cyclic, where $Z(G)$ denotes the center of $G$, prove that $G$ is abelian; that is, $G=Z(G)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "section Exercise_4300\nopen Classical\nvariable {G : Type} [Group G]\n#check Subgroup.center G\n#check Subgroup.mem_center_iff\n#check QuotientGroup.eq_iff_div_mem\n#check QuotientGroup.mk_surjective\n#check div_mul_cancel\n\nexample {G : Type} [Group G] :IsCyclic (G⧸ (Subgroup.center G)) → CommGroup G :=by\n  intro hc\n  rcases hc with ⟨hc⟩\n  --首先得到商群作为循环群的生成元g_cyc_q\n  let g_cyc_q:=choose hc\n  let hg_cyc_q:=choose_spec hc\n  --只需要证明乘法交换律\n  refine CommGroup.mk ?mk.mul_comm\n  intro a b\n  --得到a_q,b_q作为商群元素能够被生成元g_cyc_q的幂次表示\n  let ha_q:=hg_cyc_q (QuotientGroup.mk a)\n  let hb_q:=hg_cyc_q (QuotientGroup.mk b)\n  rcases ha_q with ⟨na,ha_q⟩\n  rcases hb_q with ⟨nb,hb_q⟩\n  --构造g_cyc_q在群中的代表元g_cyc\n  rcases QuotientGroup.mk_surjective g_cyc_q with ⟨g_cyc,hg_cyc⟩\n  --由于a与g_cyc^na有相同的商群元素，可以得到他们的余元素a_co落在群中心内\n  let a_co:=a/(g_cyc^na)\n  let b_co:=b/(g_cyc^nb)\n  have ha:a_co∈(Subgroup.center G):=by\n    apply QuotientGroup.eq_iff_div_mem.mp\n    simp only [QuotientGroup.mk_zpow, hg_cyc, ha_q]\n  have hb:b_co∈(Subgroup.center G):=by\n    apply QuotientGroup.eq_iff_div_mem.mp\n    simp only [QuotientGroup.mk_zpow, hg_cyc, hb_q]\n  --这样得到a=a_co*g_cyc^na的表示，a_co位于中心\n  rw[← div_mul_cancel a (g_cyc^na),← div_mul_cancel b (g_cyc^nb)]\n  --直接计算即可得到交换律\n  calc\n  _ = a_co*(g_cyc^na*b_co)*g_cyc^nb :=by group\n  _ = a_co*(b_co*g_cyc^na)*g_cyc^nb :=by simp only [hb.comm]\n  _ = (a_co*b_co)*g_cyc^nb*g_cyc^na :=by group\n  _ = (b_co*a_co)*g_cyc^nb*g_cyc^na :=by simp only [hb.comm]\n  _ = b_co*(a_co*g_cyc^nb)*g_cyc^na :=by group\n  _ = b_co*(g_cyc^nb*a_co)*g_cyc^na :=by simp only [ha.comm]\n  _ = (b_co*g_cyc^nb)*(a_co*g_cyc^na) :=by group\n\nend Exercise_4300",
    "informalProof": "1、首先得到商群作为循环群的生成元g_cyc_q\n2、只需要证明乘法交换律\n3、得到a_q,b_q作为商群元素能够被生成元g_cyc_q的幂次表示\n4、构造g_cyc_q在群中的代表元g_cyc\n5、由于a与g_cyc^na有相同的商群元素，可以得到他们的余元素a_co落在群中心内\n6、这样得到a=a_co*g_cyc^na的表示，a_co位于中心\n7、直接计算即可得到交换律"
  },
  {
    "id": 1156,
    "title": "Exercise_4765",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(17) Let $n$ be a positive integer. Prove that $[a]$ is a unit in $\\mathbb{Z}_{n}$ if and only if the equation $[a] x=[b]$ has a unique solution for each $[b] \\in \\mathbb{Z}_{n}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "def task866 (n : ℕ) (a : ZMod n) : IsUnit a ↔ ∀ b : ZMod n, ∃! x : ZMod n, a * x = b := by\n  constructor\n  · intro u\n    intro b\n    have : a * a⁻¹ = 1 := ZMod.mul_inv_of_unit a u\n    have : a⁻¹ * a = 1 := ZMod.inv_mul_of_unit a u\n    use a⁻¹ * b -- inverse function of $x \\mapsto a * x$\n    constructor\n    · dsimp only\n      rw [← mul_assoc,ZMod.mul_inv_of_unit,one_mul]\n      exact u\n    · dsimp only\n      intro y e\n      let e := congrArg (λ x => a⁻¹ * x) e\n      dsimp only at e\n      rw [← mul_assoc,ZMod.inv_mul_of_unit,one_mul] at e\n      exact e\n      exact u\n  · intro h\n    -- Finding the inverse of $1$\n    let ⟨inv,e,_⟩ := h 1\n    exact isUnit_of_mul_eq_one a inv e",
    "informalProof": "A left and right inverse ensures bijectivity, while let $b = 1$ we get the inverse of $a$."
  },
  {
    "id": 1181,
    "title": "Exercise_4810",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(12) Let $R$ be a ring, and suppose there exists a positive even integer $n$ such that $x^{n}=x$ for all $x \\in R$. Prove that $-x=x$ for all $x \\in R$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nvariable {R : Type _}[Ring R] [Nontrivial R] {r : R}\nvariable {n : ℕ}[Nn : NeZero n]\nexample (h : ∀ x : R, x ^ (2*n) = x ) : ∀ x : R, x = -x := by\n  intro x\n--We have $x^{2n} = x$ and $x^{2n} = (-x)^{2n}$, so $x = -x$.\n  have h1: x ^ (2*n) = (-x)^ (2*n) := by simp\n  rw [h x,h (-x)] at h1\n  exact h1",
    "informalProof": "--We have $x^{2n} = x$ and $x^{2n} = (-x)^{2n}$, so $x = -x$."
  },
  {
    "id": 1187,
    "title": "Exercise_4816",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(18) Prove that if $R$ is a finite ring that contains at least one nonzero element that is not a zero divisor, then $R$ has identity.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n-- Prove that if R is a finite ring that contains at least one nonzero element\n-- that is not a zero divisor, then R has identity.\n\nexample {R : Type*} [Fintype R] [NonUnitalRing R] (a : R) (i : R)\n(h_notzerodivisor: a * i = a)\n(h_notzerodivisor2: ∀ b : R, a * b = 0 → b = 0)\n(h_notzerodivisor3: ∀ b : R, i * b = 0 → b = 0)\n(h_notzerodivisor4: ∀ b : R, b * i = 0 → b = 0)\n: ∃ id : R, ∀ r : R, id * r = r ∧ r * id = r := by\n  use i  -- \"i\" in h_notzerodivisor is the identity\n  have hcal: a * i * i - a * i = 0 := by\n    exact sub_eq_zero_of_eq (congrFun (congrArg HMul.hMul h_notzerodivisor) i)\n  have h1: i * i = i := by\n    have hcal3: a * (i * i - i) = 0 := by\n      calc\n        _ = a * (i * i) - a * i := by exact mul_sub a (i * i) i\n        _ = a * i * i - a * i := by rw[← mul_assoc]\n        _ = 0 := by rw[hcal]\n    have hcal4: i * i - i = 0 := by\n      exact h_notzerodivisor2 (i * i - i) hcal3\n    calc\n      _ = i * i - i + i := by exact Eq.symm (sub_add_cancel (i * i) i)\n      _ = 0 + i := by rw[hcal4]\n      _ = _ := by rw[zero_add]\n  have h2: (∀ (r : R), i * i * r = i * r) := by\n    exact fun r => congrFun (congrArg HMul.hMul h1) r\n  have h_left_mul: (∀ (r : R), i * r = r) := by\n    have hcal5: (∀ (r : R), i * (i * r - r) = 0) := by\n      intro r\n      calc\n        _ = i * (i * r) - i * r := by exact mul_sub i (i * r) r\n        _ = i * i * r - i * r := by rw[← mul_assoc]\n        _ = _ := by exact sub_eq_zero_of_eq (h2 r)\n    intro r\n    have hcal6: i * r - r = 0 := by exact h_notzerodivisor3 (i * r - r) (hcal5 r)\n    calc\n      _ = i * r - r + r := by exact Eq.symm (sub_add_cancel (i * r) r)\n      _ = 0 + r := by rw[hcal6]\n      _ = _ := by rw[zero_add]\n  have h3: (∀ (r : R), r * i * i = r * i) := by\n    intro r\n    rw [mul_assoc, h1]\n  have h_right_mul: (∀ (r : R), r * i = r) := by\n    have hcal7: (∀ (r : R), (r * i - r) * i = 0) := by\n      intro r\n      calc\n        _ = r * i * i - r * i := by exact sub_mul (r * i) r i\n        _ = _ := by exact sub_eq_zero_of_eq (h3 r)\n    intro r\n    have hcal8: (r * i - r) = 0 := by exact h_notzerodivisor4 (r * i - r) (hcal7 r)\n    calc\n      _ = r * i - r + r := by exact Eq.symm (sub_add_cancel (r * i) r)\n      _ = 0 + r := by rw[hcal8]\n      _ = r := by rw[zero_add]\n  intro r\n  constructor\n  · exact h_left_mul r\n  · exact h_right_mul r\n",
    "informalProof": "instruction中已给出证明思路"
  },
  {
    "id": 1197,
    "title": "Exercise_4835",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(8) The characteristic of a finite ring. Prove that a finite ring $R$ cannot have characteristic zero. (Hint: Begin by showing that for each element $x \\in R$, there must exist some positive integer $k_{x}$ such that $k_{x} x=0_{R}$.) Deduce from this and Exercise 7 that every finite integral domain (and consequently, every finite field) has prime characteristic.",
    "comment": "",
    "suggestion": "",
    "formalProof": "def task1581 {R : Type*} [Fintype R] [NonAssocRing R] (p : ℕ) [CharP R p] : p ≠ 0 := by\n  by_contra c\n  let f : ℤ →+* R := {\n    toFun := λ n => n • 1\n    map_one' := one_zsmul 1\n    map_mul' := by\n      intro x y\n      simp only [zsmul_one, Int.cast_mul]\n    map_zero' := zero_zsmul 1\n    map_add' := by\n      intro x y\n      simp only [zsmul_one, Int.cast_add]\n  }\n  have : CharZero R := (CharP.charP_zero_iff_charZero R).mp (CharP.congr p c)\n  have := RingHom.injective_int f\n  have : Fintype ℤ := Fintype.ofInjective (⇑f) this\n  have : Finite ℤ := Fintype.finite this\n  have : ¬ Infinite ℤ := not_infinite_iff_finite.mpr this\n  have : Infinite ℤ := Int.infinite\n  contradiction\n",
    "informalProof": "Natural inclusion $Z \\to R$ is injective."
  },
  {
    "id": 1276,
    "title": "Exercise_4935",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(2) Let $R$ be a commutative ring, and let $p(x), f(x)$, and $g(x)$ be polynomials in $R[x]$. Prove that if $p(x)$ divides both $f(x)$ and $g(x)$ in $R[x]$, then for any polynomials $u(x)$ and $v(x)$ in $R[x]$, $p(x)$ divides $f(x) u(x)+g(x) v(x)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n--(2) Let $R$ be a commutative ring, and let $p(x), f(x)$, and $g(x)$ be polynomials in $R[x]$. Prove that if $p(x)$ divides both $f(x)$ and $g(x)$ in $R[x]$, then for any polynomials $u(x)$ and $v(x)$ in $R[x]$, $p(x)$ divides $f(x) u(x)+g(x) v(x)$.\nopen Finset Polynomial BigOperators\nexample {R : Type*} [CommRing R] (p f g : R[X]) (pdvd: p ∣  f ∧ p ∣ g) (u v : R[X]): p ∣ f * u + g * v := by \n--Denote $\\frac{f(x)}{p(x)}$ as $s(x)$, and denote $\\frac{g(x)}{p(x)}$as $t(x)$. Thus we have $f(x)=p(x)s(x)$ and $g(x)=p(x)t(x)$.\n  rcases pdvd.1 with ⟨s, hs⟩\n  rcases pdvd.2 with ⟨t, ht⟩ \n--Notice that $f(x)u(x)+g(x)v(x)=p(x)\\cdot(s(x)u(x)+t(x)v(x))$, by applying calculation in polynomial ring, which deduce that $p(x)\\mid f(x) u(x)+g(x) v(x)$\n  use (s * u + t * v)\n  rw [hs, ht]\n  ring  ",
    "informalProof": "(2) Let $R$ be a commutative ring, and let $p(x), f(x)$, and $g(x)$ be polynomials in $R[x]$. Prove that if $p(x)$ divides both $f(x)$ and $g(x)$ in $R[x]$, then for any polynomials $u(x)$ and $v(x)$ in $R[x]$, $p(x)$ divides $f(x) u(x)+g(x) v(x)$.\n\nDenote $\\frac{f(x)}{p(x)}$ as $s(x)$, and denote $\\frac{g(x)}{p(x)}$as $t(x)$. Thus we have $f(x)=p(x)s(x)$ and $g(x)=p(x)t(x)$.Notice that $f(x)u(x)+g(x)v(x)=p(x)\\cdot(s(x)u(x)+t(x)v(x))$, by applying calculation in polynomial ring, which deduce that $p(x)\\mid f(x) u(x)+g(x) v(x)$."
  },
  {
    "id": 1331,
    "title": "Exercise_5701",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(12) For which positive integers is $n$ ! less than $n^{n}$ ? Prove your assertion.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import mathlib\n--We prove that when $n \\ge 2$, we have $n ! < n ^ n$.\ndef fac : ℕ → ℕ\n  | 0 => 1\n  | n + 1 => (n + 1) * fac n\n\nvariable (n : ℕ) (h : n ≥ 2)\nexample  : fac n < n ^ n := by\n--When $n \\ge 2$, we can prove the problem by induction.\n  induction' n with n ih\n  · linarith\n    --It's easy to prove when $n = 2$.\n  · by_cases h' : n ≥ 2\n    --$n \\rightarrow n+1$\n    · unfold fac\n      have h1 : (n + 1) * fac n < (n + 1) * n ^ n := by\n      --We have $n! < n ^ n$ by induction hypothesis\n        apply Nat.mul_lt_mul_of_pos_left\n        · exact ih h'\n        · exact Nat.succ_pos n\n      have h2 : (n + 1) * n ^ n ≤ (n + 1) ^ (n + 1) := by\n      --We can easily prove that $n ^ n < (n + 1) ^ n$.\n        have f1 : (n + 1) ^ (n + 1) = (n + 1) * (n + 1) ^ n := by exact Nat.pow_succ'\n        rw[f1]\n        refine Nat.mul_le_mul ?h₁ ?h₂\n        · rfl\n        · refine Nat.pow_le_pow_of_le_left ?h₂.h n\n          linarith\n      exact lt_of_lt_of_le h1 h2\n    · have h3 : n = 1 := by exact Eq.symm (Nat.eq_of_lt_succ_of_not_lt h h')\n      rw[h3]\n      unfold fac\n      simp\n      unfold fac\n      unfold fac\n      simp only [zero_add, mul_one, Nat.reduceLT]\n      --So that we have\n      --$$(n + 1)! < (n + 1) ^ {(n + 1)}$$\n",
    "informalProof": "We prove that when $n \\ge 2$, we have $n ! < n ^ n$.  \r\nWhen $n = 1$, $1! = 1 ^ 1$.   \r\nWhen $n \\ge 2$, we can prove the problem by induction.  \r\nIt's easy to prove when $n = 2$.  \r\n$n \\rightarrow n+1$  \r\nWe have $n! < n ^ n$ by induction hypothesis\r\nWe can easily prove that $n ^ n < (n + 1) ^ n$.  \r\nSo that we have \r\n$$(n + 1)! < (n + 1) ^ {(n + 1)}$$"
  },
  {
    "id": 1336,
    "title": "Exercise_5707",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. Let $S$ be a set having an operation $*$ which assigns an element $a * b$ of $S$ for any $a, b \\in S$. Let us assume that the following two rules hold:\n\n1. If $a, b$ are any objects in $S$, then $a * b=a$.\n\n2. If $a, b$ are any objects in $S$, then $a * b=b * a$.\n\nShow that $S$ can have at most one object.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nvariable {S : Type*} [Mul S]\n\nexample (h₁: ∀ (a b : S), a * b = a ) (h₂: ∀ (a b : S),a * b = b * a) : Cardinal.mk S ≤ 1 := by\n  by_contra h \n  push_neg at h\n  --Suppose $|S|> 1 .$\n  replace h : ∃ x y, x ≠ y := by \n    rw [← Cardinal.two_le_iff]\n    apply Cardinal.two_le_iff_one_lt.2 h \n  -- Since $|S|\\ge 2 \\iff \\exists x y, x ≠ y.$\n  rcases h with ⟨x, y, hxy⟩\n  absurd hxy \n  rw [← h₁ x y, h₂ x y, h₁ y x]\n  --$But x = xy = yx = y.$",
    "informalProof": "Suppose $|S| > 1.\\\\$\nSince $|S|\\ge 2 \\iff \\exists x y, x ≠ y.\\\\$\n$But x = xy = yx = y.$"
  },
  {
    "id": 1379,
    "title": "Exercise_5750",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "19. Let $S$ be the set of all real numbers, and define $f: S \\rightarrow S$ by $f(s)=$ $s^{2}+a s+b$, where $a, b$ are fixed real numbers. Prove that for no values at $a, b$ can $f$ be onto or 1-1.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n--Let $S$ be the set of all real numbers, and define $f: S \\rightarrow S$ by $f(s)=$ $s^{2}+a s+b$, where $a, b$ are fixed real numbers. \n--Prove that for no values at $a, b$ can $f$ be onto or 1-1.\n\ndef myfun (a b : ℝ ) : ℝ → ℝ := \n  fun s => s ^ 2 + a * s + b \n\n\nexample (a b : ℝ ): ¬ (myfun a b).Injective := by\n  apply Function.not_injective_iff.mpr \n  -- It suffices to show that there are two distinct $a_1, b_1$ such that $f(a)=f(b).$\n  use - a / 2 + 1 ,  - a / 2 - 1\n  -- Let $a_1 = -\\frac{a}{2}+1, b_1 = -\\frac{a}{2}-1.$\n  simp only [myfun]\n  constructor \n  · ring_nf \n  · linarith \n  --Verify that by some calces  \nexample (a b : ℝ ): ¬ (myfun a b).Surjective := by \n  intro h \n  --Suppose that $f$ is surjective.\n  rcases h (b - a ^ 2 / 4 -1) with ⟨x, hx⟩\n  --For $b - \\frac{a^2}{4}-1 \\in \\mathbb{R},$ there exists $x\\in \\mathbb{R} $ such that $f(x)= b - \\frac{a^2}{4}-1$\n  simp [myfun] at hx\n  replace hx : x ^ 2 + a * x + (a ^ 2 / 4) + 1 = 0 := by linarith [hx] \n  -- $f(x)= b - \\frac{a^2}{4}-1 \\iff x^2+ax+\\frac{a^2}{4}+1 = 0.$\n  have contra : x ^ 2 + a * x + (a ^ 2 / 4) + 1 > 0 := by \n    calc \n    _ = (x + a / 2) ^ 2 + 1 := by ring_nf  \n    _ > 0 := by linarith [pow_two_nonneg (x + a /2)]\n  --However, $x^2+ax+\\frac{a^2}{4}+1 = (x + \\frac{a}{2})^2 + 1 > 0.$ Contradiction.\n  linarith\n  ",
    "informalProof": "(1) $f$ is not injective : It suffices to show that there are two distinct $a_1, b_1$ such that $f(a)=f(b).\\\\$\nLet $a_1 = -\\frac{a}{2}+1, b_1 = -\\frac{a}{2}-1.\\\\$\nVerify that by some calces.$\\\\$\n(2) $f$ is not surjective : Suppose that $f$ is surjective.$\\\\$\nFor $b - \\frac{a^2}{4}-1 \\in \\mathbb{R},$ there exists $x\\in \\mathbb{R}$ such that $f(x)= b - \\frac{a^2}{4}-1.\\\\$\n$f(x)= b - \\frac{a^2}{4}-1 \\iff x^2+ax+\\frac{a^2}{4}+1 = 0.\\\\$\nHowever, $x^2+ax+\\frac{a^2}{4}+1 = (x + \\frac{a}{2})^2 + 1 > 0.$ Contradiction.\n"
  },
  {
    "id": 1457,
    "title": "Example_5897",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6. Show that $a \\in Z(G)$ if and only if $C(a)=G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Subgroup\n\n-- We need to prove that a ∈ Z(G) ↔ C(a) = G.\n-- We will use the fact that a ∈ Z(G) ↔ ∀ g ∈ G, g * a = a * g.\n-- We will also use the fact that C(a) = {g ∈ G | g * a = a * g}, so C(a) = G ↔ ∀ g ∈ G, g * a = a * g.\n-- As a result, a ∈ Z(G) ↔ C(a) = G.\nexample {G : Type*} [Group G] (a : G) : a ∈ center G ↔ centralizer {a} = ⊤ := by\n  constructor\n  · intro h\n    simp\n    exact h\n  · intro h\n    simp at h\n    exact h",
    "informalProof": "-- We need to prove that a ∈ Z(G) ↔ C(a) = G.\n\n-- We will use the fact that a ∈ Z(G) ↔ ∀ g ∈ G, g * a = a * g.\n\n-- We will also use the fact that C(a) = {g ∈ G | g * a = a * g}, so C(a) = G ↔ ∀ g ∈ G, g * a = a * g.\n\n-- As a result, a ∈ Z(G) ↔ C(a) = G."
  },
  {
    "id": 1473,
    "title": "Exercise_5920",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "* 29. If $M$ is a subgroup of $G$ such that $x^{-1} M x \\subset M$ for all $x \\in G$, prove that actually $x^{-1} M x=M$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n--Problem : If $M$ is a subgroup s.t. $x^{-1}Mx\\subseteq M,\\forall x\\in G$, then $x^{-1}Mx=M,\\forall x\\in G$.\nopen scoped Pointwise\nopen Function MulOpposite Set\nexample {G:Type*}[Group G](M:Subgroup G)(sub:∀(x:G),op x•(x⁻¹•(M:Set G))⊆(M:Set G)):(∀(x:G),(op x)•(x⁻¹•(M:Set G))=(M:Set G)):=by \n  intro x\n--Get $x^{-1}Mx\\subseteq M$\n  have h1:=sub x\n--Get $xMx^{-1}\\subseteq M$\n  have h2:=sub x⁻¹\n  simp only [op_inv, inv_inv] at h2\n  apply Subset.antisymm\n  · trivial\n  · intro a ha \n--$xMx^{-1}\\subseteq M$, so $x* a*x^{-1}\\in M$, then $(x^{-1}*(x* a*x^{-1})*x)=a\\in x^{-1}Mx$ i.e. $x^{-1}Mx\\subseteq M$.\n    have h3: x*a*x⁻¹∈(M:Set G) :=by \n      apply h2\n      use x*a\n      constructor\n      · use a\n        constructor\n        · exact ha\n        · simp only [smul_eq_mul]\n      · simp only [smul_eq_mul_unop, unop_inv, MulOpposite.unop_op]\n    use a*x⁻¹\n    constructor\n    · use x*a*x⁻¹\n      constructor\n      · exact h3\n      · simp only [smul_eq_mul]; group\n    · simp only [smul_eq_mul_unop, MulOpposite.unop_op, inv_mul_cancel_right]",
    "informalProof": "Problem : If $M$ is a subgroup s.t. $x^{-1}Mx\\subseteq M,\\forall x\\in G$, then $x^{-1}Mx=M,\\forall x\\in G$.\n\nProof\n\nApply the condition at $x$ and $x^{-1}$, we get $xMx^{-1}\\subseteq M$ and $x^{-1}Mx \\subseteq M$.\n$\\forall m \\in M$, $xmx^{-1}\\in xMx^{-1}\\subseteq M$, then we have $m=x^{-1}(xmx^{-1})x\\in x^{-1}Mx$ i.e. $M\\subseteq x^{-1}Mx$.\nWe have $M\\subseteq x^{-1}Mx$ and $x^{-1}Mx\\subseteq M$, so we can conclude that $M=x^{-1}Mx$. Q.E.D."
  },
  {
    "id": 1478,
    "title": "Exercise_5936",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*15. If $p$ is a prime, show that the only solutions of $x^{2} \\equiv 1 \\bmod p$ are $x \\equiv$ $1 \\bmod p$ or $x \\equiv-1 \\bmod p$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example [Fact p.Prime](hp : Nat.Prime p) (x : ℕ) : x ^ 2 ≡ 1 [MOD p] → x - 1 ≡ 0 [MOD p] ∨ x + 1 ≡ 0 [MOD p] := by\n  intro hx\n--First we have some basic facts about $p$ and $x$.\n  have p1 : 1 < p := by\n    exact Nat.Prime.one_lt hp\n  have x0 : x ≠ 0 := by\n    intro h ; rw [h] at hx\n    simp only [ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, zero_pow] at hx\n    have : p ∣ 1 := by\n      exact Nat.dvd_of_mod_eq_zero (id (Nat.ModEq.symm hx))\n    rw [@Nat.dvd_one] at this\n    rw [this] at p1\n    tauto\n  have x1 := Nat.zero_lt_of_ne_zero x0\n--It is obvious that $p$ divides $x^2 - 1$.\n  have h1 : p ∣ x ^ 2 - 1 := by\n    refine (Nat.modEq_iff_dvd' ?h).mp (id (Nat.ModEq.symm hx))\n    exact Nat.one_le_pow 2 x x1\n--Combining the fact that $p$ is a prime number and $p$ divides $x^2 - 1$, we have $p$ divides $x - 1$ or $x + 1$.\n  have eq : x ^ 2 - 1 = (x - 1) * (x + 1) := by\n    rw [Nat.left_distrib,Nat.mul_sub_right_distrib,Nat.pow_two]\n    simp\n    refine Eq.symm (Nat.sub_add_sub_cancel ?hab x1)\n    exact Nat.le_mul_of_pos_left x x1\n  rw [eq] at h1\n  rw [propext (Nat.Prime.dvd_mul hp)] at h1\n--So we have $p \\equiv 0 \\pmod{x - 1}$ or $p \\equiv 0 \\pmod{x + 1}$.\n  rcases h1 with h1|h1\n  · have : x -1 ≡ 0 [MOD p] := by\n      exact Nat.ModEq.symm (Dvd.dvd.zero_modEq_nat h1)\n    tauto\n  · have : x + 1 ≡ 0 [MOD p] := by\n      exact Nat.ModEq.symm (Dvd.dvd.zero_modEq_nat h1)\n    tauto",
    "informalProof": "First we have some basic facts about $p$ and $x$.It is obvious that $p$ divides $x^2 - 1$.Combining the fact that $p$ is a prime number and $p$ divides $x^2 - 1$, we have $p$ divides $x - 1$ or $x + 1$.So we have $p \\equiv 0 \\pmod{x - 1}$ or $p \\equiv 0 \\pmod{x + 1}$."
  },
  {
    "id": 1500,
    "title": "Exercise_5987",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "23. Let $G$ be a group such that all subgroups of $G$ are normal in $G$. If $a, b \\in G$, prove that $b a=a^{j} b$ for some $j$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample (G : Type*) [Group G] (h : ∀ N : Subgroup G, N.Normal) : ∀ a b : G, ∃ j : ℤ, b * a = a ^ j * b := by\n  -- Introduce elements a and b from group G\n  intro a b\n  -- Define the subgroup S, which consists of the integer powers of a\n  let S := Subgroup.zpowers a\n  -- Prove that S is a normal subgroup using the assumption h\n  have h' : S.Normal := by exact (h S)\n  -- Prove that b * a * b⁻¹ belongs to S\n  have h'' : b * a * b⁻¹ ∈ S := by\n    -- Use the properties of normal subgroups to prove this\n    exact (Subgroup.Normal.conj_mem h' a (Subgroup.mem_zpowers a) b)\n  -- Rewrite h'' using the properties of subgroups\n  rw [Subgroup.mem_zpowers_iff] at h''\n  -- Extract the integer k and the related proof hk from h''\n  rcases h'' with ⟨k, hk⟩\n  -- Use integer k as the proof for the existential quantifier\n  use k\n  -- Rewrite the equation using hk\n  rw [hk]\n  -- Use group properties to automatically simplify the equation\n  group\n",
    "informalProof": "Theorem: Let G be a group, and suppose that every subgroup of G is normal. Then for any elements a and b in G, there exists an integer j such that b * a = a^j * b.\n\nProof: Let a and b be arbitrary elements of G. Consider the subgroup S generated by the integer powers of a. By our hypothesis, S is a normal subgroup of G.\n\nNow, consider the element c = b * a * b^(-1). We want to show that c is in S. Since S is normal, for any g in G, the element g * a * g^(-1) is also in S. Applying this with g = b, we see that c is indeed in S.\n\nThis means that c can be written as a^k for some integer k. Therefore, we have b * a * b^(-1) = a^k. Multiplying both sides by b from the left and by b^(-1) from the right, we obtain b * a = a^k * b.\n\nThus, we have found an integer k such that b * a = a^k * b, which completes the proof.\n\nThis proof relies on the properties of normal subgroups and the closure properties of groups. It shows that in a group where every subgroup is normal, the order of multiplication of elements can be rearranged in a specific way, which is a fundamental result in group theory."
  },
  {
    "id": 1516,
    "title": "Exercise_6008",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "44. Prove that a group of order $p^{2}, p$ a prime, has a normal subgroup of order $p$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-Prove that a group of order $p^{2}, p$ a prime, has a normal subgroup of order $p$.-/\nopen Fintype Classical \nexample {G : Type*} {p : ℕ} [Group G] [Fintype G] (pp : p.Prime) (ord : card G = p ^ 2) : ∃ P : Subgroup G, (P.Normal) ∧ (card P = p) := by\n  letI : Fact p.Prime := by exact { out := pp }\n  /-The center of $p$-group is nontrivial, so the order of center is $p^{k},k>0$.-/\n  rcases (IsPGroup.card_center_eq_prime_pow ord Nat.zero_lt_two) with ⟨k, ⟨kpos, cen⟩⟩\n  /-$\\exists x\\in Z(G)$ such that the order of $x$ is $p$, because $p\\mid Z(G)$.-/\n  have hc : p ∣ card (Subgroup.center G) := by \n    rw [cen]\n    exact dvd_pow_self p (Nat.not_eq_zero_of_lt kpos)\n  rcases exists_prime_orderOf_dvd_card p hc with ⟨x, oxp⟩\n  /-We use the subgroup generated by $x$, denoted by $P$.-/\n  use Subgroup.zpowers x.1\n  constructor\n  /-$P$ is normal because $x$ is in the center of $G$.-/\n  · refine { conj_mem := ?h.left.conj_mem }\n    intro n hn g\n    rcases hn with ⟨m, hnm⟩\n    dsimp at hnm\n    have n_in_cen: n ∈ Subgroup.center G := by \n      rw [← hnm]\n      exact Subgroup.zpow_mem (Subgroup.center G) (SetLike.coe_mem x) m\n    rw [(Subgroup.mem_center_iff).mp n_in_cen, mul_assoc, mul_right_inv, mul_one]\n    use m\n  /-$|P|=p$ because $|P|=|<x>|=p$.-/\n  · rw [← oxp, ← orderOf_submonoid x]\n    exact Fintype.card_zpowers",
    "informalProof": "Prove that a group of order $p^{2}, p$ a prime, has a normal subgroup of order $p$.\n\nProof:\n1. The center of $p$-group is nontrivial, so the order of center is $p^{k},k>0$.\n2. $\\exists x\\in Z(G)$ such that the order of $x$ is $p$, because $p\\mid Z(G)$.\n3. We use the subgroup generated by $x$, denoted by $P$.\n4. $P$ is normal because $x$ is in the center of $G$.\n5. $|P|=p$ because $|P|=|<x>|=p$."
  },
  {
    "id": 1519,
    "title": "Exercise_6013",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "49. Let $G$ be a group, $H$ a subgroup of $G$ such that $i_{G}(H)$ is finite. Prove that there is a subgroup $N \\subset H, N \\triangleleft G$ such that $i_{G}(N)$ is finite.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Classical\nexample{G: Type*}[Group G](H :Subgroup G)[Fintype (G ⧸ H)]:∃ K : Subgroup G, K.Normal∧ K.index>0 := by\n\n--我们证明 K是一个正规子群\n--K 是G 到Sn 映射的核\n--定义这个映射 a:G--> ((a1H,a2H,.....anH),(a*a1H,a*a2H,.....a*anH)）\n  let K : Subgroup G := (MulAction.toPermHom G (G ⧸ H)).ker\n  use K\n  constructor\n --这个映射的核是正规子群\n  · exact MonoidHom.normal_ker (MulAction.toPermHom G (G ⧸ H))\n  --这个映射的核是正规子群\n--而且K.index是=im a | card.Sn=n！的\n  · have : G⧸K ≃* (MulAction.toPermHom G (G ⧸ H)).range := QuotientGroup.quotientKerEquivRange (MulAction.toPermHom G (G ⧸ H))\n    have ss: K.index=Nat.card (G ⧸ K):=by exact rfl\n    rw[ss]\n    have dss: Fintype.card (Equiv.Perm (G⧸H)) >0:=by exact Fintype.card_pos\n    have dvd :Nat.card (G ⧸ K) ∣ Fintype.card (Equiv.Perm (G⧸H)) :=by\n      rw [Nat.card_congr <| this.toEquiv]\n      have := Subgroup.card_subgroup_dvd_card (MonoidHom.range <| MulAction.toPermHom G (G⧸H))\n      simp only [Nat.card_eq_fintype_card] at this\n      simp only [MonoidHom.mem_range, MulAction.toPermHom_apply, Nat.card_eq_fintype_card]\n      exact this\n      --所以还是有限的\n--综上满足条件\n    have dba :Nat.card (G ⧸ K)>0:=by\n      exact Nat.pos_of_dvd_of_pos dvd dss\n    exact dba\n",
    "informalProof": "--我们证明 K是一个正规子群\n--K 是G 到Sn 映射的核\n--定义这个映射 a:G--> ((a1H,a2H,.....anH),(a*a1H,a*a2H,.....a*anH)）\n--由于H的index是有限的 记为n\n--((a1H,a2H,.....anH),(a*a1H,a*a2H,.....a*anH)）是一个属于Sn置换\n--这个映射的核是正规子群\n--而且K.index是=im a | card.Sn=n！的\n--所以还是有限的\n--综上满足条件"
  },
  {
    "id": 1528,
    "title": "Exercise_6028",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "12. If $G$ is a group and $N \\triangleleft G$ is such that $G / N$ is abelian, prove that $a b a^{-1} b^{-1} \\in N$ for all $a, b \\in G$",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-If $G$ is a group and $N \\triangleleft G$ is such that $G / N$ is abelian, prove that $a b a^{-1} b^{-1} \\in N$ for all $a, b \\in G$-/\nexample {G : Type*} [Group G] (N : Subgroup G) (hn : N.Normal) (hc : ∀ a b : (G⧸N), a * b = b * a) : ∀ a b : G, a * b * a⁻¹ * b⁻¹ ∈ N := by \n  intro a b \n  /-$G/N$ is abelian, so $aN*bN=bN*aN$, i.e. $abN=baN$.-/\n  set a' := QuotientGroup.mk (s := N) a with eqa\n  set b' := QuotientGroup.mk (s := N) b with eqb\n  have h := hc a' b'\n  rw [eqa, eqb] at h\n  /-$a b a^{-1} b^{-1} \\in N \\Leftrightarrow (aba^{-1}b^{-1}N=n) \\Leftrightarrow $abN=baN$.-/\n  apply (QuotientGroup.eq_one_iff (a * b * a⁻¹ * b⁻¹)).mp\n  simp only [QuotientGroup.mk_mul, QuotientGroup.mk_inv]\n  apply mul_inv_eq_one.mpr\n  apply mul_inv_eq_iff_eq_mul.mpr\n  exact h",
    "informalProof": "If $G$ is a group and $N \\triangleleft G$ is such that $G / N$ is abelian, prove that $a b a^{-1} b^{-1} \\in N$ for all $a, b \\in G$\n\nProof:\n1. $G/N$ is abelian, so $aN*bN=bN*aN$, i.e. $abN=baN$.\n2. $a b a^{-1} b^{-1} \\in N \\Leftrightarrow (aba^{-1}b^{-1}N=N) \\Leftrightarrow abN=baN$."
  },
  {
    "id": 1539,
    "title": "Exercise_6040",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*6. If $G$ is a group and $N \\triangleleft G$, show that if $a \\in G$ has finite order $o(a)$, then $N a$ in $G / N$ has finite order $m$, where $m \\mid o(a)$. (Prove this by using the homomorphism of $G$ onto $G / N$.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (G : Type*) [Group G] {H :Subgroup G} [H.Normal] (a : G) (h : 0 < orderOf a) : (orderOf <| QuotientGroup.mk (s := H) a) ∣ orderOf a := by\n  refine orderOf_dvd_of_pow_eq_one ?h\n  --Firstly, we use the definition of order to simplify the problem.\n  refine (QuotientGroup.eq_one_iff (N := H) ?_).2 ?_\n  dsimp\n  --Then, we apply the facts about quotient group ang change the problem into proving a ^ orderOf a ∈ H.\n  have h1 : a ^ orderOf a = 1 := by exact pow_orderOf_eq_one a\n  --After that, by using the definition of order, we can get a ^ orderOf a = 1.\n  rw [h1]\n  exact Subgroup.one_mem H\n  --And finally, by using this observation, we can easily reach the conclusion. This finishes the whole proof.",
    "informalProof": "Proof:\n1. Firstly, we use the definition of order to simplify the problem.\n2. Then, we apply the facts about quotient group ang change the problem into proving a ^ orderOf a ∈ H.\n3. After that, by using the definition of order, we can get a ^ orderOf a = 1.\n4. And finally, by using this observation, we can easily reach the conclusion. This finishes the whole proof."
  },
  {
    "id": 1552,
    "title": "Exercise_6063",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. Let $A$ be a normal subgroup of a group $G$, and suppose that $b \\in G$ is an element of prime order $p$, and that $b \\notin A$. Show that $A \\cap(b)=(e)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (G : Type*) [Group G] (A : Subgroup G) (b : G) (p : ℕ) (h2 : p.Prime) (h3 : orderOf b = p) (h4 : b ∉ A) : A ⊓ (Subgroup.zpowers b) = ⊥ := by\n  refine (Subgroup.eq_bot_iff_forall (A ⊓ Subgroup.zpowers b)).mpr ?_\n  intro x h5\n  have h6 : x ∈ Subgroup.zpowers b := by exact h5.2\n  have h7 : ∃ (n : ℤ), b ^ n = x := by\n    have := ((Subgroup.mem_zpowers_iff ).1 h6)\n    exact this\n  rcases h7 with ⟨n, h7⟩\n  --Firstly, we have that ∃ (n : ℤ), b ^ n = x by the definition of zpowers.\n  haveI : Fact (p.Prime) := Fact.mk h2\n  have h0 : b ^ p = 1 := by\n    refine pow_eq_one_iff_modEq.mpr ?_\n    rw [h3]\n    refine Nat.modEq_zero_iff_dvd.mpr ?_\n    exact Nat.dvd_refl p\n  --Secondly, by the definition of order, we can get b ^ p = 1.\n  by_cases h8 : (p : ℤ) ∣ n\n  --After that, we divide the problem into two cases, which is whether p ∣ n.\n  · rcases h8 with ⟨d, h8⟩\n    rw [h8] at h7\n    have h9 : ((b ^ p) ^ d) = x := by\n      rw [← h7, zpow_mul]\n      norm_cast\n    rw [h0, one_zpow] at h9\n    rw [h9]\n  --For the first part, we can get n = p * d, and then by using b ^ p = 1, we can get that b ^ n = 1, which means x = 1.\n  · let n': ZMod p := n\n    let n'' := n'⁻¹\n    have h9 : (p : ℤ) ∣ (n * (n''.val) - 1) := by\n      unfold_let n' n''\n      simp\n      apply (ZMod.intCast_eq_intCast_iff_dvd_sub _ _ p).mp ?_\n      simp\n      have : (n: ZMod p) ≠ 0 := by\n        intro h\n        have := (ZMod.intCast_zmod_eq_zero_iff_dvd _ _).mp h\n        exact h8 this\n      field_simp [this]\n    --For the second half, It is obvious that there exists an n'', such that p ∣ n * n'' - 1.\n    rcases h9 with ⟨d, h10⟩\n    have h11 : b ^ n ∈ A := by\n      rw [h7]\n      exact h5.1\n    have h12 : b ^ (n * n''.val) ∈ A := by\n      rw [zpow_mul]\n      exact Subgroup.zpow_mem A h11 ↑n''.val\n    --Since b ^ n is in A, b ^ (n * n'') is in A.\n    have h13 : n * ↑n''.val = ↑p * d + 1 := by\n      exact Eq.symm (add_eq_of_eq_sub (id (Eq.symm h10)))\n    --After that, we can get there is an d, such that n * n'' = p * d + 1 by definition.\n    rw [h13] at h12\n    rw [zpow_add, zpow_one b, zpow_mul] at h12\n    simp only [zpow_natCast, h0, one_zpow, one_mul] at h12\n    absurd h12\n    exact h4\n    --Finally, by using b ^ p = 1, we can get that b is in A, which is contrdictory to the given information. This finishes the whole proof.",
    "informalProof": "Proof:\n1. Firstly, we have that ∃ (n : ℤ), b ^ n = x by the definition of zpowers.\n2. Secondly, by the definition of order, we can get b ^ p = 1.\n3. After that, we divide the problem into two cases, which is whether p ∣ n.\n4. For the first part, we can get n = p * d, and then by using b ^ p = 1, we can get that b ^ n = 1, which means x = 1.\n5. For the second half, It is obvious that there exists an n'', such that p ∣ n * n'' - 1.\n6. Since b ^ n is in A, b ^ (n * n'') is in A.\n7. After that, we can get there is an d, such that n * n'' = p * d + 1 by definition.\n8. Finally, by using b ^ p = 1, we can get that b is in A, which is contrdictory to the given information. This finishes the whole proof."
  },
  {
    "id": 1557,
    "title": "Exercise_6070",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "5. If $|G|=p^{3}$ and $|Z(G)| \\geq p^{2}$, prove that $G$ is abelian.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-If $|G|=p^{3}$ and $|Z(G)| \\geq p^{2}$, prove that $G$ is abelian.-/\nopen Fintype Classical\nexample {G : Type*} {p : ℕ} [Group G] [Fintype G] (pp : p.Prime) (p3 : card G = p ^ 3) (p2 : card (Subgroup.center G) ≥ p ^ 2) : CommGroup G := by\n  /-We prove $\\forall a,b\\in G,a*b=b*a$.-/\n  letI : Fact p.Prime := by exact { out := pp }\n  apply CommGroup.mk\n  intro a b\n  /-Suppose $|Z(G)|=p^{k}$, where $2\\leq k\\leq 3$.-/\n  set d := card (Subgroup.center G) with deq \n  have dvd := Subgroup.card_subgroup_dvd_card (Subgroup.center G)\n  rw [p3, ← deq] at dvd\n  apply (Nat.dvd_prime_pow pp).mp at dvd\n  set k := Classical.choose dvd with keq\n  have hk := Classical.choose_spec dvd\n  rw [← keq] at hk \n  rw [hk.2] at p2\n  apply (pow_le_pow_iff_right (Nat.Prime.one_lt pp)).mp at p2\n  by_cases h : k = 3\n  /-If $k=3$, then $|Z(G)|=|G|$, so $Z(G)=G$, so $G$ is abelian.-/\n  · rw [hk.2, h, ← p3] at deq\n    have := Subgroup.eq_top_of_card_eq (Subgroup.center G) deq.symm \n    have : a ∈ Subgroup.center G := by\n      rw [this]\n      trivial\n    exact (Subgroup.mem_center_iff.mp this b).symm\n  /-If $k\\neq 3$,then $2\\leq k<3$, so $k=2$.-/\n  · have h1 := Nat.le_pred_of_lt (lt_iff_le_and_ne.mpr ⟨hk.1, h⟩)\n    simp only [Nat.pred_succ] at h1\n    apply LE.le.antisymm h1 at p2\n    /-Then $|G/Z(G)|=p$, so $G/Z(G)$ is cyclic.-/\n    letI : IsCyclic (G⧸(Subgroup.center G)) := by\n      have h3 := Subgroup.card_eq_card_quotient_mul_card_subgroup (Subgroup.center G) \n      have : p ^ 3 = p * p ^ 2 := by ring \n      rw [p3, ← deq, hk.2, p2, this] at h3\n      simp only [mul_eq_mul_right_iff] at h3\n      rcases h3 with h31|h32\n      exact isCyclic_of_prime_card h31.symm\n      apply (pow_eq_zero_iff (Ne.symm (Nat.zero_ne_add_one 1))).mp at h32\n      exact False.elim (Nat.Prime.ne_zero pp h32)\n    apply commutative_of_cyclic_center_quotient (QuotientGroup.mk' (Subgroup.center G))\n    /-Then $G$ is abelian. It's a well-known proposition.-/\n    rw [QuotientGroup.ker_mk']",
    "informalProof": "If $|G|=p^{3}$ and $|Z(G)| \\geq p^{2}$, prove that $G$ is abelian.\n\nProof:\n1. Suppose $|Z(G)|=p^{k}$, where $2\\leq k\\leq 3$.\n2. If $k=3$, then $|Z(G)|=|G|$, so $Z(G)=G$, so $G$ is abelian.\n3. If $k\\neq 3$,then $2\\leq k<3$, so $k=2$.\n Then $|G/Z(G)|=p$, so $G/Z(G)$ is cyclic.\n Then $G$ is abelian. It's a well-known proposition."
  },
  {
    "id": 1559,
    "title": "Exercise_6072",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "7. If $P \\triangleleft G, P$ a $p$-Sylow subgroup of $G$, prove that $\\varphi(P)=P$ for every automorphism $\\varphi$ of $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-Exercise_6072-/\n/- If $P \\triangleleft G, P$ a $p$-Sylow subgroup of $G$, prove that $\\varphi(P)=P$ for every automorphism $\\varphi$ of $G$.-/\nopen Fintype Classical\nexample {G : Type*} {p : ℕ} [Group G] [Fintype G] [Fact p.Prime] (P : Sylow p G) (pn : P.toSubgroup.Normal) (φ : G ≃* G) : φ '' P.toSubgroup = P.toSubgroup := by \n  /-Since $P$ is a normal Sylow $p$-subgroup, we have $P$ is a characteristic group.-/\n  have := Sylow.characteristic_of_normal P pn\n  /-So $φ(P)=P$ by the definition of characteristic subgroup.-/\n  apply Subgroup.characteristic_iff_map_eq.mp at this \n  nth_rw 2 [← this φ]\n  simp only [Subgroup.coe_map, MulEquiv.coe_toMonoidHom]\n",
    "informalProof": " If $P \\triangleleft G, P$ a $p$-Sylow subgroup of $G$, prove that $\\varphi(P)=P$ for every automorphism $\\varphi$ of $G$.\n\nProof:\n1. Since $P$ is a normal Sylow $p$-subgroup, we have $P$ is a characteristic group.\n2. So $φ(P)=P$ by the definition of characteristic subgroup.\n"
  },
  {
    "id": 1566,
    "title": "Exercise_6080",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "15. If $N \\triangleleft G$, let $B(N)=\\{x \\in G \\mid x a=a x$ for all $a \\in N\\}$. Prove that $B(N) \\triangleleft G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (G : Type) [Group G] (N : Subgroup G) [nh : N.Normal] : (Subgroup.centralizer (N : Set G)).Normal := by\n  constructor\n--1. We just have to prove that for $\\forall g \\in G$ and $\\forall c \\in C_G(N)$ , $g \\cdot c \\cdot g^{-1} \\in C_ G(N)$, i.e.  $\\forall n \\in N$ , $(g\\cdot c\\cdot g^{-1}) \\cdot n \\cdot (g\\cdot n \\cdot g^{-1})^{-1} = n$.\n  intro c hpc g n hpn\n  have h₀ : g⁻¹ * n * g ∈ N := by\n    apply (Subgroup.Normal.mem_comm_iff nh).mp\n    rw [← mul_assoc, mul_right_inv, one_mul]\n    exact hpn\n\n--2. Obviously $(g\\cdot c \\cdot g^{-1})^{-1} = g\\cdot c^{-1} \\cdot g^{-1}$, meaning that we only have to prove that $\\forall n \\in N$ , $g\\cdot c\\cdot g^{-1} \\cdot n \\cdot g\\cdot c^{-1} \\cdot g^{-1} = n$.\n  have h₁ : g * c * g⁻¹ * n * (g * c * g⁻¹)⁻¹ = n := by\n\n--3. That's obvious since $N \\unlhd G$ , meaning that $g^{-1} \\cdot n \\cdot g \\in N$, thus $c \\cdot (g^{-1} \\cdot n \\cdot g) \\cdot c^{-1} = g^{-1} \\cdot n \\cdot g$, therefore $g\\cdot c\\cdot g^{-1} \\cdot n \\cdot g\\cdot c^{-1} \\cdot g^{-1} = g \\cdot (g^{-1} \\cdot n \\cdot g) \\cdot g^{-1} = n$. $\\square$\n    calc\n    _ = g * c * g⁻¹ * n * (g * c⁻¹ * g⁻¹) := by group\n    _ = g * (c * (g⁻¹ * n * g) * c⁻¹) * g⁻¹ := by group\n    _ = g * (g⁻¹ * n * g) * g⁻¹ := by\n      have : c * (g⁻¹ * n * g) * c⁻¹ = (g⁻¹ * n * g) := by\n        exact Eq.symm (eq_mul_inv_of_mul_eq (hpc (g⁻¹ * n * g) h₀))\n      rw [this]\n    _ = _ := by group\n\n  exact mul_eq_of_eq_mul_inv (id (Eq.symm h₁))\n",
    "informalProof": "1. We just have to prove that for $\\forall g \\in G$ and $\\forall c \\in C_G(N)$ , $g \\cdot c \\cdot g^{-1} \\in C_ G(N)$, i.e.  $\\forall n \\in N$ , $(g\\cdot c\\cdot g^{-1}) \\cdot n \\cdot (g\\cdot c \\cdot g^{-1})^{-1} = n$.\n2. Obviously $(g\\cdot c \\cdot g^{-1})^{-1} = g\\cdot c^{-1} \\cdot g^{-1}$, meaning that we only have to prove that $\\forall n \\in N$ , $g\\cdot c\\cdot g^{-1} \\cdot n \\cdot g\\cdot c^{-1} \\cdot g^{-1} = n$.\n3. That's obvious since $N \\unlhd G$ , meaning that $g^{-1} \\cdot n \\cdot g \\in N$, thus $c \\cdot (g^{-1} \\cdot n \\cdot g) \\cdot c^{-1} = g^{-1} \\cdot n \\cdot g$, therefore $g\\cdot c\\cdot g^{-1} \\cdot n \\cdot g\\cdot c^{-1} \\cdot g^{-1} = g \\cdot (g^{-1} \\cdot n \\cdot g) \\cdot g^{-1} = n$. $\\square$"
  },
  {
    "id": 1569,
    "title": "Exercise_6083",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "18. If $P$ is a $p$-Sylow subgroup of $G$, show that $N(N(P))=N(P)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "theorem pro6083 {G : Type*} [Group G] {p : ℕ} [Fact (Nat.Prime p)] [Finite (Sylow p G)] (P : Sylow p G) :\n(↑P : Subgroup G).normalizer.normalizer = (↑P : Subgroup G).normalizer := by\n  -- This is a direct consequence of the fact that the normalizer of a normal subgroup is the whole group\n  exact Sylow.normalizer_normalizer P",
    "informalProof": "Proof:\nThis is a direct consequence of the fact that the normalizer of a normal subgroup is the whole group"
  },
  {
    "id": 1570,
    "title": "Exercise_6084",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "19. If $|G|=p^{n}$, show that $G$ has a subgroup of order $p^{m}$ for all $1 \\leq m \\leq n$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Fintype Classical\nexample (G : Type) [Group G] [Fintype G] (p n : ℕ) [Fact p.Prime] (hG : Fintype.card G = p ^ n) : ∀ (m : ℕ), m ≤ n ∧ m > 0 →  ∃ N : Subgroup G, Nat.card N = p ^ m := by\n\n  intro m h\n  rcases h with ⟨hmn, _⟩\n\n--According to the Sylow's first theorem, the answer is obvious.\n  have hpm : p ^ m ∣ Fintype.card G := by\n    rw [hG] ; exact Nat.pow_dvd_pow p hmn\n\n  apply Sylow.exists_subgroup_card_pow_prime p at hpm\n\n  rcases hpm with ⟨K, hpm⟩\n\n  use K\n  have h₀ : Nat.card K = Fintype.card K := by exact Nat.card_eq_fintype_card\n  rw [h₀, hpm]",
    "informalProof": "That is the Sylow's first theorem."
  },
  {
    "id": 1581,
    "title": "Exercise_6108",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "14. Prove that for any permutation $\\sigma, \\sigma \\tau \\sigma^{-1}$ is a transposition if $\\tau$ is a trans. position.",
    "comment": "这次应该能通过编译了吧",
    "suggestion": "",
    "formalProof": "open Equiv Equiv.Perm\n\nexample {α : Type*} [Fintype α] [DecidableEq α] (f : Equiv.Perm α ) (g : Equiv.Perm α )\n(hg : Equiv.Perm.IsSwap g): Equiv.Perm.IsSwap (f * g * f⁻¹) := by\n  -- We have $g$ is a swap, so $g$ has two fixed points.\n  have : g.support.card = 2 := by\n    exact card_support_eq_two.mpr hg\n  -- so $f * g * f⁻¹$ has two fixed points.\n  have : (f * g * f⁻¹).support.card = 2 := by\n    rw[Equiv.Perm.card_support_conj]\n    exact this\n  -- Therefore, $f * g * f⁻¹$ is a swap.\n  refine card_support_eq_two.mp ?_\n  · exact this",
    "informalProof": "Proof:\n1. We have $g$ is a swap, so $g$ has two fixed points.\n2. so $f * g * f⁻¹$ has two fixed points.\n3. Therefore, $f * g * f⁻¹$ is a swap."
  },
  {
    "id": 1584,
    "title": "Exercise_6113",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "19. Prove that if $\\tau_{1}, \\tau_{2}$, and $\\tau_{3}$ are transpositions, then $\\tau_{1} \\tau_{2} \\tau_{3} \\neq e$, the identity element of $S_{n}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Equiv Equiv.Perm\n\nvariable (n : ℕ) (τ₁ : Perm (Fin n)) (τ₂ : Perm (Fin n)) (τ₃ : Perm (Fin n))\n\nexample (h₁ : IsSwap τ₁) (h₂ : IsSwap τ₂) (h₃ : IsSwap τ₃) : τ₁ * τ₂ * τ₃ ≠ 1 := by\n  -- Assume for contradiction that $τ₁τ₂τ₃ = id$.\n  by_contra this\n  -- Derive a contradiction using the properties of permutation signs.\n  absurd signAux_one n\n  -- As the sign of the identity permutation is +1, we need to show that the sign of $τ₁τ₂τ₃$ is -1.\n  apply Int.units_ne_iff_eq_neg.mpr\n  rw [← this]\n  -- We know that the sign of a transposition is -1.\n  have {τ : Perm (Fin n)} (h : IsSwap τ) : signAux τ = -1 := by\n    rcases h with ⟨a, b, aneb, rfl⟩\n    exact signAux_swap aneb\n  -- Thus the Sgn$(τ₁τ₂τ₃) =$ Sgn$(τ₁)$Sgn$(τ₂)$Sgn$(τ₃) = -1 × -1 × -1 = -1$.\n  rw [signAux_mul, signAux_mul, this h₁, this h₂, this h₃]\n  exact rfl\n",
    "informalProof": "Proof. \n1. Assume for contradiction that $τ₁τ₂τ₃ = id$.\n2. Derive a contradiction using the properties of permutation signs.\n3. As the sign of the identity permutation is +1, we need to show that the sign of $τ₁τ₂τ₃$ is -1.\n4. We know that the sign of a transposition is -1.\n5. Thus the Sgn$(τ₁τ₂τ₃) =$ Sgn$(τ₁)$Sgn$(τ₂)$Sgn$(τ₃) = -1 × -1 × -1 = -1$."
  },
  {
    "id": 1595,
    "title": "Exercise_6172",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2. If $R$ is an integral domain and $a b=a c$ for $a \\neq 0, b, c \\in R$, show that $b=c$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R :Type*} [Ring R][NoZeroDivisors R](a b c : R)(h₁ : ¬ a=0 ∧ a*b=a*c):b=c:=by\n  have : b - c = 0 :=by\n--Noting that $ab-ac=a(b-c)=0$\n    have t1: a*b - a*c = 0:=by \n      rw[h₁.2]\n      exact sub_eq_zero_of_eq rfl\n    have t2: a * (b - c) = 0:=by \n      calc\n        _= a*b - a*c := by rw[mul_sub]\n        _= _:=by rw[t1]\n--since $a\\neq 0$ and $R$ does not have non-zero zero divisor, then $b-c=0$. \n    have t3: a=0 ∨ b-c=0:=by\n     apply mul_eq_zero.mp t2\n    exact Or.resolve_left t3 h₁.1\n  have t': b = b-c+c:=by exact Eq.symm (sub_add_cancel b c)\n  rw[t',this,zero_add]",
    "informalProof": "Proof:\n\n1. Noting that $ab-ac=a(b-c)=0$, since $a\\neq 0$ and $R$ does not have non-zero zero divisor, then $b-c=0$. "
  },
  {
    "id": 1597,
    "title": "Exercise_6174",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "4. If $R$ is a ring and $e \\in R$ is such that $e^{2}=e$, show that $(x e-e x e)^{2}=0$ for every $x \\in R$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport MIL.Common\n\n-- Define the ring and the idempotent element\nvariable {R : Type*} [Ring R] (e : R)\n\n-- Assume e is idempotent\nlemma property1 (h : e * e = e) :\n  ∀ x : R, (x * e - e * x * e) * (x * e - e * x * e) = 0 := by\n  intro x\n  calc \n  (x * e - e * x * e) * (x * e - e * x * e)\n      -- Expand the product using distributive property\n      = x * e * (x * e) - e * x * e * (x * e) - x * e * (e * x * e) + e * x * e * (e * x * e) := by simp only [mul_sub, sub_mul, sub_add]\n      -- Simplify using associative property\n    _ = x * e * (x * e) - e * x * e * (x * e) - x * (e * e) * (x * e) + e * x * (e * e) * (x * e) := by simp only [mul_assoc]\n      -- Use the idempotent property (e * e = e)\n    _ = x * e * (x * e) - e * x * e * (x * e) - x * e * (x * e) + e * x * e * (x * e) := by simp only [h]\n      -- Combine like terms\n    _ = 0 := by simp\n",
    "informalProof": "Define the ring and the idempotent element\nAssume e is idempotent\nExpand the product using distributive property\nSimplify using associative property\nUse the idempotent property (e * e = e)\nCombine like terms\nSimilarly, we can show the other required property\nExpand the product using distributive property\nSimplify using associative property\nUse the idempotent property (e * e = e)\nCombine like terms"
  },
  {
    "id": 1599,
    "title": "Exercise_6176",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6. If $a^{2}=0$ in $R$, show that $a x+x a$ commutes with $a$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (R : Type) [Ring R] (a : R) (h : a * a = 0) : ∀ x : R,  (a * x + x * a) * a = a * (a * x + x * a) := by\n  intro x\n-- We only need to prove that (a * x + x * a) * a = a * x * a = a * (a * x + x * a)\n  trans a * x * a\n-- For the left hand side, the calculation is obvious since a * x * a + x * a * a = a * x * a + x * 0 = a * x * a\n  · calc\n      _ = a * x * a + x * a * a := by\n        exact RightDistribClass.right_distrib (a * x) (x * a) a\n      _ = a * x * a + x * (a * a) := by nth_rw 2 [mul_assoc]\n      _ = _ := by rw [h, mul_zero, add_zero]\n\n-- It's exactly symmetrical on the right hand side.\n  · symm\n    calc\n      _ = a * (a * x) + a * (x * a) := by exact LeftDistribClass.left_distrib a (a * x) (x * a)\n      _ = a * a * x + a * x * a := by rw [mul_assoc, mul_assoc]\n      _ = _ := by rw [h, zero_mul, zero_add]",
    "informalProof": "The proof is obvious, $a(ax + xa)= axa = (ax + xa)a$."
  },
  {
    "id": 1618,
    "title": "Exercise_6209",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "29. Let $R$ be a ring with 1 . An element $a \\in R$ is said to have a left inverse if $b a=1$ for some $b \\in R$. Show that if the left inverse $b$ of $a$ is unique, then $a b=1$ (so $b$ is also a right inverse of $a$ ).",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nLet $R$ be a ring with 1 . An element $a \\in R$ is said to have a left inverse if $b a=1$ for some $b \\in R$. Show that if the left inverse $b$ of $a$ is unique, then $a b=1$ (so $b$ is also a right inverse of $a$ ).\n-/\nexample {R : Type*} [Ring R] {a b : R} (h₁ : b * a = 1) (h₂ : ∀ c : R, c * a = 1 → c = b) : a * b = 1 := by\n  -- Let $c = 1 - ab + b$. We have $ca = (1 - ab + b) a = a - aba + ba = a - a + 1 = 1$.\n  have h : (1 - a * b + b) * a = 1 := by rw [add_mul, sub_mul, mul_assoc, h₁, one_mul, mul_one, sub_self, zero_add]\n  apply h₂ at h\n  -- Since $b$ is the unique left inverse of $a$, so $c = b, \\ \\mathrm{i.e.} \\ 1 - ab + b = b$, hence $ab = 1$.\n  symm at h\n  rw [self_eq_add_left] at h\n  apply eq_add_of_sub_eq at h\n  rw [zero_add] at h\n  exact symm h",
    "informalProof": "Proof:\n\n1. Let $c = 1 - ab + b$. We have $ca = (1 - ab + b) a = a - aba + ba = a - a + 1 = 1$.\n\n2. Since $b$ is the unique left inverse of $a$, so $c = b, \\ \\mathrm{i.e.} \\ 1 - ab + b = b$, hence $ab = 1$."
  },
  {
    "id": 1644,
    "title": "Exercise_6256",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "5. If $p$ is a prime, show that $f(x)=x^{p-1}+x^{p-2}+\\cdots+x+1$ is irreducible in $\\mathbb{Q}[x]$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nIf $p$ is a prime, show that $f(x)=x^{p-1}+x^{p-2}+\\cdots+x+1$ is irreducible in $\\mathbb{Q}[x]$.\nWe can prove this by the properties of cyclotomic polynomials.\nSince $p$ is prime, we know that $f(x)$ happens to equal to the cyclotomic polynomial with order $p$.\nThus $f(x)$ is Irreducible because any cyclotomic polynomial is the minimal polynomial of n-th primitive root and is irreducible.\n-/\nopen Polynomial\nnoncomputable def poly (p : ℕ) : Polynomial ℚ := ∑ i ∈ Finset.range p, X^i\nexample (p : ℕ) (hp : p.Prime) : Irreducible (poly p) := by\n-- We can prove this by the properties of cyclotomic polynomials.\n  have pgt1 : 0 < p := Nat.Prime.one_le hp\n  have polyp_eq_cyclotomic : poly p = cyclotomic p ℚ := by\n  -- Since $p$ is prime, we know that $f(x)$ happens to equal to the cyclotomic polynomial with order $p$.\n    simp [poly]\n    calc\n      poly p = ∑ i ∈ Finset.range p, X^i := by rfl\n      _ = ∑ i ∈ Finset.range p, (X^p^0)^i := by simp_all only [pow_zero, pow_one]\n      _ = cyclotomic (p^(0 + 1)) ℚ := by rw [Polynomial.cyclotomic_prime_pow_eq_geom_sum hp]\n      _ = cyclotomic p ℚ := by simp_all only [zero_add, pow_one]\n  -- Thus $f(x)$ is Irreducible because any cyclotomic polynomial is the minimal polynomial of n-th primitive root and is irreducible.\n  rw [polyp_eq_cyclotomic]\n  exact cyclotomic.irreducible_rat pgt1\n",
    "informalProof": "/-\nIf $p$ is a prime, show that $f(x)=x^{p-1}+x^{p-2}+\\cdots+x+1$ is irreducible in $\\mathbb{Q}[x]$.\nWe can prove this by the properties of cyclotomic polynomials.\nSince $p$ is prime, we know that $f(x)$ happens to equal to the cyclotomic polynomial with order $p$.\nThus $f(x)$ is Irreducible because any cyclotomic polynomial is the minimal polynomial of n-th primitive root and is irreducible.\n-/"
  },
  {
    "id": 1657,
    "title": "Exercise_6277",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "8. If $F$ is a field of characteristic $p \\neq 0$, show that $(a+b)^{m}=a^{m}+b^{m}$, where $m=p^{n}$, for all $a, b$ in $F$ and any positive integer $n$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [CommRing R] {p : ℕ} [Fact (Nat.Prime p)] (pchar : CharP R p) (x y : R) (k : ℕ) : (x + y) ^ (p ^ k) = x ^ (p ^ k) + y ^ (p ^ k) := by\n  induction' k with d hd\n  -- Proceed by induction on k\n  · -- This is the trivial case\n    rw [pow_zero, pow_one, pow_one, pow_one]\n  · -- We apply the induction hypothesis and the freshman's dream identity\n    rw [pow_succ, pow_mul, hd, pow_mul, pow_mul, add_pow_char]",
    "informalProof": "We will use induction on \\( k \\) to prove this identity.\n\n1. **Base Case (\\( k = 0 \\)):**\n   - When \\( k = 0 \\), we have:\n   \\[\n   (x + y)^{p^0} = (x + y)^1 = x + y\n   \\]\n   - Similarly,\n   \\[\n   x^{p^0} + y^{p^0} = x^1 + y^1 = x + y\n   \\]\n   - Thus, the base case holds:\n   \\[\n   (x + y)^1 = x + y\n   \\]\n\n2. **Inductive Step:**\n   - Assume that the identity holds for some \\( k = d \\), i.e.,\n   \\[\n   (x + y)^{p^d} = x^{p^d} + y^{p^d}\n   \\]\n   - We need to show that the identity holds for \\( k = d + 1 \\), i.e.,\n   \\[\n   (x + y)^{p^{d+1}} = x^{p^{d+1}} + y^{p^{d+1}}\n   \\]\n   - Notice that \\( p^{d+1} = p \\cdot p^d \\). Therefore, we can write:\n   \\[\n   (x + y)^{p^{d+1}} = (x + y)^{p \\cdot p^d} = ((x + y)^{p^d})^p\n   \\]\n   - By the induction hypothesis, we have:\n   \\[\n   ((x + y)^{p^d})^p = (x^{p^d} + y^{p^d})^p\n   \\]\n   - Applying the Freshman's Dream identity for \\( p \\) to \\( x^{p^d} \\) and \\( y^{p^d} \\), we get:\n   \\[\n   (x^{p^d} + y^{p^d})^p = (x^{p^d})^p + (y^{p^d})^p\n   \\]\n   - Simplifying the exponents, we obtain:\n   \\[\n   (x^{p^d})^p = x^{p \\cdot p^d} = x^{p^{d+1}}\n   \\]\n   \\[\n   (y^{p^d})^p = y^{p \\cdot p^d} = y^{p^{d+1}}\n   \\]\n   - Thus,\n   \\[\n   (x^{p^d} + y^{p^d})^p = x^{p^{d+1}} + y^{p^{d+1}}\n   \\]\n   - Therefore, the inductive step is complete, and the identity holds for \\( k = d + 1 \\).\n\n3. **Conclusion:**\n   - By induction, the identity holds for all non-negative integers \\( k \\):\n   \\[\n   (x + y)^{p^k} = x^{p^k} + y^{p^k}\n   \\]\n\nThis completes the proof of the generalized Freshman's Dream identity."
  },
  {
    "id": 1668,
    "title": "Exercise_7605",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2. Show that for every positive integer $n$, $X^n -2$ is an irreducible polynomial over the integers.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Polynomial\n\nexample (n : ℕ) (f : ℤ[X]) (npos : 1 ≤ n) (h : f = X ^ n - 2) : Irreducible f := by\n  -- We want to use Eisenstein's criterion\n  apply Polynomial.irreducible_of_eisenstein_criterion\n  · -- 2ℤ is a prime ideal\n    show (Ideal.span {2}).IsPrime\n    refine (Ideal.span_singleton_prime ?hP.hp).mpr ?hP.a\n    · norm_num\n    · exact Int.prime_two\n  · -- Show that 2 doesn't divide the leading coefficient of X ^ n - 2\n    rw [h]\n    rw [leadingCoeff]\n    -- The degree of f is n\n    have h1 : f.degree = n := by\n      rw [h]\n      compute_degree\n      · by_cases h : n = 0\n        · rw [h] at npos\n          simp only [nonpos_iff_eq_zero, one_ne_zero] at *\n        · simp only [h, ↓reduceIte, sub_zero, ne_eq, one_ne_zero, not_false_eq_true]\n      · exact Nat.le_refl n\n      · exact rfl\n    have h1 : f.natDegree = n := by\n      exact (degree_eq_iff_natDegree_eq_of_pos npos).mp h1\n    rw [h] at h1\n    rw [h1]\n    -- The leading coefficient is 1\n    simp only [coeff_sub, coeff_X_pow, ↓reduceIte]\n    have: (C 2 : ℤ[X]).coeff n = if n = 0 then 2 else 0 := coeff_C\n    simp only [map_ofNat] at this\n    rw [this, if_neg (by linarith)]\n    simp only [sub_zero]\n    intro h2\n    -- 1 isn't in 2ℤ\n    simp [Ideal.mem_span_singleton'] at *\n    obtain ⟨a, ha⟩ := h2\n    by_cases h : 0 < a\n    · linarith\n    · push_neg at h\n      linarith\n  · -- All the coefficients of f besides the leading coefficient are divisible by 2\n    intro m hm\n    refine Ideal.mem_span_singleton.mpr ?hfP.a\n    -- Show again that f has degree n\n    have h1 : f.degree = n := by\n      rw [h]\n      compute_degree\n      · by_cases h : n = 0\n        · rw [h] at npos\n          simp only [nonpos_iff_eq_zero, one_ne_zero] at *\n        · simp only [h, ↓reduceIte, sub_zero, ne_eq, one_ne_zero, not_false_eq_true]\n      · exact Nat.le_refl n\n      · exact rfl\n    rw [h1] at hm\n    rw [h]\n    -- m ≠ n is obvious\n    have h1 : m ≠ n := by\n      by_contra!\n      rw [this] at hm\n      have hm : n < n := by exact (StrictAnti.lt_iff_lt fun ⦃a b⦄ _ => hm).mp hm\n      exact (lt_self_iff_false ↑n).mp hm\n    simp [h1]\n    -- Now our goal is to prove that all the coefficient of 2 is even\n    by_cases this : m = 0\n    · rw [this]\n      simp only [coeff_ofNat_zero, dvd_refl]\n    · have h2 : (C 2 : ℤ[X]).coeff m = if m = 0 then 2 else 0 := by apply coeff_C\n      simp only [map_ofNat] at h2\n      rw [h2]\n      rw [if_neg this]\n      norm_num\n  · -- Show that f has positive degree, which follows from npos\n    have h1 : f.degree = n := by\n      rw [h]\n      compute_degree\n      · by_cases h : n = 0\n        · rw [h] at npos\n          simp only [nonpos_iff_eq_zero, one_ne_zero] at *\n        · simp only [h, ↓reduceIte, sub_zero, ne_eq, one_ne_zero, not_false_eq_true]\n      · exact Nat.le_refl n\n      · exact rfl\n    rw [h1]\n    exact Nat.cast_pos.mpr npos\n  · -- Show that the constant term of f is not divisible by 2 ^ 2 = 4\n    rw [h]\n    by_cases h1 : 0 = n\n    · rw [← h1] at npos\n      linarith\n    · simp only [coeff_sub, coeff_X_pow, h1, ↓reduceIte, coeff_ofNat_zero, zero_sub, Int.reduceNeg,\n      neg_mem_iff]\n      rw [pow_two]\n      rw [Ideal.span_singleton_mul_span_singleton]\n      simp only [Int.reduceMul, Ideal.mem_span_singleton', not_exists]\n      -- 2 isn't in 4ℤ\n      intro a h\n      by_cases h : 0 < a\n      · linarith\n      · push_neg at h\n        linarith\n  · -- f is Monic\n    refine Monic.isPrimitive ?hu.hp\n    refine Monic.def.mpr ?hu.hp.a\n    rw [leadingCoeff]\n    -- The degree of f is n\n    have h1 : f.degree = n := by\n      rw [h]\n      compute_degree\n      · by_cases h : n = 0\n        · rw [h] at npos\n          simp only [nonpos_iff_eq_zero, one_ne_zero] at *\n        · simp only [h, ↓reduceIte, sub_zero, ne_eq, one_ne_zero, not_false_eq_true]\n      · exact Nat.le_refl n\n      · exact rfl\n    have h1 : f.natDegree = n := by\n      exact (degree_eq_iff_natDegree_eq_of_pos npos).mp h1\n    rw [h1, h]\n    simp only [coeff_sub, coeff_X_pow, ↓reduceIte, sub_eq_self]\n    have: (C 2 : ℤ[X]).coeff n = if n = 0 then 2 else 0 := coeff_C\n    simp only [map_ofNat] at this\n    rw [if_neg (by linarith)] at this\n    exact this",
    "informalProof": "### We only need to show the Irreducibility of \\( X^n - 2 \\) over \\( \\mathbb{Z} \\)\n\n#### Statement:\nLet \\( f \\) be a polynomial defined as \\( f = X^n - 2 \\) where \\( n \\) is a positive integer (\\( n \\geq 1 \\)). We need to show that \\( f \\) is irreducible over the ring of integers \\( \\mathbb{Z} \\).\n\n#### Proof:\nWe will use Eisenstein's criterion to prove the irreducibility of \\( f \\).\n\n1. **Prime Ideal \\( 2\\mathbb{Z} \\) is Prime:**\n   The ideal \\( 2\\mathbb{Z} \\) is a prime ideal in \\( \\mathbb{Z} \\), as \\( 2 \\) is a prime number. This satisfies the first condition of Eisenstein's criterion.\n\n2. **Leading Coefficient Condition:**\n   The leading coefficient of \\( f = X^n - 2 \\) is \\( 1 \\). We need to show that \\( 2 \\) does not divide the leading coefficient.\n   - The leading coefficient of \\( f \\) is \\( 1 \\), and \\( 2 \\) does not divide \\( 1 \\).\n\n3. **Divisibility of Other Coefficients:**\n   All coefficients of \\( f \\) besides the leading coefficient must be divisible by \\( 2 \\).\n   - The polynomial \\( f = X^n - 2 \\) has coefficients \\( 1, 0, 0, \\ldots, 0, -2 \\).\n   - All coefficients other than the leading coefficient \\( 1 \\) and the constant term \\( -2 \\) are \\( 0 \\), which is divisible by \\( 2 \\).\n   - The constant term \\( -2 \\) is divisible by \\( 2 \\).\n\n4. **Constant Term Condition:**\n   The constant term of \\( f = X^n - 2 \\) is \\( -2 \\). We need to show that \\( 2^2 = 4 \\) does not divide the constant term.\n   - The constant term is \\( -2 \\), and \\( 4 \\) does not divide \\( -2 \\).\n\n5. **Conclusion:**\n   All conditions of Eisenstein's criterion are satisfied for the polynomial \\( f = X^n - 2 \\) with the prime number \\( 2 \\).\n   - Therefore, \\( f = X^n - 2 \\) is irreducible over \\( \\mathbb{Z} \\).\n\nHence, we have shown that the polynomial \\( f = X^n - 2 \\) is irreducible over the ring of integers \\( \\mathbb{Z} \\).\n"
  },
  {
    "id": 1755,
    "title": "Exercise_7699",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "10.  If $H$ and $K$ are subgroups of a group $G$, then $H \\cup K$ cannot be a subgroup unless $H \\subseteq K$ or $K \\subseteq H$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nlemma Subgroup.union_subgroup_iff {G : Type*} [Group G] {A B : Subgroup G} : (∃ C : Subgroup G , C.carrier = (A.carrier ∪ B.carrier)) ↔ (A.carrier ⊆ B.carrier) ∨ (B.carrier ⊆ A.carrier) := by\n  constructor\n  · rintro ⟨C, hc⟩\n    by_contra h \n    push_neg at h\n    --proof by contradiction : Suppose $A \\nsubseteq B$ and $B \\nsubseteq A$. \n    rcases h with ⟨h₁, h₂⟩\n    rw [Set.not_subset] at h₁ h₂\n    -- Then there are $a \\in A$and $b \\in B$ such that $a \\notin B, b\\notin A$.\n    obtain ⟨a, ain, anin⟩ := h₁\n    obtain ⟨b, bin, bnin⟩ := h₂\n    have pa : a ∈ C := by\n      rw [← Subgroup.mem_carrier, hc]\n      apply Set.mem_union_left \n      exact ain\n    have pb : b ∈ C := by\n      rw [← Subgroup.mem_carrier, hc]\n      apply Set.mem_union_right  \n      exact bin\n    have pc : a * b ∈ A ∨ a * b ∈ B := by\n      have ha : a * b ∈ A ↔ a * b ∈ A.carrier := Subgroup.mem_carrier\n      have hb : a * b ∈ B ↔ a * b ∈ B.carrier := Subgroup.mem_carrier\n      rw [Iff.or ha hb]\n      apply Set.mem_or_mem_of_mem_union\n      rw [← hc]\n      apply Subgroup.mul_mem C pa pb\n    --Note that $a \\in C$, $b \\in C$ \\Leftarrow $ab \\in C$\n    cases pc with\n    | inl h =>\n    have contra :  b ∈ A := (Subgroup.mul_mem_cancel_left A ain).mp h\n    -- If (a * b) ∈ A , then b ∈ A\n    rw [Subgroup.mem_carrier] at bnin\n    contradiction\n    | inr h =>\n    have contra : a ∈ B := (Subgroup.mul_mem_cancel_right B bin).mp h\n    rw [Subgroup.mem_carrier] at anin\n    -- If (a * b) ∈ B , then a ∈ B\n    contradiction\n  · intro p\n    cases p with\n    | inl h =>\n      use B\n      exact Eq.symm (Set.union_eq_self_of_subset_left h)\n      -- If A ⊆ B , then  A ∪ B = B meets the condition.\n    | inr h =>\n      use A\n      exact Eq.symm (Set.union_eq_self_of_subset_right h)\n      -- If B ⊆ A , then A = A ∪ B meets the condition.\n",
    "informalProof": "$\\text{We prove the equivlent prop as a lemma}\\\\$\n$\\text{Lemma : Let } A, B \\le G.\\text{ There exists a subgroup }C = A \\cup B \\iff A \\subseteq B\\text{ or } B \\subseteq A.$\n$\\text{Proof of lemma : } \"\\Rightarrow \": \\text{ Suppose } A \\nsubseteq B \\text{ and } B \\nsubseteq A. \\text{ Then there are } a \\in A  \\text{ and } b \\in B \\text{ such that } a \\notin B, b\\notin A.\\text{ Note that } a \\in C, b \\in C \\Rightarrow ab \\in C \\Rightarrow ab \\in A \\text{ or } ab \\in B.\\\\\n\\text{ If }ab \\in B, \\text{then } a \\in B, \\text{ which derives a contradiction}; \\text{ If } ab \\in A, \\text{then } b \\in A, \\text{ which also derives a contradiction.}\\\\$\n$\"\\Leftarrow \": \\text{ If } A \\subset B, \\text{ then } B = A \\cup B \\text{ meets the conditions}; \\text{ If } B \\subset A, \\text{ then } A = A \\cup B \\text{ meets the conditions.}\\\\$\n$\\text{Proof of example : } \\text{ Suppose that there are two proper subgroups }A, B \\text{ such that }A \\cup B=G .\\\\$\n$\\text{Claim : There does not exist subgroup }C \\text{ such that } C=A \\cup B.\\text{ Otherwise, by lemma we have } A \\subseteq B \\text{ or } B  \\subseteq A \\Rightarrow A=A \\cup B =C   \\text{ or } B =A \\cup B=G ,\\text{which is contradictory to } A \\neq  C, B \\neq C (\\text{ Since } A \\text { and }B \\text { are proper subgroups}, A\\neq C,B \\neq C) .\\\\$\n$\\text{By claim, there is no subgroup } C, C =A \\cup B.\\\\$\n$\\text{Take }C=G, \\text{which is contradictory to the claim.}$"
  },
  {
    "id": 1887,
    "title": "Example_3212B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   The maps between groups $f:G\\to H, g:G\\to K$ are homomorphisms if and only if the map $f\\times g:G\\to H\\times K,\\ x\\mapsto (f(x),g(x))$ is a homomorphism.   ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nvariable {G H K : Type*} [Group G] [Group H] [Group K] (f1 : G → H) (f2 : G → K)\n\n-- Define myMap as a function from G to the product of H and K\ndef myMap : G → (H × K) := fun x => (f1 x, f2 x)\n\nexample : (IsGroupHom f1 ∧ IsGroupHom f2) ↔ IsGroupHom (myMap f1 f2) := by\n  constructor\n  · intro h\n    -- Extract the proofs that f1 and f2 are group homomorphisms\n    rcases h with ⟨h1, h2⟩\n    refine IsGroupHom.mk' ?mp.intro.hf\n    intro x y\n    -- Show that myMap preserves multiplication\n    show (f1 (x * y), f2 (x * y)) = (f1 x, f2 x) * (f1 y, f2 y)\n    ext\n    · show f1 (x * y) = f1 x * f1 y\n      exact IsGroupHom.map_mul' h1 x y\n    · show f2 (x * y) = f2 x * f2 y\n      exact IsGroupHom.map_mul' h2 x y\n  · intro h\n    constructor\n    -- Prove that f1 is a group homomorphism using the fact that myMap is\n    refine IsGroupHom.mk' ?mpr.left.hf\n    intro x y\n    have g : myMap f1 f2 (x * y) = myMap f1 f2 x * myMap f1 f2 y := by\n      exact (IsGroupHom.map_mul' h x y)\n    calc\n      f1 (x * y) = (myMap f1 f2 (x * y)).1 := by rfl\n      _ = (myMap f1 f2 x * myMap f1 f2 y).1 := by rw [g]\n      _ = (myMap f1 f2 x).1 * (myMap f1 f2 y).1 := by rfl\n      _ = f1 x * f1 y := by rfl\n    -- Prove that f2 is a group homomorphism using the fact that myMap is\n    refine IsGroupHom.mk' ?mpr.right.hf\n    intro x y\n    have g : myMap f1 f2 (x * y) = myMap f1 f2 x * myMap f1 f2 y := by\n      exact (IsGroupHom.map_mul' h x y)\n    calc\n      f2 (x * y) = (myMap f1 f2 (x * y)).2 := by rfl\n      _ = (myMap f1 f2 x * myMap f1 f2 y).2 := by rw [g]\n      _ = (myMap f1 f2 x).2 * (myMap f1 f2 y).2 := by rfl\n      _ = f2 x * f2 y := by rfl\n",
    "informalProof": "Let $G, H, K$ be groups, and $f_1 : G \\rightarrow H$ and $f_2 : G \\rightarrow K$ be group homomorphisms.\n\nDefine $\\text{myMap} : G \\rightarrow H \\times K$ as follows:\n$$\\text{myMap}(x) = (f_1(x), f_2(x))$$\n\nWe want to prove that: $f_1$ and $f_2$ are group homomorphisms if and only if $\\text{myMap} f_1 f_2$ is a group homomorphism.\n\nProof:\n\nFirst, prove that if $f_1$ and $f_2$ are group homomorphisms, then $\\text{myMap} f_1 f_2$ is also a group homomorphism.\n\nSuppose $f_1$ and $f_2$ are group homomorphisms, then for any $x, y \\in G$, we have:\n$$f_1(x \\cdot y) = f_1(x) \\cdot f_1(y)$$\n$$f_2(x \\cdot y) = f_2(x) \\cdot f_2(y)$$\n\nNow let's prove that $\\text{myMap} f_1 f_2$ is a group homomorphism. For any $x, y \\in G$, we have:\n$$\\text{myMap} f_1 f_2 (x \\cdot y) = (f_1(x \\cdot y), f_2(x \\cdot y))$$\n$$= (f_1(x) \\cdot f_1(y), f_2(x) \\cdot f_2(y))$$\n$$= \\text{myMap} f_1 f_2 x \\cdot \\text{myMap} f_1 f_2 y$$\n\nTherefore, $\\text{myMap} f_1 f_2$ is a group homomorphism.\n\nNext, prove that if $\\text{myMap} f_1 f_2$ is a group homomorphism, then $f_1$ and $f_2$ are group homomorphisms.\n\nSuppose $\\text{myMap} f_1 f_2$ is a group homomorphism. Then for any $x, y \\in G$, we have:\n$$\\text{myMap} f_1 f_2 (x \\cdot y) = \\text{myMap} f_1 f_2 x \\cdot \\text{myMap} f_1 f_2 y$$\n$$\\Rightarrow (f_1(x \\cdot y), f_2(x \\cdot y)) = (f_1(x), f_2(x)) \\cdot (f_1(y), f_2(y))$$\n$$\\Rightarrow f_1(x \\cdot y) = f_1(x) \\cdot f_1(y) \\text{ and } f_2(x \\cdot y) = f_2(x) \\cdot f_2(y)$$\n\nTherefore, $f_1$ and $f_2$ are group homomorphisms.\n\nThis completes the proof.\n"
  },
  {
    "id": 1901,
    "title": "Example_3311B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "  Let $G$ be a group and $a,b \\in G$. Show that the map $f: G \\to G$ given by $f(x) = axb$ is a isomorphism if and only if $b=a^{-1}$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nimport Mathlib\nimport Mathlib.Algebra.Group.MinimalAxioms\n\nexample {G : Type*} [Group G] (f : G → G ) (a b : G) (h : ∀ x : G , f x = a * x * b) : IsGroupHom f ↔ b = a⁻¹where\n  mp := by\n    intro t\n    have k : ∀ x y : G , (f x) * (f y) = f (x * y) := fun x y => Eq.symm (IsGroupHom.map_mul' t x y) \n    have k₁ : (f 1) * (f 1) =  f (1 * 1) :=  k 1 1\n    simp at k₁ \n    rw [h 1] at k₁\n    simp at k₁\n    exact Eq.symm (DivisionMonoid.inv_eq_of_mul a b k₁)\n  mpr := by \n    intro k\n    refine IsGroupHom.mk' ?hf\n    intro x y\n    rw [h (x * y)] \n    rw [h x]\n    rw [h y]\n    rw [k]\n    group",
    "informalProof": "trivial"
  },
  {
    "id": 1950,
    "title": "Example_3520B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   Set $f:G\\to H$ is a homomorphism between two groups.    If $f(a)$ is not of finite order, then $a$ is also not of finite order.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n/-Problem : Let $G$ and $H$ be two groups and $f$ be a homomorphism from $G$ to $H$,show that\n$\\forall a\\in G$, $o(f(a))=\\infty$ implies $o(a)=\\infty$. Here $o(a)$ means order of a.-/\nexample {G H: Type*}[Group G][Group H](f:G→*H):∀(a:G), orderOf (f a)=0 → orderOf a=0 :=by \n  intro a\n--Prove the problem by contradiction i.e. show that $o(a)<\\infty$ but $o(f(a))=\\infty$ cannot happen.\n  by_contra h\n  push_neg at h\n  rcases h with ⟨L,R⟩\n  have pow_eq_one: (f a)^(orderOf a)=1 :=by \n    rw [← @MonoidHom.map_pow,pow_orderOf_eq_one,map_one]\n  obtain⟨k,hk⟩:=orderOf_dvd_iff_pow_eq_one.mpr pow_eq_one\n  rw[L,zero_mul] at hk; tauto    ",
    "informalProof": "Problem : Let $G$ and $H$ be two groups and $f$ be a homomorphism from $G$ to $H$,show that\n$\\forall a\\in G$, $o(f(a))=\\infty$ implies $o(a)=\\infty$.(Here $o(a)$ means order of a.)\nProof \nAssume on the contrary , we need to show $o(a)<\\infty$ but $o(f(a))=\\infty$ cannot happen.\n$(f(a))^{o(a)}=f(a^{o(a)})=f(1)=1$. Then $o(f(a))\\mid o(a)$, which is a contradiction with $o(f(a))=\\infty$."
  },
  {
    "id": 1959,
    "title": "Example_428B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   $S$ is a nonempty set of group $G$, define a relation on $G$ by $a \\sim b$ if and only if $ab^{-1} \\in S$. If $\\sim$ is a equivalence relation, show that $S$ is a subgroup of $G$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "def Task1280 {G : Type*} [Group G] (S : Set G) (ne : S.Nonempty) : (Equivalence (λ (a b : G) => a * b⁻¹ ∈ S)) ↔ IsSubgroup S := by\n  constructor\n  · -- $1 = a * a^{-1} \\in S$\n    intro e\n    let ⟨arbitary,arbelem⟩ := ne\n    have onemem : 1 ∈ S := by\n      have : arbitary * arbitary⁻¹ ∈ S := e.refl arbitary\n      group at this\n      exact this\n    -- $a,b \\in S \\iff a,b \\sim 1 \\implies a \\sim b \\implies a * b^{-1} \\in S$\n    have invmem : ∀ a b : G, a ∈ S → b ∈ S → a * b⁻¹ ∈ S := by\n      intros a b ha hb\n      have as : a * 1⁻¹ ∈ S := by\n        group\n        exact ha\n      have bs : b * 1⁻¹ ∈ S := by\n        group\n        exact hb\n      exact e.trans (as) (e.symm (bs))\n    #check IsSubgroup.of_div\n    exact IsSubgroup.of_div S onemem (λ {a b} ha hb => invmem a b ha hb)\n  · intro s\n    have refl : ∀ a : G, a * a⁻¹ ∈ S := by\n      intro a\n      group\n      exact s.one_mem\n    have symm : ∀ a b : G, a * b⁻¹ ∈ S → b * a⁻¹ ∈ S := by\n      intro a b hab\n      have : b * a⁻¹ = (a * b⁻¹)⁻¹ := by\n        group\n      rw [this]\n      exact s.inv_mem hab\n    -- $(a * c^{-1}) = (a * b^{-1}) * (b * c^{-1}) \\in S$\n    have tran : ∀ a b c : G, a * b⁻¹ ∈ S → b * c⁻¹ ∈ S → a * c⁻¹ ∈ S := by\n      intros a b c hab hbc\n      have : a * c⁻¹ = (a * b⁻¹) * (b * c⁻¹) := by\n        group\n      rw [this]\n      exact s.mul_mem hab hbc\n    exact ⟨refl,(λ {a b} => symm a b),(λ {a b c} => tran a b c)⟩\n",
    "informalProof": "Be aware of:\n$1 = a * a^{-1} \\in S$\n\n$a,b \\in S \\iff a,b \\sim 1 \\implies a \\sim b \\implies a * b^{-1} \\in S$\n\n$(a * c^{-1}) = (a * b^{-1}) * (b * c^{-1}) \\in S$\n\nThe rest is trivial. "
  },
  {
    "id": 1962,
    "title": "Example_4211B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   $R$ is a relation on set $A$, $R^{-1} := \\{ (x,y) ~|~ (y,x) \\in R\\}$, prove that $R$ is transitive if and only if $R^{-1}$ is transitive.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import mathlib\n\n-- Define an example to prove that a relation R on a set A is transitive if and only if its inverse is transitive.\nexample {A : Type} (R : A → A → Prop) : \n  (Transitive R) ↔ (Transitive (λ x y => R y x)) := by\n    constructor\n    -- Prove the forward direction: If R is transitive, then its inverse is also transitive.\n    · intro hR x y z hxy hyz\n      -- Apply the transitivity of R with the assumption that there's a relation from y to z and from x to y.\n      -- This effectively shows that if (y, z) and (x, y) are in R, then (x, z) must be in R, proving the inverse's transitivity.\n      exact hR hyz hxy\n    -- Prove the reverse direction: If the inverse of R is transitive, then R is also transitive.\n    · intro hR x y z hxy hyz\n      -- Apply the transitivity of the inverse of R with the assumption that there's a relation from y to z and from x to y.\n      -- This demonstrates that if (y, z) and (x, y) are in the inverse of R, then (x, z) must be in the inverse of R, proving R's transitivity.\n      exact hR hyz hxy",
    "informalProof": "1. Assume $R$ is transitive. That is, for any $x, y, z \\in A$, if $(x, y) \\in R$ and $(y, z) \\in R$, then $(x, z) \\in R$​.\n\n   To show $R^{-1}$ is transitive, consider any $x, y, z \\in A$ such that $(y, x) \\in R^{-1}$ and $(z, y) \\in R^{-1}$. By definition of $R^{-1}$, this means $(x, y) \\in R$ and $(y, z) \\in R$. Since $R$ is transitive, $(x, z) \\in R$, which implies $(z, x) \\in R^{-1}$. Hence, $R^{-1}$ is transitive.\n\n2. Assume $R^{-1}$ is transitive. That is, for any $x, y, z \\in A$, if $(y, x) \\in R^{-1}$ and $(z, y) \\in R^{-1}$, then $(z, x) \\in R^{-1}$​.\n\n   To show $R$ is transitive, consider any $x, y, z \\in A$ such that $(x, y) \\in R$ and $(y, z) \\in R$. By definition of $R^{-1}$, this means $(y, x) \\in R^{-1}$ and $(z, y) \\in R^{-1}$. Since $R^{-1}$ is transitive, $(z, x) \\in R^{-1}$, which implies $(x, z) \\in R$. Hence, $R$ is transitive."
  },
  {
    "id": 1989,
    "title": "Example_533B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   In any ring $R$ and $a,b\\in R$, if $a b=-b a$, then $(a+b)^{2}=(a-b)^{2}=a^{2}+b^{2}$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} (a b : R) [Ring R] {h : a * b = - (b * a)}: \n(a + b) ^ 2 = a ^ 2 + b ^ 2 ∧ (a - b) ^ 2 = a ^ 2 + b ^ 2  := by\n  constructor\n--$(a+b)^{2}=(a+b)(a+b)=a(a+b)+b(a+b)=aa+ab+ba+bb=aa+(-ba)+ba+bb=aa+bb=a^{2}+b^{2}$\n  calc\n    _= (a + b) * (a + b) := by exact pow_two (a + b)\n    _= a * (a + b) + b * (a + b) := by exact RightDistribClass.right_distrib a b (a + b)\n    _= a * a + a * b + b * a + b * b := by rw [mul_add a a b, mul_add b a b, ← add_assoc]\n    _= a * a + (-(b * a)) + b * a + b * b := by rw [h]\n    _= a * a + b * b := by rw [add_assoc (a * a),neg_add_self (b * a), add_zero]\n    _= a ^ 2 + b ^ 2 := by rw [pow_two a, pow_two b]\n--$(a-b)^{2}=(a-b)(a-b)=a(a-b)-b(a-b)=aa-ab-ba+bb=aa-ab+ab+bb=aa+bb=a^{2}+b^{2}$      \n  calc\n    _= (a - b) * (a - b) := by exact pow_two (a - b) \n    _= a * (a - b) - b * (a - b) := by exact sub_mul a b (a - b) \n    _= a * a - a * b - b * a + b * b := by \n      rw [mul_sub a a b, mul_sub b a b, Eq.symm (sub_add (a * a - a * b) (b * a) (b * b))]\n    _= a * a - a * b + (-(b * a)) + b * b := by \n      apply add_left_cancel (a := -(a * a))\n      simp only [add_right_inj, add_left_inj]\n      exact sub_eq_add_neg (a * a - a * b) (b * a)\n    _= a * a - a * b + (a * b) + b * b := by rw [h]\n    _= a * a + 0 + b * b := by\n      simp only [sub_add_cancel, add_zero]\n    _= a ^ 2 + b ^ 2 := by simp only [add_zero, pow_two]",
    "informalProof": "In any ring $R$ and $a,b\\in R$, if $a b=-b a$, then $(a+b)^{2}=(a-b)^{2}=a^{2}+b^{2}$.  \nProof.  \n    $(a+b)^{2}=(a+b)(a+b)=a(a+b)+b(a+b)=aa+ab+ba+bb=aa+(-ba)+ba+bb=aa+bb=a^{2}+b^{2}$.  \n    $(a-b)^{2}=(a-b)(a-b)=a(a-b)-b(a-b)=aa-ab-ba+bb=aa-ab+ab+bb=aa+bb=a^{2}+b^{2}$"
  },
  {
    "id": 1990,
    "title": "Example_534B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   Let $R$ be a commutative ring, and suppose $a^2=b^3=0$ for some $a, b \\in R$. Show that $(a+b)^4 = 0$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.RingTheory.Ideal.QuotientOperations\nimport Mathlib.RingTheory.Localization.Basic\nimport Mathlib.RingTheory.DedekindDomain.Ideal\nimport Mathlib.Analysis.Complex.Polynomial\nimport Mathlib.Data.ZMod.Quotient\nimport MIL.Common\n\nvariable {R : Type*} [CommRing R] (a b: R)\nexample (h1 : a ^ 2 = 0) (h2 : b ^ 3 = 0) : (a + b) ^ 4 = 0 := by\n  calc\n  _ = a ^ 4 + 4 * a ^ 3 * b + 6 * a ^ 2 * b ^ 2 + 4 * a * b ^ 3 + b ^ 4 := by ring\n  _ = (a ^ 2) ^ 2 + 4 * (a ^ 2) * a * b + 6 * (a ^ 2) * b ^ 2 + 4 * a * (b ^ 3) + (b ^ 3) * b := by ring\n  _ = 0 ^ 2 + 4 * 0 * a * b + 6 * 0 * b ^ 2 + 4 * a * 0 + 0 * b := by rw [h1,h2]\n  _ = _ := by ring\n--It's easy to prove by calculating step by step.\n",
    "informalProof": "We have   \n$$ (a + b) ^ 4 = a ^ 4 + 4 * a ^ 3 * b + 6 * a ^ 2 * b ^ 2 + 4 * a * b ^ 3 + b ^ 4$$  \n$$= (a ^ 2) ^ 2 + 4 * (a ^ 2) * a * b + 6 * (a ^ 2) * b ^ 2 + 4 * a * (b ^ 3) + (b ^ 3) * b$$  \n$$= 0 ^ 2 + 4 * 0 * a * b + 6 * 0 * b ^ 2 + 4 * a * 0 + 0 * b = 0$$  \nBecause $a ^ 2 = 0$ and $b ^ 3 = 0$."
  },
  {
    "id": 1998,
    "title": "Example_5312B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   Let $R$ be a commutative ring. $a,b\\in R$ are nilpotent. Prove that $a+b$ is also nilpotent.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [CommRing  R] (a b : R) {h₁ : IsNilpotent a} {h₂ : IsNilpotent b}: IsNilpotent (a + b) := by\n--$\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.\n--$\\because b$ is nilpotent $\\therefore \\exist m\\in\\mathbb N,s.t. b^{m}=0$.\n  rcases h₁ with ⟨n,hn⟩\n  rcases h₂ with ⟨m,hm⟩\n--By $R$ is a commutative ring $(a + b)^{n+m}=\\sum_{r=0}^{r=n+m}C_{n+m}^{r}a^{r}*b^{n+m-r}$\n  use n + m\n  have h: (a + b) ^ (n + m) = Finset.sum (Finset.range (n + m + 1)) fun r => a ^ r * b ^ (n + m - r) * ↑(Nat.choose (n + m) r) := by\n    apply add_pow a b (n + m)\n--$\\forall t\\ge n,a^{t}=0$\n--$\\forall s\\ge m,b^{s}=0$\n  have h₁: ∀ (t : ℕ), t ≥ n → a ^ t = 0 := by exact fun t a_1 ↦ pow_eq_zero_of_le a_1 hn\n  have h₂: ∀ (s : ℕ), s ≥ m → b ^ s = 0 := by exact fun s a ↦ pow_eq_zero_of_le a hm\n--By $r+(n+m-r)=n+m$ we have $r\\ge n$ or $n+m-r\\ge m$\n  have h₃: ∀ (r : ℕ), r ≥ n ∨ n + m - r ≥ m := by\n    intro r\n    rcases le_or_gt n r with h | h\n    left\n    exact h\n    right\n    have: r  ≤  n := by exact Nat.le_of_succ_le h\n    rw [Nat.sub_add_comm this]\n    exact Nat.le_add_left m (n - r)\n--If $r\\ge n$ then $a^{r}=0$ otherwise $n+m-r\\ge m$ then $b^{n+m-r}=0$\n--and both cases imply that $a^{r}*b^{n+m-r}=0$\n  have h₄: ∀ (r : ℕ), a ^ r * b ^ (n + m - r) = 0 := by\n    intro r\n    rcases h₃ r with h1 | h2\n    rw [h₁]\n    exact zero_mul (b ^ (n + m - r))\n    exact h1\n    rw [h₂]\n    exact CommMonoidWithZero.mul_zero (a ^ r)\n    exact h2\n--Thus $(a+b)^{n+m}=0,i.e.(a+b)$ is nilpotent\n  rw [h]\n  simp only [h₄]\n  apply Finset.sum_eq_zero\n  intro x _\n  norm_cast\n  have: ↑(0 * (n + m).choose x) = 0 := by exact Nat.zero_mul ((n + m).choose x)\n  rw [this]\n  exact AddMonoidWithOne.natCast_zero",
    "informalProof": "Let $R$ be a commutative ring. $a,b\\in R$ are nilpotent. Prove that $a+b$ is also nilpotent.  \nProof.  \n $\\because a$ is nilpotent $\\therefore \\exist n\\in\\mathbb N,s.t. a^{n}=0$.  \n    $\\because b$ is nilpotent $\\therefore \\exist m\\in\\mathbb N,s.t. b^{m}=0$.  \n    By $R$ is a commutative ring $(a + b)^{n+m}=\\sum_{r=0}^{r=n+m}C_{n+m}^{r}a^{r}*b^{n+m-r}$.   \n    $\\forall t\\ge n,a^{t}=0$.  \n    $\\forall s\\ge m,b^{s}=0$.  \n    By $r+(n+m-r)=n+m$ we have $r\\ge n$ or $n+m-r\\ge m$ If $r\\ge n$ then $a^{r}=0$ otherwise $n+m-r\\ge m$.  \n then $b^{n+m-r}=0$ and both cases imply that $a^{r}*b^{n+m-r}=0$.  \n    Thus $(a+b)^{n+m}=0,i.e.(a+b)$ is nilpotent"
  },
  {
    "id": 2008,
    "title": "Example_544B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   Suppose $R$ is an integral domain, show that for two element $r_1,r_2\\in R$, the principal ideals $r_1R=r_2R$ iff there exists $u\\in R^\\times$ s.t. $r_1=ur_2$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\nvariable {R : Type*} [CommRing R] [IsDomain R]\n\nexample (r₁ r₂ : R) : Ideal.span {r₁} = Ideal.span {r₂} ↔ ∃ u : R, IsUnit u ∧ r₁ = u * r₂ := by\n  constructor\n  · intro h\n    -- Suppose $(r_1) = (r_2)$, we start by considering two cases: $r_1 = 0$ and $r_1 \\neq 0$.\n    by_cases zero1 : r₁ = 0\n    · -- In the first case where $r_1 = 0$, we show that $r_1 = 1 \\cdot r_2$.\n      use 1; simp [zero1] at *\n      -- Since $r_1 = 0$, $r_2$ must also generate the zero ideal.\n      rw [Set.singleton_zero, Ideal.span_zero] at h\n      -- Thus, $r_2$ must be zero, and $u = 1$ satisfies the requirement.\n      symm; apply Ideal.span_singleton_eq_bot.mp\n      rw [h]\n    · -- In the second case where $r_1 \\neq 0$, we again consider two sub-cases: $r_2 = 0$ and $r_2 \\neq 0$.\n      by_cases zero2 : r₂ = 0\n      · -- If $r_2 = 0$, a similar argument shows that we can take $u = 1$.\n        use 1; simp [zero2] at *\n        rw [Set.singleton_zero, Ideal.span_zero] at h\n        apply Ideal.span_singleton_eq_bot.mp\n        rw [h]\n      · -- If $r_2 \\neq 0$,\n        -- we use the fact that $r_1$ is in the ideal generated by $r_2$ to express $r_1$ as $u \\cdot r_2$ for some $u$ in $R$.\n        have : r₁ ∈ Ideal.span {r₂} := by\n          rw [← h]\n          exact Ideal.mem_span_singleton_self r₁\n        rcases (Ideal.mem_span_singleton'.mp this) with ⟨u, equ⟩\n        -- Similarly, $r_2$ is in the ideal generated by $r_1$, allowing us to express $r_2$ as $v \\cdot r_1$ for some $v$ in $R$.\n        have : r₂ ∈ Ideal.span {r₁} := by\n          rw [h]\n          exact Ideal.mem_span_singleton_self r₂\n        rcases (Ideal.mem_span_singleton'.mp this) with ⟨v, eqv⟩\n        -- We then show that $u$ is a unit satifying the requirement.\n        use u; constructor\n        · -- First we show $u$ is indeed a unit by demonstrating that $u \\cdot v = 1 = v \\cdot u$,\n          apply isUnit_iff_exists.mpr\n          use v; constructor\n          · have equv : (u * v - 1) * r₁ = 0 := by rw [sub_mul, one_mul,  mul_assoc, eqv, equ, sub_self]\n            simp [zero1] at equv\n            rw [← zero_add 1, eq_add_of_sub_eq equv]\n          · have eqvu : (v * u - 1) * r₂ = 0 := by rw [sub_mul, one_mul,  mul_assoc, equ, eqv, sub_self]\n            simp [zero2] at eqvu\n            rw [← zero_add 1, eq_add_of_sub_eq eqvu]\n        · -- and the equation $r_1 = u \\cdot r_2$ is already proven.\n          rw [equ]\n  · -- If there exists a unit $u$ such that $r_1 = u \\cdot r_2$,\n    rintro ⟨u, u_unit, eq⟩\n    -- we have $(r_1) = (u \\cdot r_2) = (r_2)$.\n    rw [eq]\n    apply Ideal.span_singleton_mul_left_unit u_unit r₂",
    "informalProof": "Proof:\n1. Suppose $(r_1) = (r_2)$, We start by considering two cases: $r_1 = 0$ and $r_1 \\neq 0$.\n2. In the first case where $r_1 = 0$, we show that $r_1 = 1 \\cdot r_2$.\n3. Since $r_1 = 0$, $r_2$ must also generate the zero ideal.\n4. Thus, $r_2$ must be zero, and $u = 1$ satisfies the requirement.\n5. In the second case where $r_1 \\neq 0$, we again consider two sub-cases: $r_2 = 0$ and $r_2 \\neq 0$.\n6. If $r_2 = 0$, a similar argument shows that we can take $u = 1$.\n7. If $r_2 \\neq 0$, we use the fact that $r_1$ is in the ideal generated by $r_2$ to express $r_1$ as $u \\cdot r_2$ for some $u$ in $R$.\n8. Similarly, $r_2$ is in the ideal generated by $r_1$, allowing us to express $r_2$ as $v \\cdot r_1$ for some $v$ in $R$.\n9. We then show that $u$ is a unit satifying the requirement.\n10. First we show $u$ is indeed a unit by demonstrating that $u \\cdot v = 1 = v \\cdot u$,\n11. and the equation $r_1 = u \\cdot r_2$ is already proven.\n12. If there exists a unit $u$ such that $r_1 = u \\cdot r_2$, we have $(r_1) = (u \\cdot r_2) = (r_2)$."
  },
  {
    "id": 2024,
    "title": "Example_554B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "   Let $R_1$ be a commutative ring with identity $1$ and $R_2$ be an integral domain. Let $f: R_1 \\rightarrow R_2$ be a ring homomorphism, prove that $\\operatorname{Ker}(f)$ is a prime ideal in $R_1$.  ",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R R' F: Type*} [CommRing R] [CommRing R'] [IsDomain R'] [FunLike F R R']\n  [rcf : RingHomClass F R R'] (f : F): Ideal.IsPrime (RingHom.ker f) := by\n    constructor  \n  --Step 1: $\\operatorname{Ker}(f)\\ne R_1$ By $f(1_{R_{1}})=1_{R_{2}}$. \n  --Thus $1_{R_{1}}\\notin\\operatorname{Ker}(f)$  \n    intro h \n    have h₁: 1 ∈ RingHom.ker f := by exact (Ideal.eq_top_iff_one (RingHom.ker f)).mp h\n    have h₂: 1 ∉ RingHom.ker f := by exact RingHom.not_one_mem_ker f \n    apply h₂ h₁\n  --Step 2: $\\forall xy\\in\\operatorname{Ker}(f)$ \n  --we have $x\\in\\operatorname{Ker}(f)$ or $y\\in\\operatorname{Ker}(f)$  \n  --By $xy\\in\\operatorname{Ker}(f),f(x)*f(y)=f(xy)=0,\\because$ $R_2$ is an integral domain \n    intro x y h\n    have h₃: f (x * y) = 0 := by exact h \n    have h₄: f x * f y = 0 := by \n      rw [← MulHomClass.map_mul f x y]\n      exact h₃\n  --$\\therefore f(x)=0$ or $f(y)=0,\n  --i.e.  x\\in\\operatorname{Ker}(f)$ or $y\\in\\operatorname{Ker}(f)$    \n    have h₅: f x = 0 ∨ f y = 0 := by exact mul_eq_zero.mp h₄ \n    rcases h₅ with h1 | h2\n    left\n    exact h1 \n    right\n    exact h2 ",
    "informalProof": "Let $R_1$ be a commutative ring with identity $1$ and $R_2$ be an integral domain. Let $f: R_1 \\rightarrow R_2$ be a ring homomorphism, prove that $\\operatorname{Ker}(f)$ is a prime ideal in $R_1$.  \nProof.  \n    Step 1: $\\operatorname{Ker}(f)\\ne R_1$ By $f(1_{R_{1}})=1_{R_{2}}$.  \n Thus $1_{R_{1}}\\notin\\operatorname{Ker}(f)$.  \n    Step 2: $\\forall xy\\in\\operatorname{Ker}(f)$ we have $x\\in\\operatorname{Ker}(f)$ or $y\\in\\operatorname{Ker}(f)$.  \n By $xy\\in\\operatorname{Ker}(f),f(x)*f(y)=f(xy)=0$.  \n$\\because$ $R_2$ is an integral domain.  \n $\\therefore f(x)=0$ or $f(y)=0,i.e.  x\\in\\operatorname{Ker}(f)$ or $y\\in\\operatorname{Ker}(f)$"
  },
  {
    "id": 2060,
    "title": "UnexploredExercise_20",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.12.4. 设 $a, b$ 是群 $G$ 的任意两个元. 如果 $a, b$ 和它们的换位子 $[a, b]$ 可交换, 则对任意整数 $m$ 和 $n,\\left[a^{m}, b^{n}\\right]=[a, b]^{m n}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n\nexample {G : Type*} [Group G] (a b : G) (ha : a * (a * b * a⁻¹ * b⁻¹)= (a * b * a⁻¹ * b⁻¹) * a)\n  (hb : b * (a * b * a⁻¹ * b⁻¹)= (a * b * a⁻¹ * b⁻¹) * b) : ∀ m n : ℕ, a ^ m * b ^ n * a⁻¹ ^ (m) * b⁻¹ ^ (n) = (a * b * a⁻¹ * b⁻¹) ^ (m * n)  := by\n  intro m n\n  --First, we prove that for all m, a * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * a.\n  have ha1 :∀ m : ℕ, a * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * a := by\n    intro m\n    --This can be simply shown by induction and ha : a * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) * a * (a * b * a⁻¹ * b⁻¹) ^ (m - 1) = ... = (a * b * a⁻¹ * b⁻¹) ^ m * a.\n    induction' m with m1 ih1\n    · simp only [pow_zero, mul_one, one_mul]\n    · rw [pow_add, ← mul_assoc, ih1, pow_one, mul_assoc, ha, ← mul_assoc]\n  --Then we prove that for all m, b * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * b.\n  have hb1 :∀ m : ℕ, b * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * b := by\n    intro m\n    --Samely, it can be simply shown by induction and hb : b * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) * b * (a * b * a⁻¹ * b⁻¹) ^ (m - 1) = ... = (a * b * a⁻¹ * b⁻¹) ^ m * b.\n    induction' m with m1 ih1\n    · simp only [pow_zero, mul_one, one_mul]\n    · rw [pow_add, ← mul_assoc, ih1, pow_one, mul_assoc, hb, ← mul_assoc]\n  --We prove that when n = 1, a ^ (m) * b  * a⁻¹ ^ (m) * b⁻¹  = (a * b * a⁻¹ * b⁻¹) ^ m.\n  have n_1 : ∀ m : ℕ, a ^ (m) * b  * a⁻¹ ^ (m) * b⁻¹  = (a * b * a⁻¹ * b⁻¹) ^ m := by\n    intro m\n    --We prove this by induction.\n    induction' m with k ih\n    --When n = 0 ,it's obvious.\n    · simp only [pow_zero, one_mul, mul_one, mul_right_inv]\n    --When n ≠ 0, we have a ^ (k + 1) * b * a⁻¹ ^ (k + 1) * b⁻¹ = a * (a ^ k * b * a⁻¹ ^ k * a⁻¹ ^ 1) * b⁻¹.\n    · rw [add_comm, pow_add, add_comm, pow_add]\n      --Notice that a ^ k * b * a⁻¹ ^ k = (a * b * a⁻¹ * b⁻¹) ^ k * b by our assumption.\n      rw [← mul_one ((a * b * a⁻¹ * b⁻¹) ^ k), ← mul_right_inv b, ← mul_assoc] at ih\n      apply mul_right_cancel at ih\n      obtain hak := ha1 (k)\n      --We have a * (a ^ k * b * a⁻¹ ^ k * a⁻¹ ^ 1) * b⁻¹ = a * (a * b * a⁻¹ * b⁻¹) ^ k * b * a⁻¹ ^ 1 * b⁻¹ = (a * b * a⁻¹ * b⁻¹) ^ k * (a * b * a⁻¹ * b⁻¹)= (a * b * a⁻¹ * b⁻¹) ^ (k + 1).\n      rw [pow_one, mul_assoc a, mul_assoc a, ← mul_assoc (a^k*b), ih, ←mul_assoc, ←mul_assoc, hak, pow_one, pow_add, pow_one, ← mul_assoc,← mul_assoc, ←mul_assoc]\n  --Finallyvwe prove the mean goal by induction.\n  induction' n with n ih generalizing m\n  --When n = 0 ,it's obvious.\n  · simp only [pow_zero, mul_one, inv_pow, mul_right_inv, mul_zero]\n  --When n ≠ 0, we have a ^ m * b ^ (n + 1) * a⁻¹ ^ m * b⁻¹ ^ (n + 1) = a ^ m * b * (a ^ m)⁻¹ * (a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n) * b⁻¹.\n  · rw [add_comm, pow_add b, pow_one, add_comm, pow_add, pow_one]\n    nth_rw 1 [← mul_one b]\n    --Notice that a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n = (a * b * a⁻¹ * b⁻¹) ^ (m * n) by assumption.\n    specialize ih m\n    --We have a ^ m * b * (a ^ m)⁻¹ * (a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n) * b⁻¹ = a ^ m * b * (a ^ m)⁻¹ * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹.\n    rw [← mul_assoc (a ^ m), ← mul_assoc (a ^ m), ← mul_left_inv (a ^ m), ← mul_assoc, ← mul_assoc, mul_assoc (a ^ m * b * (a ^ m)⁻¹),\n      mul_assoc (a ^ m * b * (a ^ m)⁻¹), mul_assoc (a ^ m * b * (a ^ m)⁻¹), ih]\n    --We also have a ^ m * b * a⁻¹ ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * b by the lemma we have proved.\n    specialize n_1 m\n    rw [← mul_one ((a * b * a⁻¹ * b⁻¹) ^ m), ← mul_right_inv b, ← mul_assoc] at n_1\n    apply mul_right_cancel at n_1\n    specialize hb1 (m*n)\n    --So a ^ m * b * (a ^ m)⁻¹ * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹ = (a * b * a⁻¹ * b⁻¹) ^ m * b * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹ =(a * b * a⁻¹ * b⁻¹) ^ m * ((a * b * a⁻¹ * b⁻¹) ^ (m * n) * (b * b⁻¹))\n    -- = (a * b * a⁻¹ * b⁻¹) ^ (m * (n + 1)).\n    rw [← inv_pow, n_1, mul_assoc ((a * b * a⁻¹ * b⁻¹) ^ m), hb1, mul_assoc, mul_assoc ((a * b * a⁻¹ * b⁻¹) ^ (m * n)), mul_right_inv,\n      mul_one, ← pow_add]\n    nth_rw 1 [← mul_one m]\n    rw [← mul_add, add_comm]\n",
    "informalProof": "Proof  \r\n1. First, we prove that for all m, a * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * a.\r\n2. This can be simply shown by induction and ha : a * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) * a * (a * b * a⁻¹ * b⁻¹) ^ (m - 1) = ... = (a * b * a⁻¹ * b⁻¹) ^ m * a.\r\n3. Then we prove that for all m, b * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * b.\r\n4. Samely, it can be simply shown by induction and hb : b * (a * b * a⁻¹ * b⁻¹) ^ m = (a * b * a⁻¹ * b⁻¹) * b * (a * b * a⁻¹ * b⁻¹) ^ (m - 1) = ... = (a * b * a⁻¹ * b⁻¹) ^ m * b.\r\n5. We prove that when n = 1, a ^ (m) * b  * a⁻¹ ^ (m) * b⁻¹  = (a * b * a⁻¹ * b⁻¹) ^ m.\r\n6. We prove this by induction.\r\n7. When n = 0 ,it's obvious.\r\n8. When n ≠ 0, we have a ^ (k + 1) * b * a⁻¹ ^ (k + 1) * b⁻¹ = a * (a ^ k * b * a⁻¹ ^ k * a⁻¹ ^ 1) * b⁻¹.\r\n9. Notice that a ^ k * b * a⁻¹ ^ k = (a * b * a⁻¹ * b⁻¹) ^ k * b by our assumption.\r\n10. We have a * (a ^ k * b * a⁻¹ ^ k * a⁻¹ ^ 1) * b⁻¹ = a * (a * b * a⁻¹ * b⁻¹) ^ k * b * a⁻¹ ^ 1 * b⁻¹ = (a * b * a⁻¹ * b⁻¹) ^ k * (a * b * a⁻¹ * b⁻¹)= (a * b * a⁻¹ * b⁻¹) ^ (k + 1).\r\n11. Finallyvwe prove the mean goal by induction.\r\n12. When n = 0 ,it's obvious.\r\n13. When n ≠ 0, we have a ^ m * b ^ (n + 1) * a⁻¹ ^ m * b⁻¹ ^ (n + 1) = a ^ m * b * (a ^ m)⁻¹ * (a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n) * b⁻¹.\r\n14. Notice that a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n = (a * b * a⁻¹ * b⁻¹) ^ (m * n) by assumption.\r\n15. We have a ^ m * b * (a ^ m)⁻¹ * (a ^ m * b ^ n * a⁻¹ ^ m * b⁻¹ ^ n) * b⁻¹ = a ^ m * b * (a ^ m)⁻¹ * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹.\r\n16. We also have a ^ m * b * a⁻¹ ^ m = (a * b * a⁻¹ * b⁻¹) ^ m * b by the lemma we have proved.\r\n17. So a ^ m * b * (a ^ m)⁻¹ * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹ = (a * b * a⁻¹ * b⁻¹) ^ m * b * (a * b * a⁻¹ * b⁻¹) ^ (m * n) * b⁻¹ =(a * b * a⁻¹ * b⁻¹) ^ m * ((a * b * a⁻¹ * b⁻¹) ^ (m * n) * (b * b⁻¹)) = (a * b * a⁻¹ * b⁻¹) ^ (m * (n + 1))."
  },
  {
    "id": 2064,
    "title": "UnexploredExercise_24",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.12.13. 设 $\\alpha$ 是群 $G$ 的一个自同构. 如果对任意 $g \\in G, g^{-1} \\alpha(g) \\in Z(G)$,则对导群 $G^{\\prime}$ 的任意元 $a, \\alpha(a)=a$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {G : Type*}[Group G](α : G ≃* G)\n\nexample (h : ∀ g, g⁻¹ * α g ∈ Subgroup.center G) : ∀ a ∈ commutator G, α a = a := by\n  -- We need to prove that for any $a \\in G'$, $\\alpha(a) = a$.\n  unfold commutator\n  rw [Subgroup.commutator_def]\n  simp only [Subgroup.mem_top, true_and]\n  let p : G → Prop := fun a => α a = a\n  intro a ha\n  show p a\n  apply Subgroup.closure_induction\n  -- Consider $a \\in G'$, where $G'$ is the derived subgroup of $G$, defined as the closure of the set of all commutators of $G$.\n  · apply ha\n  -- First, consider the basic form of commutators $⁅g_1, g_2⁆ = g_1 g_2 g_1^{-1} g_2^{-1}$.\n  · intro x hx\n    simp only [Set.mem_setOf_eq] at hx\n    rcases hx with ⟨g1, g2, feq⟩\n    have : ⁅g1, g2⁆ = g1 * g2 * g1⁻¹ * g2⁻¹ := by exact rfl\n    simp only [← feq, p, this]\n    -- Using the properties of $\\alpha$ and the given condition $g^{-1} \\alpha(g) \\in Z(G)$, we can derive $g_2^{-1} g_1^{-1} \\alpha(g_1 g_2 g_1^{-1} g_2^{-1}) = 1$.\n    have : g2⁻¹⁻¹ * g1⁻¹⁻¹ * g2⁻¹ * g1⁻¹ * α (g1 * g2 * g1⁻¹ * g2⁻¹) = 1 := by\n      calc\n        _ = g2⁻¹⁻¹ * g1⁻¹⁻¹ * (g2⁻¹ * (g1⁻¹ * α g1)) * α g2 * α g1⁻¹ * α g2⁻¹ := by simp only [inv_inv, map_mul, map_inv]; group\n        _ = g2⁻¹⁻¹ * g1⁻¹⁻¹ * (g1⁻¹ * α g1) * g2⁻¹ * α g2 * α g1⁻¹ * α g2⁻¹ := by\n          have : g2⁻¹ * (g1⁻¹ * α g1) = (g1⁻¹ * α g1) * g2⁻¹ := by\n            have : g1⁻¹ * α g1 ∈ Subgroup.center G := by apply h g1\n            exact Eq.symm ((h g1).comm g2⁻¹)\n          rw [this]; group\n        _ = g2⁻¹⁻¹ * g1⁻¹⁻¹ * (g1⁻¹ * α g1) * ((g2⁻¹ * α g2) * α g1⁻¹) * α g2⁻¹ := by group\n        _ = g2⁻¹⁻¹ * g1⁻¹⁻¹ * (g1⁻¹ * α g1) * α g1⁻¹ * (g2⁻¹ * α g2) * α g2⁻¹ := by\n          have : (g2⁻¹ * α g2) * α g1⁻¹ = α g1⁻¹ * (g2⁻¹ * α g2) := by\n            have : g2⁻¹ * α g2 ∈ Subgroup.center G := by apply h g2\n            exact (h g2).comm (α g1⁻¹)\n          rw [this]; group\n        _ = _ := by simp only [inv_inv, map_inv]; group\n    apply Eq.symm\n    -- Therefore, we have $g_1 g_2 g_1^{-1} g_2^{-1} = \\alpha(g_1 g_2 g_1^{-1} g_2^{-1})$，i.e., $\\alpha(⁅g_1, g_2⁆) = ⁅g_1, g_2⁆$.\n    calc\n      _ = g1 * g2 * g1⁻¹ * g2⁻¹ * 1 := by group\n      _ = _ := by rw [← this]; group\n  · exact MulEquiv.map_one α\n  -- Since $G'$ is generated by the set of all commutators, we have $\\alpha(a) = a$ for any $a \\in G'$.\n  · intro x y hx hy\n    show α (x * y) = x * y\n    calc\n       _ = α x * α y := by simp only [map_mul]\n       _ = _ := by rw [hx, hy]\n  · intro x hx\n    show α x⁻¹ = x⁻¹\n    calc\n     _ = (α x)⁻¹ := by simp only [map_inv]\n     _ = _ := by rw [hx]",
    "informalProof": "Proof:\n1. Let $G$ be a group and $\\alpha$ be an automorphism of $G$. If for any $g \\in G$, we have $g^{-1} \\alpha(g) \\in Z(G)$, then for any element $a$ of the derived subgroup $G'$, we have $\\alpha(a) = a$.\n2. We need to prove that for any $a \\in G'$, $\\alpha(a) = a$.\n3. Consider $a \\in G'$, where $G'$ is the derived subgroup of $G$, defined as the closure of the set of all commutators of $G$.\n4. For $a \\in G'$, we use $p(a) : \\alpha(a) = a$ as the proof goal.\n5. First, consider the basic form of commutators $⁅g_1, g_2⁆ = g_1 g_2 g_1^{-1} g_2^{-1}$.\n6. Suppose $g_1, g_2 \\in G$, we need to prove $\\alpha(⁅g_1, g_2⁆) = ⁅g_1, g_2⁆$.\n7. Using the properties of $\\alpha$ and the given condition $g^{-1} \\alpha(g) \\in Z(G)$, we can derive $g_2^{-1} g_1^{-1} \\alpha(g_1 g_2 g_1^{-1} g_2^{-1}) = 1$.\n8. Therefore, we have $g_1 g_2 g_1^{-1} g_2^{-1} = \\alpha(g_1 g_2 g_1^{-1} g_2^{-1})$, i.e., $\\alpha(⁅g_1, g_2⁆) = ⁅g_1, g_2⁆$.\n9. Since $G'$ is generated by the set of all commutators, we have $\\alpha(a) = a$ for any $a \\in G'$."
  },
  {
    "id": 2067,
    "title": "UnexploredExercise_27",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.3.8. 设 $A$ 和 $B$ 是有限群 $G$ 的两个非空子集. 若 $|A|+|B|>|G|$, 则 $G=A B \\text {. }$",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {G : Type*} [Group G] [Finite G] (A B : Set G) [ha : Nonempty A] [hb : Nonempty B]\n\nexample (h : A.ncard + B.ncard > (⊤ : Set G).ncard) : (⊤ : Set G) = {g | ∃ a ∈ A, ∃ b ∈ B, g = a * b} := by\n  -- We need to prove that for two non-empty subsets $A$ and $B$ of a finite group $G$, if $\\|A\\| + \\|B\\| > \\|G\\|$, then $G = AB$.\n  ext g\n  constructor\n  · intro hg\n    -- Assume $\\|A\\| + \\|B\\| > \\|G\\|$. We need to prove that for any $g \\in G$, there exist $a \\in A$ and $b \\in B$ such that $g = a \\cdot b$.\n    let A' (g : G) := {a⁻¹ * g | a ∈ A}\n    let fa (g : G) := fun a => a⁻¹ * g\n    -- Define a function $fa(g) : a \\mapsto a^{-1} \\cdot g$. This function is injective because if $fa(g)(a_1) = fa(g)(a_2)$, then $a_1 = a_2$.\n    have hinj : Function.Injective (fa g) := by\n      intro a₁ a₂ hfeq\n      simp only [mul_left_inj, inv_inj, fa] at hfeq\n      exact hfeq\n    have : (fa g) '' A = A' g := by\n      exact rfl\n    have : (A' g).ncard = A.ncard := by\n      rw [← this]\n      apply Set.ncard_image_of_injective\n      apply hinj\n    -- Therefore, $A'(g)$ has the same size as $A$, i.e., $\\|A'(g)\\| = \\|A\\|$.\n    rw [← this] at h\n    -- Since $\\|A\\| + \\|B\\| > \\|G\\|$, $A'(g)$ and $B$ must have a common element, i.e., there exist $b \\in B$ and $a \\in A$ such that $b = a^{-1} \\cdot g$.\n    have : ∃ b, b ∈ B ⊓ A' g := by\n      refine Set.not_disjoint_iff.mp ?_\n      by_contra hdis\n      have h1 : (B ∪ A' g).ncard = B.ncard + (A' g).ncard := by\n        apply @Set.ncard_union_eq G B (A' g) hdis (Set.toFinite B) (Set.toFinite (A' g))\n      have h2 : (B ∪ A' g).ncard ≤ (⊤:Set G).ncard := by\n        apply Set.ncard_le_ncard (fun ⦃a⦄ _ => hg) (Set.toFinite ⊤)\n      rw [h1] at h2\n      linarith\n    rcases this with ⟨b, ⟨hb1, hb2⟩⟩\n    simp only [Set.mem_setOf_eq]\n    rcases hb2 with ⟨a, ⟨ha, heq⟩⟩\n    -- Therefore, $g = a \\cdot b$, proving that $G = AB$.\n    use a\n    constructor\n    · apply ha\n    · use b\n      constructor\n      · apply hb1\n      · simp only [← heq, mul_inv_cancel_left]\n  · intro hg\n    rcases hg with ⟨a, ⟨_, b, ⟨_, _⟩⟩⟩\n    exact trivial\n",
    "informalProof": "Proof:\n1. We need to prove that for two non-empty subsets $A$ and $B$ of a finite group $G$, if $\\|A\\| + \\|B\\| > \\|G\\|$, then $G = AB$.\n2. Assume $\\|A\\| + \\|B\\| > \\|G\\|$. We need to prove that for any $g \\in G$, there exist $a \\in A$ and $b \\in B$ such that $g = a \\cdot b$.\n3. Consider the set $A'(g) = \\{a^{-1} \\cdot g \\mid a \\in A\\}$. This set is obtained by right-multiplying $g$ with the inverses of elements in $A$.\n4. Define a function $fa(g) : a \\mapsto a^{-1} \\cdot g$. This function is injective because if $fa(g)(a_1) = fa(g)(a_2)$, then $a_1 = a_2$.\n5. Therefore, $A'(g)$ has the same size as $A$, i.e., $\\|A'(g)\\| = \\|A\\|$.\n6. Since $\\|A\\| + \\|B\\| > \\|G\\|$, $A'(g)$ and $B$ must have a common element, i.e., there exist $b \\in B$ and $a \\in A$ such that $b = a^{-1} \\cdot g$.\n7. Therefore, $g = a \\cdot b$, proving that $G = AB$."
  },
  {
    "id": 2079,
    "title": "UnexploredExercise_39",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.4.10*. 有理数加法群 $\\mathbb{Q}$ 不是循环群.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n\n--First we prove that for ℚ is not cyclic by contradiction.\nexample : ¬(IsAddCyclic ℚ):= by\n  intro h\n  --If ℚ is cyclic, we have an element g ∈ ℚ, and for all x ∈ ℚ,we have x is a power of g.\n  rcases h with ⟨g, hg⟩\n  --But consider g/2 ∈ ℚ.\n  let hg' :=  hg (g/2)\n  rcases hg' with ⟨k, hk⟩\n  simp only at hk\n  --We have g * 1/2 = g/2. But 1/2 ∉ ℤ.\n  have :  (2 : ℤ) • (g/2) = g := by\n    rw [two_zsmul]\n    rw [add_halves]\n  nth_rw 1 [← this] at hk\n  rw [← mul_zsmul'] at hk\n  simp only [zsmul_eq_mul, Int.cast_mul, Int.cast_ofNat] at hk\n  nth_rw 2 [← one_mul (g/2)] at hk\n  by_cases h : g = 0\n  · simp only [h, smul_zero] at hg\n    obtain ⟨a, ha⟩  := hg 1\n    simp at ha\n  apply mul_right_cancel₀ at hk\n  have even : Even (2 * k) := by\n    exact even_two_mul k\n  have odd : Odd (1 : ℚ) := by exact odd_one\n  have hk' : 2 * k = 1 := by\n    have : 2 * (↑k : ℚ) = ↑(2 * k) := by\n      refine Rat.ext ?_ ?_\n      · simp only [Int.cast_mul, Int.cast_ofNat]\n      · simp only [Int.cast_mul, Int.cast_ofNat]\n    rw [this] at hk\n    apply Int.cast_eq_one.mp hk\n  rw [←hk] at odd\n  contrapose! even\n  refine Int.not_even_iff_odd.mpr ?mk.intro.intro.a\n  rw [hk']\n  exact Int.odd_iff.mpr rfl\n  simp [h]",
    "informalProof": "Proof  \r\nThe first problem is to prove that the additive group of rational numbers is not cyclic.\r\n1. First we prove that for ℚ is not cyclic by contradiction.\r\n2. If ℚ is cyclic, we have an element g ∈ ℚ, and for all x ∈ ℚ,we have x is a power of g.\r\n3. But consider g/2 ∈ ℚ.\r\n4. We have g * 1/2 = g/2. But 1/2 ∉ ℤ.  \r\n\r\nThe second problem is to prove that each finite generated subgroup of ℚ is cyclic.\r\n1. First we prove that for n,q∈ $\\N$, p ∈ ℤ, the denominator of (n * p/q) is gcd (n, q).\r\n2. If n is zero, it is trival.\r\n3. If n $\\neq$ 0, we have gcd (n, q) $\\neq$ 0 by definition.\r\n4. And we want to show q/(gcd (|n*p|, q)) =q / gcd(n, q).\r\n5. Then we simply show that (gcd n q) * (q / gcd n q) = q, which is obvious.\r\n6. For finite set$\\ Q\\ set$ of $\\mathbb{Q}$, we can find a Znum that turn $\\ Q\\ set$ into $\\ Z\\ set$.\r\n7. We can prove that it is same with $\\ Q\\ set$ generator $\\ Q\\ group$ that can turn into $\\ Z\\ group$.\r\n8. we should prove $\\ Q\\ group$ into $\\ Z\\ group$.\r\n9. we should prove that it is not trival.\r\n10. Due to the lemma, we can turn it into a $\\ Z\\ group$\r\n11. We can find that $\\ Z\\ group$ is $Addsubgroup \\ \\Z$, we can find a lemma that it is cyclic.\r\n12. We just verifity the function between $\\ Q\\ set$ and $\\ Z\\ set$ is homomorphism and surjective to $\\ Q\\ set$."
  },
  {
    "id": 2179,
    "title": "UnexploredExercise_139",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.9.4. 设 $G=G_{1} \\times G_{2}, H \\triangleleft G$ 且 $H \\cap G_{i}=\\{1\\}, i=1,2$. 试证 $H \\leqslant Z(G)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Classical\n\nvariable (G₁ G₂ : Type*) [Group G₁] [Group G₂] (H : Subgroup (G₁ × G₂)) (H_Normal : H.Normal) (h₁ : H ⊓ (Subgroup.prod ⊤ ⊥) = ⊥) (h₂ : H ⊓ (Subgroup.prod ⊥ ⊤) = ⊥)\n\ntheorem H_in_center : H ≤ Subgroup.center (G₁ × G₂) := by\n  -- Assume $h \\in H$,\n  intro h hH\n  -- we need to show that $h$ commutes with any element $g$ in $G_1 \\times G_2$,\n  apply Subgroup.mem_center_iff.mpr; intro g\n  -- which is to show $g h g^{-1} = h$.\n  suffices g * h * g⁻¹ = h from by rw [← mul_one (g * h), ← inv_mul_self g, ← mul_assoc, this]\n  -- Suppose $g = (g_1, g_2)$ and we prove it component-wise.\n  ext <;> simp\n  · -- For the first component, let $h' := (g_1, 1) \\cdot h \\cdot (g_1, 1)$\n    set h' := (g.1, 1) * h * (g.1, 1)⁻¹ with eq\n    -- and it suffices to show $h' = h$.\n    suffices h' = h from by simp [eq, Prod.mul_def] at this; symm; apply Prod.fst_eq_iff.mpr this.symm\n    have : h' * h⁻¹ = 1 := by\n      -- We do this by showing $h' h^{-1} \\in H \\cap G_1$.\n      apply Subgroup.mem_bot.mp\n      rw [← h₁]; apply Subgroup.mem_inf.mpr; constructor\n      -- Since $H$ is normal, $h' \\in H$, thus $h' h^{-1} \\in H$,\n      apply Subgroup.mul_mem H (Subgroup.Normal.conj_mem H_Normal h hH _) (Subgroup.inv_mem H hH)\n      -- and by simple computation we know $h' h^{-1} = (\\cdots, 1) \\in G_1$.\n      apply Subgroup.mem_prod.mpr ⟨Subgroup.mem_top _, ?_⟩\n      -- Hence $h' h^{-1}$ is indeed in $H \\cap G_1$, giving $h' h^{-1} = 1$.\n      apply Subgroup.mem_bot.mpr; simp [eq]\n    -- Therefore $h' = h$ and we prove the first statement.\n    rw [← mul_one h', ← inv_mul_self h, ← mul_assoc, this, one_mul]\n  · -- The proof for the second component is similar.\n    set h' := (1, g.2) * h * (1, g.2)⁻¹ with eq\n    suffices h' = h from by simp [eq, Prod.mul_def] at this; symm; apply Prod.snd_eq_iff.mpr this.symm\n    have : h' * h⁻¹ = 1 := by\n      apply Subgroup.mem_bot.mp\n      rw [← h₂]; apply Subgroup.mem_inf.mpr; constructor\n      apply Subgroup.mul_mem H (Subgroup.Normal.conj_mem H_Normal h hH _) (Subgroup.inv_mem H hH)\n      apply Subgroup.mem_prod.mpr ⟨?_, Subgroup.mem_top _⟩\n      apply Subgroup.mem_bot.mpr; simp [eq]\n    rw [← mul_one h', ← inv_mul_self h, ← mul_assoc, this, one_mul]\n",
    "informalProof": "Theorem: If $H \\unlhd G = G_1 \\times G_2$ and $H \\cap G_1 = 1 = H \\cap G_2$, then $H \\le Z(G)$.\nProof:\n1. Assume $h \\in H$, we need to show that $h$ commutes with any element $g$ in $G_1 \\times G_2$, which is to show $g h g^{-1} = h$.\n2. Suppose $g = (g_1, g_2)$ and we prove it component-wise.\n3. For the first component, let $h' := (g_1, 1) \\cdot h \\cdot (g_1, 1)$, and it suffices to show $h' = h$.\n4. We do this by showing $h' h^{-1} \\in H \\cap G_1$.\n5. Since $H$ is normal, $h' \\in H$, thus $h' h^{-1} \\in H$, and by simple computation we know $h' h^{-1} = (\\cdots, 1) \\in G_1$.\n6. Hence $h' h^{-1}$ is indeed in $H \\cap G_1$, giving $h' h^{-1} = 1$.\n7. Therefore $h' = h$ and we prove the first statement.\n8. The proof for the second component is similar.\n\nCorollary: $H$ is abelian.\nProof:\n1. This follows directly from $H \\le Z(G)$."
  },
  {
    "id": 2180,
    "title": "UnexploredExercise_140",
    "lean_difficulty": "hard",
    "math_difficulty": "hard",
    "md": "1.7.1. 设 $G$ 作用在集合 $S$ 上, 对任意 $a, b \\in S$, 若存在 $g \\in G$ 使得 $g a=b$,则 $G_{a}=g^{-1} G_{b} g$. 换句话说, 同一轨道中元的固定子群彼此共轭.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\n1.7.1. 设 $G$ 作用在集合 $S$ 上, 对任意 $a, b \\in S$, 若存在 $g \\in G$ 使得 $g a=b$,则 $G_{a}=g^{-1} G_{b} g$. 换句话说, 同一轨道中元的固定子群彼此共轭.\n-/\nexample (G : Type*) [Group G] (S : Type*) [MulAction G S] (a b : S) (g : G) (h : g • a = b) : (MulAction.stabilizer G a) = Subgroup.map (MulAut.conj (G := G) g⁻¹) (MulAction.stabilizer G b) := by \n  --Let $x$ be an element in $G$.\n  refine Subgroup.ext ?h\n  intro x \n  constructor\n  --Firstly, if $x$ is in the stabilizer of $a$.\n  simp only [map_inv, Subgroup.mem_map, MonoidHom.coe_coe, MulAut.conj_inv_apply]\n  intro h1\n  simp at h1\n  --We have $g * x * g⁻¹$ is a stabilizer of $b$ by definition.  \n  have h1 : g * x * g⁻¹ ∈ MulAction.stabilizer G b :=by\n    simp only [MulAction.mem_stabilizer_iff]\n    rw[← h, mul_smul, inv_smul_smul, mul_smul, h1]\n  --Note that $x$ is the conjugation of $g * x * g⁻¹$ by $g⁻¹$, thus we have $x$ is an elelment in $g^{-1} G_{b} g$.\n  use g * x * g⁻¹ \n  simp only [h1, true_and]\n  rw[← mul_assoc,← mul_assoc,inv_mul_cancel_right,mul_left_inv, one_mul]\n  --Conversely, if $x$ belongs to $g^{-1} G_{b} g$. \n  intro hx\n  --Then we have $x • a = a = (g⁻¹ * g * x * g⁻¹ * g) • a = (g⁻¹) • (g * x * g⁻¹) •b = (g⁻¹) • b = a$, thus $x$ belongs to the stabilizer of $a$.\n  have : x • a = a :=by\n    calc \n      _= (g⁻¹ * g * x * g⁻¹ * g) • a:= by \n        apply congr _ rfl\n        simp\n      _= (g⁻¹) • (g * x * g⁻¹) •b := by\n        simp_rw[← h, smul_smul, ← mul_assoc]\n      _= (g⁻¹) • b := by\n        simp at hx\n        obtain ⟨y, hy₁, hy₂⟩ := hx\n        simp [smul_eq_mul, smul_left_cancel_iff, ← hy₂]\n        group\n        exact hy₁\n      _= a := by \n        rw[← h]\n        simp\n  exact this",
    "informalProof": "Proof:   \n1. Let $x$ be an element in $G$.   \n2. Firstly, if $x$ is in the stabilizer of $a$.   \n3. We have $g * x * g⁻¹$ is a stabilizer of $b$ by definition.    \n4. Note that $x$ is the conjugation of $g * x * g⁻¹$ by $g⁻¹$, thus we have $x$ is an elelment in $g^{-1} G_{b} g$.   \n5. Conversely, if $x$ belongs to $g^{-1} G_{b} g$.    \n6. Then we have $x • a = a = (g⁻¹ * g * x * g⁻¹ * g) • a = (g⁻¹) • (g * x * g⁻¹) •b = (g⁻¹) • b = a$, thus $x$ belongs to the stabilizer of $a$.   "
  },
  {
    "id": 2212,
    "title": "UnexploredExercise_172",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.5.11. 设 $N \\triangleleft G, N \\cap[G, G]=\\{1\\}$, 则 $N \\leqslant Z(G)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nLet $N$ be a normal subgroup of $G$ such that $N \\cap [G, G] = \\{1\\}$. We need to prove that $N \\leq Z(G)$.\n-/\nvariable {G : Type*}[Group G](N : Subgroup G)[hN : N.Normal]\nexample (h : N ⊓ (commutator G) = ⊥) : N ≤ Subgroup.center G := by\n  -- To show that every element in $N$ is in the center of $G$, we need to show that for all $n \\in N$ and $g \\in G$, we have $ng = gn$.\n  intro n hn\n  apply Subgroup.mem_center_iff.mpr\n  intro g\n  -- Let $n \\in N$ and $g \\in G$. Consider $ngn^{-1}g^{-1}$. Since $N$ is a normal subgroup, $ngn^{-1} \\in N$.\n  have h1 : n * g * n⁻¹ * g⁻¹ ∈ N := by\n    have h1 : g * n⁻¹ * g⁻¹ ∈ N := by\n      apply hN.conj_mem n⁻¹ ((Subgroup.inv_mem_iff N).mpr hn)\n    have h2 : n * g * n⁻¹ * g⁻¹ = n * (g * n⁻¹ * g⁻¹) := by group\n    rw [h2]\n    exact (Subgroup.mul_mem_cancel_right N h1).mpr hn\n  -- We need to show that $ngn^{-1}g^{-1} \\in N \\cap [G, G]$, and since $N \\cap [G, G] = \\{1\\}$, we can conclude $ngn^{-1}g^{-1} = 1$.\n  have h2 : n * g * n⁻¹ * g⁻¹ ∈ commutator G := by\n    have : n * g * n⁻¹ * g⁻¹ = ⁅n, g⁆ := by rfl\n    rw [this]\n    unfold commutator\n    exact Subgroup.commutator_mem_commutator trivial trivial\n  -- Therefore, $ngn^{-1}g^{-1} \\in N \\cap [G, G]$, and by the given condition, this means $ngn^{-1}g^{-1} = 1$.\n  have : n * g * n⁻¹ * g⁻¹ ∈ ⊥ := by\n    rw [← h]\n    simp only [Subgroup.mem_inf, h1, h2, and_self]\n    exact SetLike.instMembership\n  have : n * g * n⁻¹ * g⁻¹ = 1 := by\n    exact this\n  -- Hence, we have $ng = gn$, so $n \\in Z(G)$, i.e., $N \\subseteq Z(G)$.\n  calc\n    _ = 1 * g * n := by simp only [one_mul]\n    _ = _ := by rw [← this]; group",
    "informalProof": "Proof:\n1. We need to prove $N \\leq Z(G)$ where $N$ is a normal subgroup of $G$, and $N \\cap [G, G] = \\{1\\}$.\n2. To show that every element in $N$ is in the center of $G$, we need to show that for all $n \\in N$ and $g \\in G$, we have $ng = gn$.\n3. Let $n \\in N$ and $g \\in G$. Consider $ngn^{-1}g^{-1}$. Since $N$ is a normal subgroup, $ngn^{-1} \\in N$.\n4. We need to show that $ngn^{-1}g^{-1} \\in N \\cap [G, G]$, and since $N \\cap [G, G] = \\{1\\}$, we can conclude $ngn^{-1}g^{-1} = 1$.\n5. First, $ngn^{-1}g^{-1} \\in N$ since $N$ is normal and $n \\in N$.\n6. Second, $ngn^{-1}g^{-1} \\in [G, G]$ since it is a commutator.\n7. Therefore, $ngn^{-1}g^{-1} \\in N \\cap [G, G]$, and by the given condition, this means $ngn^{-1}g^{-1} = 1$.\n8. Hence, we have $ng = gn$, so $n \\in Z(G)$, i.e., $N \\subseteq Z(G)$."
  },
  {
    "id": 2231,
    "title": "UnexploredExercise_191",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.3.4. 设 $A$ 是群 $G$ 的有限子集, 则 $A$ 是 $G$ 的子群当且仅当对任意元 $a$, $b \\in A, a b \\in A$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nopen Function\n\nexample {G : Type*} [Group G] (A : Set G) {h : Finite A} {h' : ∃ (a : G), a ∈ A }: \nIsSubgroup A ↔ ∀ (a b : G), a ∈ A → b ∈ A → a * b ∈ A := by \n  constructor\n--Proof of \"$\\Rightarrow$\"\n--Exact $A$ is subgroup of G and is closed under mutiplication  \n  intro h1 a b ha hb\n  exact (IsSubgroup.mul_mem_cancel_right h1 hb).mpr ha  \n  intro h1\n--Proof of \"$\\Leftarrow$\"\n--By an induction on the index of $a$, we have $a^n\\in A$ holds for all $n>0$   \n  have h3:∀ (x : G), x ∈ A → ∀ (n : ℕ), x ^ (n + 1) ∈ A := by\n    intro x hx \n    intro n \n    induction' n with n hn\n    rw [zero_add, pow_one]\n    exact hx\n    rw [pow_succ]\n    exact h1 (x ^ (n + 1)) x hn hx \n  --Take $a\\in A$. By $A$ is finite, $\\exist n \\ne m,s.t.a^n=a^m$.  \n  have: ∀ (x : G), x ∈ A → ∃ (n m : ℕ), n ≠ m ∧ x ^ (n + 1) = x ^ (m + 1) := by\n    intro x hx \n    by_contra h2\n    push_neg at h2\n    let f (x : G): ℕ → G := by  \n      intro n\n      use x ^ (n + 1)\n    have: Injective (f x):= by \n      show ∀ (n m : ℕ), (f x) n = (f x) m → n = m\n      intro n m hnm\n      by_contra h\n      have: f x n ≠ f x m := by\n        show x ^ (n + 1) ≠ x ^ (m + 1) \n        exact h2 n m h \n      apply this hnm\n    have: Set.Infinite A := by\n      apply Set.infinite_of_injective_forall_mem this\n      intro n\n      show x ^ (n + 1) ∈ A \n      exact h3 x hx n\n    apply this h  \n  --WLOG suppose $n < m$, then $a^{m-n}=1$ and $a^{m-n}=1$. Thus $1\\in A$   \n  have c1: 1 ∈ A := by\n    rcases h' with ⟨a,ha⟩\n    rcases this a ha with ⟨n,m,hnm1,hnm2⟩  \n    rcases le_or_gt n m with h | h\n    have h4: n < m :=  Nat.lt_of_le_of_ne h hnm1\n    have: n + 1 ≤ m + 1 := Nat.add_le_add_right h 1 \n    rw [← pow_sub_mul_pow (n := m + 1) a this] at hnm2  \n    simp only [Nat.reduceSubDiff, self_eq_mul_left] at hnm2 \n    have: m - n = m - n - 1 + 1 := by\n      apply Eq.symm \n      apply Nat.sub_add_cancel \n      exact (Nat.le_sub_iff_add_le' h).mpr h4\n    have: a ^ (m - n) ∈ A := by \n      rw [this] \n      apply h3 \n      apply ha\n    rw [hnm2] at this\n    exact this\n    have: m + 1 ≤ n + 1 := Nat.le_succ_of_le h\n    rw [← pow_sub_mul_pow (n := n + 1) a this] at hnm2  \n    simp only [Nat.reduceSubDiff, self_eq_mul_left] at hnm2\n    simp only [mul_left_eq_self] at hnm2 \n    have hnm3: n - m = n - m - 1 + 1 := by\n      apply Eq.symm \n      apply Nat.sub_add_cancel \n      exact Nat.le_sub_of_add_le' h  \n    have: a ^ (n - m) ∈ A := by \n      rw [hnm3] \n      apply h3\n      apply ha\n    rw [hnm2] at this\n    exact this  \n  constructor  \n  constructor  \n  exact c1\n--By the condition, we have $A$ is closed under multipication    \n  intro a b ha hb\n  exact h1 a b ha hb\n--For any $x\\in A$.\n  intro x hx\n--By $A$ is finite, $\\exist n\\ne m,s.t.x^n=x^m$. WLOG suppose $n< m$,then $x^{m-n}=1$ and $x^{m-n}=1$. Thus $x^{m-n-1}=x^{-1}$.  \n  rcases this x hx with ⟨n,m,hnm1,hnm2⟩\n  rcases le_or_gt n m with h | h\n  have h4: n < m :=  Nat.lt_of_le_of_ne h hnm1\n  have: n + 1 ≤ m + 1 := Nat.add_le_add_right h 1 \n  rw [← pow_sub_mul_pow (n := m + 1) x this] at hnm2  \n  simp only [Nat.reduceSubDiff, self_eq_mul_left] at hnm2\n  have: m - n = m - n - 1 + 1 := by\n    apply Eq.symm \n    apply Nat.sub_add_cancel \n    exact (Nat.le_sub_iff_add_le' h).mpr h4\n  rw [this, pow_succ] at hnm2 \n  have: x ^ (m - n - 1) = x⁻¹ := by \n    rw [← mul_left_inv x] at hnm2\n    apply mul_right_cancel (b :=x)\n    exact hnm2\n  rw [← this]\n--When $m-n-1> 0$, $x^{m-n-1}\\in A$ by $x\\in A$ and $A$ is closed under multiplication    \n  rcases lt_or_ge 0 (m - n - 1) with h | h  \n  have: m - n - 1  ≥ 1 := by linarith\n  rw [← Nat.sub_add_cancel this (m := 1)]\n  apply h3 x hx\n--When $m-n-1=0$, $x^{m-n-1}1\\in A$ from the proof above.  \n  have: m - n - 1 = 0 := by\n    apply le_antisymm \n    exact h\n    exact Nat.zero_le (m - n - 1)\n  rw [this, pow_zero]\n  exact c1\n  have: n + 1 ≥ m + 1 := by exact Nat.le_succ_of_le h\n  rw [← pow_sub_mul_pow (n := n + 1) x this] at hnm2  \n  simp only [Nat.reduceSubDiff, self_eq_mul_left] at hnm2\n  simp only [mul_left_eq_self] at hnm2\n  have: n - m = n - m - 1 + 1 := by\n    apply Eq.symm \n    apply Nat.sub_add_cancel \n    exact Nat.le_sub_of_add_le' h\n  rw [this, pow_succ] at hnm2 \n  have: x ^ (n - m - 1) = x⁻¹ := by \n    rw [← mul_left_inv x] at hnm2\n    apply mul_right_cancel (b :=x)\n    exact hnm2\n  rw [← this]\n--Thus $x^{-1}\\in A$    \n  rcases lt_or_ge 0 (n - m - 1) with h | h  \n  have: n - m - 1  ≥ 1 := by linarith\n  rw [← Nat.sub_add_cancel this (m := 1)]\n  apply h3 x hx\n  have: n - m - 1 = 0 := by\n    apply le_antisymm \n    exact h\n    exact Nat.zero_le (n - m - 1)\n  rw [this, pow_zero]\n  exact c1",
    "informalProof": "设 $A$ 是群 $G$ 的有限子集, 则 $A$ 是 $G$ 的子群当且仅当对任意元 $a$, $b \\in A, a b \\in A$.  \nProof of \"$\\Rightarrow$\".  \n    Exact $A$ is subgroup of G and is closed under mutiplication.  \nProof of \"$\\Leftarrow$\".  \n    By an induction on the index of $a$, we have $a^n\\in A$ holds for all $n>0$.  \n    Take $a\\in A$. By $A$ is finite, $\\exist n \\ne m,s.t.a^n=a^m$. WLOG suppose $n<m$, then $a^{m-n}=1$ and $a^{m-n}=1$.   Thus $1\\in A$.  \n    By the condition, we have $A$ is closed under multiplication.  \n    For any $x\\in A$. By $A$ is finite, $\\exist n\\ne m,s.t.x^n=x^m$. WLOG suppose $n<m$,then $x^{m-n}=1$ and $x^{m-n}=1$.    Thus $x^{m-n-1}=x^{-1}$.  \n    When $m-n-1> 0$, $x^{m-n-1}\\in A$ by $x\\in A$ and $A$ is closed under multiplication.  \n    When $m-n-1=0$, $x^{m-n-1}1\\in A$ from the proof above.  \n    Thus $x^{-1}\\in A$.  "
  },
  {
    "id": 2250,
    "title": "UnexploredExercise_310",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "$1.2 .17^{*} . b$ 是含么半群 $G$ 中的元 $a$ 的逆元当且仅当成立 $a b a=a, a b^{2} a=1$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\n\n--对幺半群G中元素a b，b = a⁻¹ ↔ (a * b * a = a ∧ a * b * b * a = 1)\nexample (G : Type*) [Monoid G] (a b : G) : (b * a = 1 ∧ a * b = 1) ↔ (a * b * a = a ∧ a * b * b * a = 1) := by\n  constructor\n  --必要性\n  · intro ⟨eql, eqr⟩\n    --平凡\n    constructor\n    · rw [eqr, one_mul]\n    · rw [eqr, one_mul, eql]\n  --充分性\n  · intro ⟨eql, eqr⟩\n    constructor\n    --b * a = 1\n    · --b * a = a * b * b * a * b * a = a * b * b * a = 1，得证\n      rw [← one_mul b]\n      nth_rw 1 [← eqr]\n      rw [mul_assoc (a * b * b) , mul_assoc, eql, eqr]\n    --a * b = 1\n    · --a * b = a * b * a * b * b * a = a * b * b * a = 1，得证\n      rw [← mul_one (a * b)]\n      nth_rw 1 [← eqr]\n      simp only [← mul_assoc, eql]\n      rw [eqr]",
    "informalProof": "1.$对幺半群G中元素a b，b = a⁻¹ ↔ (a * b * a = a ∧ a * b * b * a = 1)$  \n2.$必要性$  \n3.$平凡$  \n4.$充分性$  \n5.$证b * a = 1$  \n6.$b * a = a * b * b * a * b * a = a * b * b * a = 1，得证$  \n7.$证a * b = 1$  \n8.$a * b = a * b * a * b * b * a = a * b * b * a = 1，得证$  "
  },
  {
    "id": 2435,
    "title": "UnexploredExercise_495",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "7. Let $n \\in \\mathbb{Z}$ with $n \\geq 3$. Prove the following: $Z\\left(D_{2 n}\\right)=1$ if $n$ is odd.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen DihedralGroup\n/- Let $n \\in \\mathbb{Z}$ with $n \\geq 3$. Prove the following:\n(a) $Z\\left(D_{2 n}\\right)=1$ if $n$ is odd\n(b) $Z\\left(D_{2 n}\\right)=\\left\\{1, r^{k}\\right\\}$ if $n=2 k$.-/\n/-for (a), we just use the commutativity of elemnet in the center of $D_{2 n}$ to show that $Z(D_{2 n})$  \nis equal to $\\left\\{1 \\right\\}$.Specifically, if $x\\in Z(D_{2 n})$, then $sx=xs, rx=xr$. And $x$ has form of \n$sr^i$ or $r^j$.After some calculation, we can conclude that $x=1$.-/\nexample (n:ℕ)[NeZero n](ge:n≥2)(h:Odd n): (Subgroup.center (DihedralGroup n)=⊥):=by\n    ext x\n    constructor\n    · intro hx\n      have comm:=hx.1\n      rcases x with k|l\n      · have c1:=comm (sr (0:ZMod n))\n        rw [@r_mul_sr,@sr_mul_r] at c1\n        simp only [zero_sub, zero_add, sr.injEq] at c1\n        rw [@ZMod.neg_eq_self_iff] at c1\n        rcases c1 with t1|t2\n        · rw[t1];simp only [Subgroup.mem_bot];rfl\n        · absurd h\n          simp only [Nat.odd_iff_not_even, Decidable.not_not,←t2]\n          exact even_two_mul k.val\n      · have c1:=comm (r (1:ZMod n))\n        rw [@sr_mul_r,@r_mul_sr] at c1;simp only [sr.injEq] at c1\n        rw [@eq_sub_iff_add_eq] at c1\n        nth_rw 2[←add_zero l] at c1; rw [← @eq_neg_add_iff_add_eq] at c1\n        simp only [neg_add_rev, add_zero, neg_add_cancel_right] at c1\n        symm at c1\n        rw [@ZMod.neg_eq_self_iff] at c1\n        rcases c1 with t1|t2\n        · rw [← ZMod.natCast_self] at t1\n          rw[←Nat.cast_one] at t1\n          rw [ZMod.natCast_eq_natCast_iff] at t1\n          by_cases eq:n=1\n          · simp only [Subgroup.mem_bot]\n            rw[eq] at ge;simp only [ge_iff_le, Nat.not_ofNat_le_one] at ge\n          · apply Nat.ModEq.dvd at t1\n            simp only [Nat.cast_one, dvd_sub_self_right] at t1\n            simp only [dvd_sub_self_left] at t1\n            have rpl:(1:ℕ)=(1:ℤ) :=by rfl\n            rw[←rpl] at t1\n            have : n∣1 :=by exact Int.ofNat_dvd.mp t1\n            simp only [Nat.dvd_one] at this\n            tauto\n        · rw[←t2] at h\n          absurd h\n          simp only [Nat.odd_iff_not_even, even_two, Even.mul_right, not_true_eq_false,\n            not_false_eq_true]\n    · intro hx\n      simp only [Subgroup.mem_bot] at hx\n      exact (QuotientGroup.eq_one_iff x).mp (congrArg QuotientGroup.mk hx)",
    "informalProof": "Problem: Let $n \\in \\mathbb{Z}$ with $n \\geq 3$. Prove the following:\n\n(a) $Z\\left(D_{2 n}\\right)=1$ if $n$ is odd\n\n(b) $Z\\left(D_{2 n}\\right)=\\left\\{1, r^{k}\\right\\}$ if $n=2 k$.\n\nProof \n\nif $x\\in Z (D_{2 n})$ then we have $sx=xs$ and $rx=xr$.\n\nA.If $x=r^i$ for some $i<n$, then we have $r^{-i}=r^{i}$ i.e. $2i=n$; if $n$ is odd this is  true if and only $i=0$, so $Z(D_{2 n})=\\left\\{1 \\right\\}$.\nIf $n$ is even then $i=k$ or $i=0$.\n\nB. If $x=sr^j$ for some $j<n$, considering $rx=xr$ and $sx=xs$. After some calculation, we can find that such $x$ doesn't exist.\n\nSo sum up the conclusions above , we have ' $Z\\left(D_{2 n}\\right)=1$ if $n$ is odd ' and ' $Z\\left(D_{2 n}\\right)=\\left\\{1, r^{k}\\right\\}$ if $n=2 k$ '.\nQ.E.D."
  },
  {
    "id": 2439,
    "title": "UnexploredExercise_499",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. Prove that if $H$ is a subgroup of $G$ then $\\langle H\\rangle=H$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample {G : Type*}[Group G](H : Subgroup G) : Subgroup.closure H.carrier = H := by\n  apply Subgroup.ext\n  intro x\n--We do it by double inclusion.\n  constructor\n  · intro h\n--In the first inclusion, we use thefact that the closure is the smallest subgroup containing the set and the following is trivial.\n    rw [@Subgroup.mem_closure] at h\n    have := h H\n    exact h H fun ⦃a⦄ a => a\n  · intro h\n--The second inclusion is trivial.\n    exact Subgroup.subset_closure h",
    "informalProof": "We do it by double inclusion.In the first inclusion, we use thefact that the closure is the smallest subgroup containing the set and the following is trivial.The second inclusion is trivial."
  },
  {
    "id": 2809,
    "title": "UnexploredExercise_869",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "3. Let $a, b, c \\in G$. Prove that $[a, b c]=[a, c]\\left(c^{-1}[a, b] c\\right)$.\n",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Commutator\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.GroupTheory.Finiteness\nimport Mathlib.Data.Finite.Card\n\nuniverse u\n-- Let G be a group.\nvariable {G : Type u} [Group G]\n\n-- Define the commutator [a, b] = a⁻¹ * b⁻¹ * a * b\ndef commutator (a b : G) : G := a⁻¹ * b⁻¹ * a * b\n\nexample (a b c : G) : commutator a (b * c) = commutator a c * (c⁻¹ * commutator a b * c) := by\n  calc\n    commutator a (b * c) = a⁻¹ * (b * c)⁻¹ * a * (b * c) := by rfl\n    -- Expand (b * c)⁻¹\n            _ = a⁻¹ * (c⁻¹ * b⁻¹) * a * (b * c) := by rw [mul_inv_rev]\n    -- Simplify the expression\n            _ = a⁻¹ * c⁻¹ * b⁻¹ * a * b * c := by group\n    -- Reorder terms for easier manipulation\n            _ = (a⁻¹ * c⁻¹ * a * c) * (c⁻¹ * (a⁻¹ * b⁻¹ * a * b) * c) := by group\n    -- Define commutator a c and rewrite the expression\n            _ = commutator a c * (c⁻¹ * (a⁻¹ * b⁻¹ * a * b) * c) := by rfl\n            _ = commutator a c * (c⁻¹ * commutator a b * c) := by rfl",
    "informalProof": "-- informal answer\n\n/-\nProof:\n1. in Part (a), we first Expand the definition of the commutator\n2. then we Simplify the expression using group properties\n3. then by defination we can got the proof\n4. in Part (b), we first Expand the definition of the commutator\n5. the same as part a, we got the final proof\n-/\n"
  },
  {
    "id": 2880,
    "title": "UnexploredExercise_1040",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "11. Prove that $Z(G) \\leq N_{G}(A)$ for any subset $A$ of $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n--Let $G$ be a group, and $A$ is a subgroup of $G$.\nvariable {G : Type*} [Group G] (A : Subgroup G)\n\n--Show that $Z(G) \\leq N_{G}(A)$.\ninstance : (Subgroup.center G).carrier ⊆ (Subgroup.normalizer A) := by\n  --Let $x$ be a element of $Z(G)$, we only have to prove that $x \\in N_{G}(A)$, which means $A=x*A*x^{-1}$.\n  intro x hx n\n  --But $\\forall$ $n \\in G$, as $x \\in Z(G)$, we have $n=x*n*x^{-1}$.\n  have : n =  x * n * x⁻¹ := by\n    calc\n    _= n * x * x⁻¹ := by group\n    _= x * n * x⁻¹ := by rw [←hx.comm n]\n  --So $A=x*A*x^{-1}$.\n  rw [←this]",
    "informalProof": ""
  },
  {
    "id": 2888,
    "title": "UnexploredExercise_1048",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "10. Let $H$ be a subgroup of order 2 in $G$. Show that $N_{G}(H)=C_{G}(H)$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "--10. Let $H$ be a subgroup of order 2 in $G$. Show that $N_{G}(H)=C_{G}(H)$. Deduce that if $N_{G}(H)=G$ then $H \\leq Z(G)$.\nimport Mathlib\n--We prove: $N_G(H)=C_G(H)$ helds when $|H|=2$. Where $N_G(H)$denotes the normalizer of $H$, $C_G(H)$represents the centralizer of $H$.\nlemma normeqcenwhenorderis2 {G : Type*} [Group G](H : Subgroup G)[Fintype H](h : Fintype.card H = 2): Subgroup.normalizer H = Subgroup.centralizer H := by\n  rw [←Nat.card_eq_fintype_card] at h\n  --Consider the unique member of $H$ who is not $1$, we denote it as $g$.\n  let uniquenon1 := (Nat.card_eq_two_iff' 1).mp h\n  rcases uniquenon1 with ⟨g, gneq1, _⟩\n  --Thus for arbitrary element in $H$, it equals either $g$ or 1.\n  have describeH (x : G )(xin : x ∈ H): x = 1 ∨ x = g := by\n        by_cases eq1 : x = 1\n        · simp only [eq1, true_or]\n        · have : (⟨x,xin⟩ : H) ≠ 1 := by\n            apply Subtype.coe_ne_coe.mp\n            exact eq1\n          apply (Nat.card_eq_two_iff' 1).mp at h\n          rcases h with ⟨z, _ ,eq⟩\n          have val : (⟨x,xin⟩ : H).1 = x := rfl\n          rw [eq g gneq1, ←val, eq ⟨x,xin⟩ this]\n          exact Or.inr rfl\n  --Now we show that $N_G(H) \\le C_G(H)$.\n  apply Subgroup.ext\n  intro x\n  constructor\n  · --Assume that $x\\in N_G(H)$, we apply the definition of normalizer subgroup at $g \\in H$.\n    intro hx\n    rcases hx g with t\n    simp only [SetLike.coe_mem, true_iff] at t\n    --So $xgx^{-1}\\in H$, which means it equals to $g$ or 1.\n    have conjxg : x * g * x⁻¹ = 1 ∨ x * g * x⁻¹ = ↑g := by\n      exact describeH (x * ↑g * x⁻¹) t\n    --actually, $xgx^{-1}=g$ or $g=1$.\n    simp only [Set.mem_setOf_eq, conj_eq_one_iff, OneMemClass.coe_eq_one] at conjxg\n    rcases conjxg with never | fact\n    --case $g=1$ make a contradiction with property $g \\neq 1$previous. So we can assume that $xgx^{-1}=g$.\n    · by_contra\n      exact gneq1 never\n    -- For arbitrary element $q$ of $H$, we know $q$ equals to either $g$ or 1.\n    intro q hq\n    have classificationofq: q = 1 ∨ q = g := by\n      exact describeH q hq\n    --Now we do classification on g\n    --\\textit{case1} : $q=1$.\n    rcases classificationofq with qeq1 | qeqg\n    --Then $x$ commute $q$ obviously.\n    · rw [qeq1]\n      group\n    --\\textit{case2} : $q=g$. Then $xq=qx$ by applying $xgx^{-1}=g$.\n    · rw [qeqg]\n      nth_rw 1 [←fact]\n      group\n    --Any way, we always have elements in $N_G(H)$ commutes with arbitrary $H$'s element, deduce that $N_G(H)\\le C_G(H)$\n\n  · --Now we show that $C_G(H)\\le N_G(H)$.Assume $x \\in C_G(H)$, we show that $x \\in N_G(H)$.\n    intro hx gg\n    constructor\n    · --Suppose that $g \\in H$, then we have $xgx^{-1}=x$ because $x$ commutes with $g$. So $xgx^{-1}\\in H$.\n      intro ggin\n      have commggx : gg * x = x * gg := by exact hx gg ggin\n      rw [← commggx]\n      group\n      exact ggin\n    · --Suppose that $xgx^{-1} \\in H$, considered that $x^{-1}\\in C_G(H)$, we know that $xgx^{-1}$commutes with $x^{-1}$.\n      intro conjggin\n      have xinvinH : x⁻¹ ∈ Subgroup.centralizer ↑H := by exact\n      (Subgroup.inv_mem_iff (Subgroup.centralizer ↑H)).mpr hx\n      have comm_xinv_conjgg : x⁻¹ * (x * gg * x⁻¹) = x * gg * x⁻¹ * x⁻¹ := by\n        exact Eq.symm (SemiconjBy.eq (xinvinH (x * gg * x⁻¹) conjggin))\n      --after some calculation, we deduce $g=xgx^{-1}\\in H$\n      calc\n        _ = gg * x ⁻¹ * x := by exact mul_inv_eq_iff_eq_mul.mp rfl\n        _ = x⁻¹ * (x * gg * x⁻¹) * x := by group\n        _ = x * gg * x⁻¹ * x⁻¹ * x := by rw [comm_xinv_conjgg]\n        _ = x * gg * x⁻¹ := by group\n        _ ∈ _ := by exact conjggin\n      --In conclusion, $C_G(H)=N_G(H)$ by discussion previous.",
    "informalProof": "10. Let $H$ be a subgroup of order 2 in $G$. Show that $N_{G}(H)=C_{G}(H)$. Deduce that if $N_{G}(H)=G$ then $H \\leq Z(G)$.\n\n\nWe prove a lemma at first: $N_G(H)=C_G(H)$ helds when $|H|=2$. Where $N_G(H)$denotes the normalizer of $H$, $C_G(H)$represents the centralizer of $H$.\n\nConsider the unique member of $H$ who is not $1$, we denote it as $g$.Thus for arbitrary element in $H$, it equals either $g$ or 1.\n\nFirst we show that $N_G(H) \\le C_G(H)$.Assume that $x\\in N_G(H)$, we apply the definition of normalizer subgroup at $g \\in H$.So $xgx^{-1}\\in H$, which means it equals to $g$ or 1.actually, $xgx^{-1}=g$ or $g=1$.case $g=1$ make a contradiction with property $g \\neq 1$previous. So we can assume that $xgx^{-1}=g$.For arbitrary element $q$ of $H$, we know $q$ equals to either $g$ or 1.Now we do classification on g\n**case1** : $q=1$.Then $x$ commute $q$ obviously.\n**case2**: $q=g$. Then $xq=qx$ by applying $xgx^{-1}=g$.\nAny way, we always have elements in $N_G(H)$ commutes with arbitrary $H$'s element, deduce that $N_G(H)\\le C_G(H)$\n\nNow we show that $C_G(H)\\le N_G(H)$.Assume $x \\in C_G(H)$, we show that $x \\in N_G(H)$.Suppose that $g \\in H$, then we have $xgx^{-1}=x$ because $x$ commutes with $g$. So $xgx^{-1}\\in H$.Suppose that $xgx^{-1} \\in H$, considered that $x^{-1}\\in C_G(H)$, we know that $xgx^{-1}$commutes with $x^{-1}$.after some calculation, we deduce $g=xgx^{-1}\\in H$.\n\nIn conclusion, $C_G(H)=N_G(H)$ by discussion previous.\n\n\nAt last, we prove that when the normalizer of $H$ is exactly $G$, then $H\\le Z(G)$.We have $C_G(H)=G$ by applying lemma.So $H$'s elements commute with $G$'s element, deduce that $H \\le Z(G)$."
  },
  {
    "id": 3182,
    "title": "UnexploredExercise_2442",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "11. Let $G$ be a group with subgroups $H^{*} \\leq H \\leq G$ and $K^{*} \\leq K \\leq G$. Prove that the sets $H^{*}\\left(H \\cap K^{*}\\right) \\cap(H \\cap K)$ and $\\left(H^{*} \\cap K\\right)\\left(H \\cap K^{*}\\right)$ are equal.",
    "comment": "",
    "suggestion": "",
    "formalProof": "variable {G : Type*} [Group G] \n\ndef my_mul (S : Set G) (T : Set G) : Set G := { s.1 * t.1 | (s : S) (t : T)}\n--Firstly, we define the multiple of the subgroups of G naturally.\n\nexample (H : Subgroup G) (K : Subgroup G) (K1 : Subgroup G) (H1 : Subgroup G) (hH : H1 ≤ H) (hK : K1 ≤ K) : (my_mul H1 (H ∩ K1)) ∩ (H ∩ K) = (my_mul (G := G) (H1 ∩ K) (H ∩ K1)) := by\n  ext x\n  constructor\n  --Then we divide the proof into two parts by definition.\n  · intro h1\n    rcases h1 with ⟨h2, h3⟩\n    rcases h2 with ⟨a, b, h4⟩ \n    have h5 : a = x * (b : G)⁻¹ := by\n      exact eq_mul_inv_of_mul_eq h4\n    --For the first part, we first simplify the problem by definition, and we can easily get a = x * b⁻¹.\n    have h6 : (a : G) ∈ K := by\n      rw [h5]\n      apply (Subgroup.mul_mem_cancel_right K _).mpr ?_\n      · refine (Subgroup.inv_mem_iff K).mpr ?_\n        exact hK b.2.2\n      · exact h3.2\n    --Since x and b⁻¹ is in K, we can get that a is in K.\n    use ⟨a, by\n      constructor\n      · exact Subtype.coe_prop a\n      · exact h6\n      ⟩ \n    use b\n    --We can just use a and b, and then we finish the first part of the proof.\n  · intro h1\n    rcases h1 with ⟨a, b, h2⟩ \n    constructor\n    --For the second part of the proof, we simplify the problem by definition and divide it into two parts.\n    · use ⟨a, by exact a.2.1⟩\n      use b\n    --For the first half, we can just use a and b and the problem becomes obvious.\n    · rw [← h2]\n      constructor\n      · apply (Subgroup.mul_mem_cancel_right H _).mpr ?_\n        · exact b.2.1\n        · exact hH a.2.1\n      · apply (Subgroup.mul_mem_cancel_right K _).mpr ?_\n        · exact hK b.2.2\n        · exact a.2.2\n    --For the second half, since a and b are both in H and K, We can get that a * b is also in H and K by using the definition of subgroups.\n    --This finishes the whole proof.",
    "informalProof": "Proof:\n1. Firstly, we define the multiple of the subgroups of G naturally.\n2. Then we divide the proof into two parts by definition.\n3. For the first part, we first simplify the problem by definition, and we can easily get a = x * b⁻¹.\n4. Since x and b⁻¹ is in K, we can get that a is in K.\n5. We can just use a and b, and then we finish the first part of the proof.\n6. For the second part of the proof, we simplify the problem by definition and divide it into two parts.\n7. For the first half, we can just use a and b and the problem becomes obvious.\n8. For the second half, since a and b are both in H and K, We can get that a * b is also in H and K by using the definition of subgroups.\n9. This finishes the whole proof."
  },
  {
    "id": 3313,
    "title": "UnexploredExercise_2573",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "49. Show that a ring $R$ has no nonzero nilpotent element if and only if 0 is the only solution of $x^{2}=0$ in $R$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [Ring R] : (∀ x : R, ∀ k : ℕ, x ≠ 0 → x ^ k ≠ 0) ↔ (∀ x : R, x ^ 2 = 0 → x = 0) := by\n  constructor\n  --On the one hand, assume that $R$ has no nonzero nilpotent element. We are to prove that $0$ is the only solution of $x^{2}=0$ in $R$ by contradiction.\n  · intro h x hx\n    --Assume that $x \\neq 0$.\n    by_contra h'\n    push_neg at h'\n    --Then, $x^{2} \\neq 0$ by the assumption. Thus, $x^{2}=0$ has no solution other than $0$.\n    have h₁ : x ^ 2 ≠ 0 := by\n      exact h x 2 h'\n    exact h₁ hx\n  --On the other hand, assume that $0$ is the only solution of $x^{2}=0$ in $R$. We are to prove that $R$ has no nonzero nilpotent element by contradiction.\n  · intro h x k hx\n    --Assume that $x^{k}=0$ and $x \\neq 0$.\n    by_contra h'\n    --First, we prove a conclusion that $\\forall m \\in \\mathbb{N}, x^{2^{m}}=0 \\Rightarrow x=0$ by induction.\n    have power : ∀ m : ℕ, x ^ 2 ^ m = 0 → x = 0 := by\n      intro m\n      induction' m with m hm\n      · intro h''\n        rw [pow_zero, pow_one] at h''\n        exact h''\n      --That's because $x^{2^{m+1}}=0 \\Rightarrow x^{2^{m}}=0$.\n      · intro h''\n        have h₁ : (x ^ 2 ^ m) ^ 2 = 0 := by\n          calc\n            _ = x ^ (2 ^ m * 2) := by exact Eq.symm (pow_mul x (2 ^ m) 2)\n            _ = _ := by exact h''\n        have h₂ : x ^ 2 ^ m = 0 := by\n          exact h (x ^ 2 ^ m) h₁\n        exact hm h₂\n    --And another conclusion is that $\\forall k \\in \\mathbb{N}, 2^k \\geq k$, which is easy to prove by induction.\n    have ineq : ∀ k : ℕ, 2 ^ k ≥ k := by\n      intro k\n      induction' k with k hk\n      · norm_num\n      · by_cases hk' : k = 0\n        · rw [hk']\n          norm_num\n        · calc\n            _ = 2 ^ k * 2 := by rw [pow_succ]\n            _ ≥ k * 2 := by exact Nat.mul_le_mul_right 2 hk\n            _ = k + k := by group\n            _ ≥ _ := by\n              simp only [ge_iff_le, add_le_add_iff_left]\n              refine Nat.one_le_iff_ne_zero.mpr ?_\n              exact hk'\n    --Then, $\\exist m \\in \\mathbb{N}, 2^m \\geq k$.\n    have sup : ∃ m : ℕ, 2 ^ m ≥ k := by\n      use k\n      exact ineq k\n    rcases sup with ⟨m, hm⟩\n    --So, we have $x^{2^{m}}=x^k*x^{2^{m}-k}=0$ and $x \\neq 0$. This contradicts the conclusion that $\\forall m \\in \\mathbb{N}, x^{2^{m}}=0 \\Rightarrow x=0$.\n    have h₁ : x ^ 2 ^ m = 0 := by\n      calc\n        _ = (x ^ k) * (x ^ (2 ^ m - k)) := by exact Eq.symm (pow_mul_pow_sub x hm)\n        _ = _ := by rw [h', zero_mul]\n    have : x = 0 := by\n      exact power m h₁\n    --Thus, $R$ has no nonzero nilpotent element.\n    exact hx this",
    "informalProof": "On the one hand, assume that $R$ has no nonzero nilpotent element. We are to prove that $0$ is the only solution of $x^{2}=0$ in $R$ by contradiction.   \nAssume that $x \\neq 0$. Then, $x^{2} \\neq 0$ by the assumption. Thus, $x^{2}=0$ has no solution other than $0$.   \nOn the other hand, assume that $0$ is the only solution of $x^{2}=0$ in $R$. We are to prove that $R$ has no nonzero nilpotent element by contradiction.   \nAssume that $x^{k}=0$ and $x \\neq 0$. First, we prove a conclusion that $\\forall m \\in \\mathbb{N}, x^{2^{m}}=0 \\Rightarrow x=0$ by induction. That's because $x^{2^{m+1}}=0 \\Rightarrow x^{2^{m}}=0$.  Thus, $x=0$.  \nAnd another conclusion is that $\\forall k \\in \\mathbb{N}, 2^k \\geq k$, which is easy to prove by induction. Then, $\\exist m \\in \\mathbb{N}, 2^m \\geq k$. So, we have $x^{2^{m}}=x^k*x^{2^{m}-k}=0$ and $x \\neq 0$. This contradicts the conclusion that $\\forall m \\in \\mathbb{N}, x^{2^{m}}=0 \\Rightarrow x=0$.   \nThus, $R$ has no nonzero nilpotent element."
  },
  {
    "id": 3392,
    "title": "UnexploredExercise_2652",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "22. $1 + 2  X$ in $\\mathbb{Z}_{4}[x]$ is a unit.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\n\n\nopen Polynomial\nabbrev ℤ₄ := ZMod 4\nexample : IsUnit (1 + 2 * X : ℤ₄[X]) := by\n  apply isUnit_iff_exists.mpr\n  use (1 + 2 * X : ℤ₄[X])\n  constructor\n  · have k: (1 + 2 * X: ℤ₄[X]) * (1 + 2 * X : ℤ₄[X]) = 1 + 4 * X + 4 * X ^ 2 := by ring\n    have: (4 : ℤ₄[X]) = 0 := CharP.ofNat_eq_zero ℤ₄[X] 4\n    simp only [this, zero_mul, add_zero] at k\n    exact k\n  · have k: (1 + 2 * X: ℤ₄[X]) * (1 + 2 * X : ℤ₄[X]) = 1 + 4 * X + 4 * X ^ 2 := by ring\n    have: (4 : ℤ₄[X]) = 0 := CharP.ofNat_eq_zero ℤ₄[X] 4\n    simp only [this, zero_mul, add_zero] at k\n    exact k\n",
    "informalProof": "Use 1 + 2 * x in Z4[x], we calculate it directly and can find its support only has 1 of its absolute term"
  },
  {
    "id": 3493,
    "title": "Exercise_2753",
    "lean_difficulty": "easy",
    "math_difficulty": "easy",
    "md": "$\\mathbb{Q}[x] /\\left\\langle x^{2}-5 x+6\\right\\rangle$ is not a field.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nopen Polynomial\n\nexample : ¬ IsField (ℚ[X] ⧸ Ideal.span {(X ^ 2 - 5 * X + 6 : ℚ[X])}) := by\n  -- We first note two basic facts : the degree of $X^2 - 5X + 6$ is two and it's a monic polynomial.\n  have degree_two : (X ^ 2 - 5 * X + 6 : ℚ[X]).degree = 2 := by compute_degree!\n  have degree_x_2 : (X - 2 : ℚ[X]).degree = 1 := by compute_degree!\n  -- Assume for contradiction that $\\mathbb{Q}[X] / \\langle X^2 - 5X + 6 \\rangle$ is a field.\n  intro isfield\n  -- Then the ideal $\\langle X^2 - 5X + 6 \\rangle$ must be maximal.\n  have maximal : (Ideal.span {(X ^ 2 - 5 * X + 6 : ℚ[X])}).IsMaximal := by\n    apply Ideal.Quotient.maximal_of_isField _ isfield\n  apply Ideal.isMaximal_iff.mp at maximal\n  -- We shall prove that $(X - 2)$ generates the whole $\\mathbb{Q}[X]$.\n  have span_top : Ideal.span {(X - 2 : ℚ[X])} = ⊤ := by\n    -- This is to prove $1 \\langle X - 2 \\rangle$.\n    apply (Ideal.eq_top_iff_one _).mpr\n    -- We use the property of $\\langle X^2 - 5X + 6 \\rangle$ being a maximal ideal.\n    apply maximal.right (Ideal.span {(X - 2 : ℚ[X])}) (X - 2 : ℚ[X])\n    · -- First, we have $\\langle X^2 - 5X + 6 \\rangle \\subset \\langle X - 2 \\rangle$ because $X - 2 \\mid (X - 2)(X - 3) = X ^ 2 - 5X + 6$.\n      apply Ideal.span_singleton_le_span_singleton.mpr\n      use (X - 3); ring_nf\n    · -- Furthermore, $X - 2 \\notin \\langle X^2 - 5X + 6 \\rangle$,\n      intro h; apply Ideal.mem_span_singleton'.mp at h\n      -- otherwise there is $p \\in \\mathbb{Q}[X]$ such that $p(X)(X^2 - 5X + 6)=(X-2)$.\n      rcases h with ⟨p, hp⟩\n      -- This would cause $\\deg P + 2 = 1$, a contradiction.\n      have : p.degree + 2 = 1 := by rw [← degree_two, ← degree_x_2, ← hp, degree_mul]\n      apply Nat.WithBot.add_eq_one_iff.mp at this\n      absurd this; norm_num\n    · -- Obviously $X - 2$ is in $\\langle X - 2 \\rangle$.\n      exact Ideal.mem_span_singleton_self (X - 2)\n  -- From this, we know $X - 2$ is a unit in $\\mathbb{Q}[X]$,\n  apply Ideal.span_singleton_eq_top.mp at span_top\n  -- hence there is $p \\in \\mathbb{Q}[X]$, $p(X)(X-2) = 1$.\n  rcases (isUnit_iff_exists.mp span_top) with ⟨p, hp⟩\n  -- From degree consideration again we know its impossible.\n  have : 1 + p.degree= 0 := by\n    rw [← @degree_one ℚ, ← hp.left, degree_mul, ← degree_x_2]\n  apply Nat.WithBot.add_eq_zero_iff.mp at this\n  -- Thus, $\\mathbb{Q}[X] / \\langle X^2 - 5X + 6 \\rangle$ is not a field.\n  absurd this.left; norm_num",
    "informalProof": "Theorem: $\\mathbb{Q}[X] / \\langle X^2 - 5X + 6 \\rangle$ is not a field.\nProof:\n1. We first note two basic facts : the degree of $X^2 - 5X + 6$ is two and it's a monic polynomial.\n2. Assume for contradiction that $\\mathbb{Q}[X] / \\langle X^2 - 5X + 6 \\rangle$ is a field.\n3. Then the ideal $\\langle X^2 - 5X + 6 \\rangle$ must be maximal.\n4. We shall prove that $(X - 2)$ generates the whole $\\mathbb{Q}[X]$.\n5. This is to prove $1 \\langle X - 2 \\rangle$.\n6. We use the property of $\\langle X^2 - 5X + 6 \\rangle$ being a maximal ideal.\n7. First, we have $\\langle X^2 - 5X + 6 \\rangle \\subset \\langle X - 2 \\rangle$ because $X - 2 \\mid (X - 2)(X - 3) = X ^ 2 - 5X + 6$.\n8. Furthermore, $X - 2 \\notin \\langle X^2 - 5X + 6 \\rangle$, otherwise there is $p \\in \\mathbb{Q}[X]$ such that $p(X)(X^2 - 5X + 6)=(X-2)$, this would cause $\\deg P + 2 = 1$, a contradiction.\n9. And obviously $X - 2$ is in $\\langle X - 2 \\rangle$, hence $\\langle X - 2 \\rangle$ is indeed $\\mathbb{Q}[X]$.\n10. From this, we know $X - 2$ is a unit in $\\mathbb{Q}[X]$, hence there is $p \\in \\mathbb{Q}[X]$, $p(X)(X-2) = 1$, from degree consideration again we know its impossible.\n11. Thus, $\\mathbb{Q}[X] / \\langle X^2 - 5X + 6 \\rangle$ is not a field."
  },
  {
    "id": 4008,
    "title": "UnexploredExercise_3268",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "28. Generalize Theorem 9.3: Suppose that $R$ is a commutative ring with unity and $r, s \\in R$, with $r$ not a zero divisor. Prove that $\\langle r\\rangle=\\langle s\\rangle$ if and only if $r, s$ are associates.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nvariable {R : Type} [CommRing R] (r s : R) (h1 : ∀ x : R, x * r = 0 → x = 0) (h2 : ∀ x : R, x * s = 0 → x = 0)\n\n--prove that <r> = <s> ↔ ∃ u is unit, r = u * s\ntheorem generateSameIdeal_iff_associates : Ideal.span {r} = Ideal.span {s} ↔ ∃ u v : R, u * v = 1 ∧ r = u * s where\n  mp := by\n    intro h'\n    --prove that ∃ u : R, r = u * s\n    have g1 : Ideal.span {r} ≤ Ideal.span {s} := by\n      exact le_of_eq_of_le h' fun ⦃x⦄ a ↦ a\n    have g2 : {r} ⊆ (Ideal.span {s}).carrier := by\n      exact Ideal.span_le.mp g1\n    have g3 : r ∈ Ideal.span {s} := by\n      exact g2 rfl\n    have g4 : s ∣ r := by\n      exact Ideal.mem_span_singleton.mp g3\n    have g : ∃ u : R , r = u * s := by\n      exact exists_eq_mul_left_of_dvd g4\n    --prove that ∃ v : R, s = v * r\n    have l1 : Ideal.span {s} ≤ Ideal.span {r} := by\n      exact le_of_eq_of_le (h'.symm) fun ⦃x⦄ a ↦ a\n    have l2 : {s} ⊆ (Ideal.span {r}).carrier := by\n      exact Ideal.span_le.mp l1\n    have l3 : s ∈ Ideal.span {r} := by\n      exact l2 rfl\n    have l4 : r ∣ s := by\n      exact Ideal.mem_span_singleton.mp l3\n    have l : ∃ v : R , s = v * r := by\n      exact exists_eq_mul_left_of_dvd l4\n    rcases g with ⟨u, g⟩\n    rcases l with ⟨v, l⟩\n    use u\n    use v\n    --prove that u * v = 1\n    constructor\n    · have : r * s = u * v * r * s := by\n        nth_rw 1 [g]\n        nth_rw 2 [l]\n        ring\n      have : (u * v - 1) * r * s = 0 := by\n        rw [sub_mul]\n        rw [sub_mul]\n        rw [← this]\n        simp\n      --use the fact that s is not a zero divisor\n      have : (u * v - 1) * r = 0 := by\n        exact (h2 ((u * v - 1) * r) this)\n      --use the fact that r is not a zero divisor\n      have : (u * v - 1) = 0 := by\n        exact h1 (u * v - 1) this\n      calc\n        u * v = (u * v - 1) + 1 := by ring\n        _ = 0 + 1 := by rw [this]\n        _ = 1 := by ring\n    · exact g\n  mpr := by\n    --almost the same as the proof above\n    intro h\n    rcases h with ⟨u, v, hu, hv⟩\n    have g1 : s ∣ r := by\n      exact Dvd.intro_left u (id (Eq.symm hv))\n    have g4 : Ideal.span {r} ≤ Ideal.span {s} := by\n      exact Ideal.span_singleton_le_span_singleton.mpr g1\n    have l1 : r ∣ s := by\n      have : s = v * r := by\n        calc\n          s = 1 * s := by ring\n          _ = (u * v) * s := by rw [hu]\n          _ = v * (u * s) := by ring\n          _ = v * r := by rw [← hv]\n      exact Dvd.intro_left v (id (Eq.symm this))\n    have l4 : Ideal.span {s} ≤ Ideal.span {r} := by\n      exact Ideal.span_singleton_le_span_singleton.mpr l1\n    exact le_antisymm g4 l4\n",
    "informalProof": "Let $R$ be a commutative ring with unity, and let $r, s \\in R$ be such that $r$ is not a zero divisor. We aim to prove that $\\langle r \\rangle = \\langle s \\rangle$ if and only if $r$ and $s$ are associates.\n\n**Proof:**\n\n**($\\Rightarrow$)**\nSuppose $\\langle r \\rangle = \\langle s \\rangle$. This means that $s \\in \\langle r \\rangle$, so there exists $a \\in R$ such that $s = ar$. Since $r$ is not a zero divisor, $a$ cannot be zero. Therefore, $r$ and $s$ are associates, as there exists a non-zero element $a$ such that $s = ar$.\n\n**($\\Leftarrow$)**\nSuppose $r$ and $s$ are associates. Then there exist non-zero elements $u, v \\in R$ such that $uv = 1$ and $r = us$. We need to show that $\\langle r \\rangle = \\langle s \\rangle$.\n\nSince $r = us$, it is clear that $r \\in \\langle s \\rangle$. Therefore, $\\langle r \\rangle \\subseteq \\langle s \\rangle$.\n\nOn the other hand, for any $x \\in \\langle s \\rangle$, there exists $b \\in R$ such that $x = bs$. Therefore, $x = b(us) = (bu)r$. Since $R$ is a commutative ring, $bu = ub$, which means that $x$ can also be generated by $r$. Therefore, $\\langle s \\rangle \\subseteq \\langle r \\rangle$.\n\nThus, both $\\langle r \\rangle \\subseteq \\langle s \\rangle$ and $\\langle s \\rangle \\subseteq \\langle r \\rangle$ hold, so $\\langle r \\rangle = \\langle s \\rangle$.\n\nThis completes the proof.\n"
  },
  {
    "id": 4343,
    "title": "UnexploredExercise_3803",
    "lean_difficulty": "easy",
    "math_difficulty": "easy",
    "md": "4. Show that if $H$ is a normal subgroup of $G$ and $H$ is a $p$-group, then $H$ is contained in every Sylow $p$-subgroup of $G$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nnamespace UnexploredExercise_3803_1\n\n/-Show that if $H$ is a normal subgroup of $G$ and $H$ is a $p$-group, then $H$ is contained in every Sylow $p$-subgroup of $G$.-/\n\n-- informal answer\n\n/-\nProof:\n1. Every Sylow $p$ group of $G$ is finite.\n2. Given any Sylow $p$ group $P$ of $G$. By Sylow first theorem, there exists a Sylow $p$ group $P_1$ s.t., $H \\leq P_1$.\n3. By Sylow second theorem, $P$ is conjugates to $P_1$, that is, there exists a $g \\in G$, s.t., $g \\cdot P_1 = P$.\n4. By the normality of $H$, $g \\cdot H = H$.\n5. Thus $H \\leq P_1 \\Rightarrow H = g \\cdot H \\leq g \\cdot P_1 = P$.\n-/\n\n-- formal answer\n\nvariable [Group G] [Finite G]\n\n-- Every Sylow $p$ group of $G$ is finite.\ninstance : Finite (Sylow p G) := SetLike.instFinite\n\nopen Pointwise\n\nexample [Fact p.Prime] (H : Subgroup G) (h_normal : H.Normal) (h_pgroup : IsPGroup p H) : ∀ P : Sylow p G, H ≤ P := by\n  -- Given any Sylow $p$ group $P$ of $G$,\n  intro P\n  -- By Sylow first theorem, there exists a Sylow $p$ group $P_1$ s.t., $H \\leq P_1$.\n  have H_in_sylow_p := IsPGroup.exists_le_sylow h_pgroup\n  rcases H_in_sylow_p with ⟨P₁, hP₁⟩\n  -- By Sylow second theorem, $P$ is conjugates to $P_1$\n  have sylow_conj_same := (instIsPretransitiveSylowOfFactPrimeOfFinite (p := p) (G := G))\n  -- That is, there exists a $g \\in G$, s.t., $g \\cdot P_1 = P$\n  replace sylow_conj_same := sylow_conj_same.1 P₁ P\n  rcases sylow_conj_same with ⟨g, hg⟩\n  -- By the normality of $H$, $g \\cdot H = H$\n  rw [← hg, ← Subgroup.Normal.conjAct h_normal g]\n  -- Thus $H \\leq P_1 \\Rightarrow H = g \\cdot H \\leq g \\cdot P_1 = P$\n  rw [← @Subgroup.pointwise_smul_le_pointwise_smul_iff _ _ _ _ ConjAct.instMulDistribMulAction g] at hP₁\n  convert hP₁\n\nend UnexploredExercise_3803_1",
    "informalProof": "1. Every Sylow $p$ group of $G$ is finite.\n2. Given any Sylow $p$ group $P$ of $G$. By Sylow first theorem, there exists a Sylow $p$ group $P_1$ s.t., $H \\leq P_1$.\n3. By Sylow second theorem, $P$ is conjugates to $P_1$, that is, there exists a $g \\in G$, s.t., $g \\cdot P_1 = P$.\n4. By the normality of $H$, $g \\cdot H = H$.\n5. Thus $H \\leq P_1 \\Rightarrow H = g \\cdot H \\leq g \\cdot P_1 = P$."
  },
  {
    "id": 4569,
    "title": "UnexploredExercise_4129",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.7 Prove that $1^{3}+2^{3}+\\cdots+n^{3}=\\frac{1}{4} n^{4}+\\frac{1}{2} n^{3}+\\frac{1}{4} n^{2}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open BigOperators\nopen Finset\nexample (n : ℕ) : ((∑ i in range (n + 1), i ^ 3) : ℚ) = ((n : ℚ) ^ 4 / 4) + ((n : ℚ) ^ 3 / 2) + ((n : ℚ) ^ 2 / 4) := by\n  -- Using induction, we proceed by induction on $n$.\n  induction' n with n ih\n  -- **Base Case:** When $n = 0$, the equation holds.\n  · simp only [zero_add, range_one, sum_singleton, CharP.cast_eq_zero, ne_eq, OfNat.ofNat_ne_zero,\n    not_false_eq_true, zero_pow, zero_div, add_zero]\n  -- **Inductive Step:** Assume the equation holds for $n$, that is, $\\sum_{i \\in \\text{range}(n+1)} i^3 = \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4}$.\n  --  We need to prove the equation holds for $n+1$, that is, $\\sum_{i \\in \\text{range}(n+2)} i^3 = \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4} + n^3 + 3n^2 + 3n + 1$.\n  · rw[Finset.sum_range_succ]\n    rw[ih]\n    /-\n    Calculate:\n   $$\n   \\sum_{i \\in \\text{range}(n+2)} i^3 = \\sum_{i \\in \\text{range}(n+1)} i^3 + (n+1)^3 = \\frac{n^4}{4} + \\frac{3}{2} n^3 + \\frac{13}{4} n^2 + 3n + 1\n   $$\n    -/\n    have h₁ : (n : ℚ) ^ 4 / 4 + (n : ℚ) ^ 3 / 2 + (n : ℚ) ^ 2 / 4 + (↑(n + 1) : ℚ) ^ 3 = (n : ℚ) ^ 4 /4 + (3/2) * (n : ℚ) ^ 3 + (13 / 4) * (n : ℚ) ^ 2 + 3 * (n : ℚ) + 1 := by\n      push_cast\n      field_simp\n      ring\n    /-\n    Calculate:\n   $$\n   \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4} + n^3 + 3n^2 + 3n + 1 = \\frac{n^4}{4} + \\frac{3}{2} n^3 + \\frac{13}{4} n^2 + 3n + 1\n   $$\n    -/\n    have h₂ : (↑(n + 1) : ℚ) ^ 4 / 4 + (↑(n + 1) : ℚ) ^ 3 / 2 + (↑(n + 1) : ℚ) ^ 2 / 4 = (n : ℚ) ^ 4 /4 + (3/2) * (n : ℚ) ^ 3 + (13 / 4) * (n : ℚ) ^ 2 + 3 * (n : ℚ) + 1 := by\n      push_cast\n      field_simp\n      ring\n    -- By comparing the two expressions above, the proof is complete.\n    rw[h₁]\n    rw[h₂]",
    "informalProof": "Proof:\n1. Using induction, we proceed by induction on $n$.\n2. **Base Case:** When $n = 0$, the equation holds.\n3. **Inductive Step:** Assume the equation holds for $n$, that is, $\\sum_{i \\in \\text{range}(n+1)} i^3 = \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4}$.\n4. We need to prove the equation holds for $n+1$, that is, $\\sum_{i \\in \\text{range}(n+2)} i^3 = \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4} + n^3 + 3n^2 + 3n + 1$.\n5. Calculate:\n   $$\n   \\sum_{i \\in \\text{range}(n+2)} i^3 = \\sum_{i \\in \\text{range}(n+1)} i^3 + (n+1)^3 = \\frac{n^4}{4} + \\frac{3}{2} n^3 + \\frac{13}{4} n^2 + 3n + 1\n   $$\n6. Calculate:\n   $$\n   \\frac{n^4}{4} + \\frac{n^3}{2} + \\frac{n^2}{4} + n^3 + 3n^2 + 3n + 1 = \\frac{n^4}{4} + \\frac{3}{2} n^3 + \\frac{13}{4} n^2 + 3n + 1\n   $$\n7. By comparing the two expressions above, the proof is complete."
  },
  {
    "id": 4627,
    "title": "UnexploredExercise_4187",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1.65 If $a$ and $b$ are positive integers with $(a, b)=1$, and if $a b$ is a square, prove that both $a$ and $b$ are squares.",
    "comment": "不知道该怎么用出算数基本定理，就找了个几乎平替结论的定理做了",
    "suggestion": "",
    "formalProof": "example {a b : ℤ} (hab : IsCoprime a b) (pos : a > 0 ∧ b > 0) (hn : ∃ n , a * b = n ^ 2) : ∃ u v , a = u ^ 2 ∧ b = v ^ 2 := by\n  obtain ⟨n, hn⟩ := hn\n  have hu : ∃ u, a = u ^ 2 ∨ a = - u ^ 2:= by\n    apply Int.sq_of_coprime hab hn\n  obtain ⟨u, hu⟩ := hu\n  cases' hu with hu hu1\n  · use u\n    use n / u\n    constructor\n    · exact hu\n    · calc\n        _ = a * b / a := by \n          apply Int.eq_ediv_of_mul_eq_right\n          refine Ne.symm (Int.ne_of_lt ?H1.h)\n          exact pos.1\n          rfl\n        _ = n ^ 2 / u ^ 2 := by rw [hn, hu]\n        _ = _ := by \n          refine (Int.ediv_eq_iff_eq_mul_left ?H ?H').mpr ?_\n          rw [← hu]\n          refine Ne.symm (Int.ne_of_lt ?H1.h)\n          rw [hu] at hn\n          exact Dvd.intro b hn\n          rw [← mul_pow]\n          congr\n          refine Eq.symm (Int.ediv_mul_cancel ?_)\n          rw [hu] at hn\n          have : u ^ 2 ∣ n ^ 2 := by\n            exact Dvd.intro b hn\n          have h2 : 2 ≠ 0 := by norm_num\n          exact (Int.pow_dvd_pow_iff h2).mp this\n  · absurd pos.1\n    rw [hu1]\n    push_neg\n    simp only [Left.neg_nonpos_iff]\n    exact sq_nonneg u",
    "informalProof": "$\\mathrm{Proof.}$  \nSince $(a,b)=1$, we can write $a=\\displaystyle\\prod_{i=1}^{k}p_i^{\\alpha_i},b=\\prod_{i=1}^{l}q_j^{\\beta_j}$, where $p_i, q_j$ are different from each other. Then $n^2=ab=\\displaystyle\\prod_{i=1}^{k}p_i^{\\alpha_i}\\cdot\\prod_{i=1}^{l}q_j^{\\beta_j}$ shows the standard factorization of $n^2$, thus all $\\alpha_i,\\beta_j$ are even, i.e. $a,b$ are both squares.  \nHence, we complete this proof.  \n$\\square$"
  },
  {
    "id": 4649,
    "title": "UnexploredExercise_4309",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "2.96 Let $G$ be a group and regard $G \\times G$ as the direct product of $G$ with itself. If the multiplication $\\mu: G \\times G \\rightarrow G$ is a group homomorphism, prove that $G$ must be abelian.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nexample {G : Type*} [Group G] (f : G × G →* G) (h : ∀ x : (G × G), f x = x.1 * x.2) : CommGroup G where\n  mul_comm := by\n    --Firstly, we define f according to the requirements.\n    intro a b\n    --We simplify the problem by definition and we only need to prove that a * b = b * a.\n    have : f (1, a) * f (b, 1) = f ((1, a) * (b, 1)) := by\n      exact Eq.symm (MonoidHom.map_mul f (1, a) (b, 1))\n    --Since f is a homomorphism, we can prove that f (1, a) * f (b, 1) = f ((1, a) * (b, 1)).\n    simp at this\n    simp only [h] at this\n    --By using the definition of f, we can get that 1 * a * (b * 1) = b * a.\n    rw [mul_assoc, mul_one, one_mul] at this\n    exact this\n    --After that, we can get a * b = b * a by doing some simple calculation. This finishes the whole proof.",
    "informalProof": "Proof:\n1. Firstly, we define f according to the requirements.\n2. We simplify the problem by definition and we only need to prove that a * b = b * a.\n3. Since f is a homomorphism, we can prove that f (1, a) * f (b, 1) = f ((1, a) * (b, 1)).\n4. By using the definition of f, we can get that 1 * a * (b * 1) = b * a.\n5. After that, we can get a * b = b * a by doing some simple calculation. This finishes the whole proof."
  },
  {
    "id": 4659,
    "title": "UnexploredExercise_4319",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "*2.106 Prove that a fi nite $p$-group $G$ is simple if and only if $|G|=p$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n--Prove that a finite p-group G is simple if and only if ∣G∣ = p.\nopen Subgroup\nexample  {G : Type*} [Group G] [Fintype G] {p : ℕ} [hp : Fact (Nat.Prime p)](h : IsPGroup p G) : IsSimpleGroup G ↔ Fintype.card G = p := by\n  constructor\n  · -- A finite p-group G is simple only if  ∣G∣ = p.\n    intro hG\n    -- The center of a p-group is non-trivial.\n    have nt : Nontrivial (center G) := by exact IsPGroup.center_nontrivial h\n\n    -- Hence, Z(G) is a normal subgroup of G.\n    have center_normal : (center G).Normal := by exact normal_of_characteristic (center G)\n\n    -- Since G is a simple group, the Z(G) = G, which means G is abelian.\n    have eqG : center G = ⊤ := by\n      have be_center : center G = ⊥ ∨ center G = ⊤ := by refine Normal.eq_bot_or_eq_top ?Hn; exact center_normal\n      have : center G ≠ ⊥ := by exact (nontrivial_iff_ne_bot (center G)).mp nt\n      apply Or.resolve_left be_center this\n    letI comm : CommGroup G := by\n      exact Group.commGroupOfCenterEqTop eqG\n\n    -- An abelian and simple group is a group of prime card group.\n    letI simple : IsSimpleGroup G := by exact hG\n    have th : IsCyclic G ∧ (Fintype.card G).Prime := by\n      apply CommGroup.is_simple_iff_isCyclic_and_prime_card.mp hG\n    have : (Fintype.card G).Prime := by\n      exact th.2\n    have card : ∃ n : ℕ, Fintype.card G = p ^ n := by apply  IsPGroup.iff_card.mp h\n    rcases card with ⟨n, hn⟩\n    have : n = 1 := by\n      rw [hn] at this\n      exact Nat.Prime.eq_one_of_pow this\n    rw [this, pow_one] at hn\n    exact hn\n\n  · -- A finite p-group G is simple if  ∣G∣ = p.\n    intro hG\n    exact isSimpleGroup_of_prime_card hG\n",
    "informalProof": "--Prove that a finite p-group G is simple if and only if ∣G∣ = p.\n\n-- A finite p-group G is simple only if  ∣G∣ = p.\n    \n    -- The center of a p-group is non-trivial.\n\n    -- Hence, Z(G) is a normal subgroup of G.\n\n    -- Since G is a simple group, the Z(G) = G, which means G is abelian.\n\n    -- An abelian and simple group is a group of prime card group.\n\n -- A finite p-group G is simple if  ∣G∣ = p.\n\n"
  },
  {
    "id": 5394,
    "title": "UnexploredExercise_5354",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(20) Similar to Exercise 19 , prove that if $G$ is a group and has exactly one subgroup $H$ of order $n$, then $H$ is a normal subgroup of $G$. (Hint: Refer to Activity 27.20.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n-- Example showing that a subgroup H is normal if every subgroup of G with the same cardinality as H is equal to H\nexample {G : Type*} [Group G] {H : Subgroup G} (hH : ∀ K : Subgroup G, (Nat.card K = Nat.card H) → (K = H)) : H.Normal := by\n  constructor\n  rintro n hn g\n  by_contra h\n\n  -- Define H' as the conjugate subgroup of H\n  let H' : Subgroup G := {\n    carrier := {g * h * g⁻¹ | h ∈ H}\n    mul_mem' := by\n      intro a b Ha Hb\n      rcases Ha with ⟨ ha, hha, Ha ⟩\n      rcases Hb with ⟨ hb, hhb, Hb ⟩\n      use ha * hb\n      constructor\n      -- Show that ha * hb ∈ H\n      · exact (Subgroup.mul_mem_cancel_right H hhb).mpr hha\n      -- Show that the conjugate of ha * hb is in H'\n      · calc\n          _ = (g * ha * g⁻¹) * (g * hb * g⁻¹) := by group\n          _ = _ := by\n            exact Eq.symm (Mathlib.Tactic.LinearCombination.mul_pf (id (Eq.symm Ha)) (id (Eq.symm Hb)))\n    one_mem' := by\n      dsimp\n      use 1\n      constructor\n      -- Show that 1 ∈ H\n      · exact Subgroup.one_mem H\n      -- Show that the conjugate of 1 is 1\n      · group\n    inv_mem' := by\n      rintro x ⟨ hx, hhx, Hx ⟩\n      dsimp\n      use hx⁻¹\n      constructor\n      -- Show that hx⁻¹ ∈ H\n      · exact (Subgroup.inv_mem_iff H).mpr hhx\n      -- Show that the conjugate of hx⁻¹ is in H'\n      · rw [Hx.symm]\n        group\n  }\n\n  -- Show that the cardinality of H' is equal to the cardinality of H\n  have h₂ : Nat.card H' = Nat.card H := by\n    rename_i inst\n    simp_all only [Subgroup.mem_mk, Set.mem_setOf_eq, H']\n    refine Nat.card_image_of_injective ?hf _\n    unfold Function.Injective\n    by_contra H\n    dsimp at H\n    -- Show that there exist distinct elements a₁ and a₂ such that their conjugates are equal\n    have H' : ∃ a₁ a₂ : G, (g * a₁ * g⁻¹ = g * a₂ * g⁻¹) ∧ a₁ ≠ a₂ := Function.not_injective_iff.mp H\n    rcases H' with ⟨ a₁, ⟨ a₂, h₁, h₂ ⟩ ⟩\n    -- Show that a₁ = a₂, leading to a contradiction\n    have h₃ : a₁ = a₂ := by\n      calc\n        _ = g⁻¹ * (g * a₁ * g⁻¹) * g := by group\n        _ = g⁻¹ * (g * a₂ * g⁻¹) * g := mul_right_cancel_iff.mpr (congrArg (HMul.hMul g⁻¹) h₁)\n        _ = _ := by group\n    exact h₂ h₃\n\n  -- Show that H' is not equal to H\n  have h₃ : H' ≠ H := by\n    have : (g * n * g⁻¹) ∈ H' := by use n\n    exact ne_of_mem_of_not_mem' this h\n  -- Show that H' = H, leading to a contradiction\n  have h₄ : H' = H := by exact hH H' h₂\n  exact h₃ h₄\n",
    "informalProof": ""
  },
  {
    "id": 5954,
    "title": "UnexploredExercise_6414",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "14. In a group $G$, show that the intersection of a left coset of $H \\leqq G$ and a left coset of $K \\leqq G$ is either empty or a left coset of $H \\cap K$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "open scoped Pointwise\n\nlemma inf_of_coset_eq_coset_of_inf {G : Type*} [Group G] (H K : Subgroup G) (a b : G) :\n  (a • H.carrier) ∩ (b • K) = ⊥ ∨ ∃ c : G,  (a • H.carrier) ∩ (b • K) = c • (H ⊓ K) := by\n  -- The case when $aH ∩ bK = ∅$ is trivial.\n  by_cases h : (a • H.carrier) ∩ (b • K) = ⊥\n  · exact Or.inl h\n  -- When $aH ∩ bK ≠ ∅$.\n  apply Or.inr\n  rw [Set.bot_eq_empty] at h\n  -- There exists $x$ such that $x ∈ aH$ and $x ∈ bK$.\n  rcases Set.nonempty_iff_ne_empty.mpr h with ⟨x, hxa, hxb⟩\n  -- We show that $x(H ∩ K)$ is exactly the coset we are looking for.\n  use x\n  -- First we have $aH = xH$ because $x ∈ aH → a⁻¹x ∈ H → aH = xH$.\n  have aH_eq_xH : a • H.carrier = x • H := by\n    apply (leftCoset_eq_iff H).mpr\n    exact (mem_leftCoset_iff a).mp hxa\n  -- Similarly, we have $bK = xK$ because $x ∈ bK → b⁻¹x ∈ K → bK = xK$.\n  have bK_eq_xK : b • SetLike.coe K = x • K := by\n    apply (leftCoset_eq_iff K).mpr\n    exact (mem_leftCoset_iff b).mp hxb\n  -- Thus we only need to show that $xH ∩ xK = x(H ∩ K)$.\n  rw [aH_eq_xH, bK_eq_xK]\n  apply Set.ext\n  -- For all $y ∈ G$, $y ∈ xH ∩ xK ↔ y ∈ xH ∧ y ∈ xK ↔ x⁻¹y ∈ H ∧ x⁻¹y ∈ K$\n  -- $↔ x⁻¹y ∈ H ∩ K ↔ y ∈ x(H ∩ K)$, hence $xH ∩ xK = x(H ∩ K)$.\n  intro y\n  constructor\n  · intro ⟨hH, hK⟩\n    apply (mem_leftCoset_iff x).mpr\n    exact ⟨(mem_leftCoset_iff x).mp hH , (mem_leftCoset_iff x).mp hK⟩\n  intro h\n  apply (mem_leftCoset_iff x).mp at h\n  exact ⟨(mem_leftCoset_iff x).mpr h.1, (mem_leftCoset_iff x).mpr h.2⟩",
    "informalProof": "Proof.\n1. The case when $aH ∩ bK = ∅$ is trivial.\n2. When $aH ∩ bK ≠ ∅$.\n3. There exists $x$ such that $x ∈ aH$ and $x ∈ bK$.\n4. We show that $x(H ∩ K)$ is exactly the coset we are looking for.\n5. First we have $aH = xH$ because $x ∈ aH → a⁻¹x ∈ H → aH = xH$.\n6. Similarly, we have $bK = xK$ because $x ∈ bK → b⁻¹x ∈ K → bK = xK$.\n7. Thus we only need to show that $xH ∩ xK = x(H ∩ K)$.\n8. For all $y ∈ G$, $y ∈ xH ∩ xK ↔ y ∈ xH ∧ y ∈ xK ↔ x⁻¹y ∈ H ∧ x⁻¹y ∈ K$ $↔ x⁻¹y ∈ H ∩ K ↔ y ∈ x(H ∩ K)$, hence $xH ∩ xK = x(H ∩ K)$."
  },
  {
    "id": 5990,
    "title": "UnexploredExercise_6450",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "15. Show that, in a group $G$, the intersection of two normal subgroups of $G$ of finite index is a normal subgroup of $G$ of finite index.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Tactic\n\nexample {G : Type*} [Group G] {H K : Subgroup G} (hH : H.index ≠ 0) (hK : K.index ≠ 0)\n  (hN : H.Normal) (kN : K.Normal) : (H ⊓ K).Normal ∧ (H ⊓ K).index ≠ 0 := by\n  constructor\n  · exact ⟨by\n      -- For all $n ∈ N ∩ K$ and $g ∈ G$, we need to show that $gng⁻¹ ∈ N$ and $gng⁻¹ ∈ K$.\n      intro n in_inf g\n      constructor\n      -- $gng⁻¹ ∈ N$ as $N$ is normal\n      · exact hN.conj_mem n in_inf.1 g\n      -- $gng⁻¹ ∈ K$ as $K$ is normal\n      exact kN.conj_mem n in_inf.2 g⟩\n  -- We know that $Id_G(H ∩ K) = |G : H ∩ K|$\n  rw [← Subgroup.relindex_top_right] at *\n  -- And $|G : H ∩ K| = |G : K||K : H ∩ K|$\n  rw [← Subgroup.relindex_inf_mul_relindex]\n  -- From the assumption, $|G : K| ≠ 0$, so we have to show that $|K : H ∩ K| ≠ 0$\n  apply mul_ne_zero ?_ hK\n  -- Assume $|K : H ∩ K| = 0$ for contradiction\n  by_contra eq_zero\n  absurd hH\n  -- Thus $|G : H| = 0$, which contradicts the assumption $|G : H| ≠ 0$.\n  have : K ⊓ ⊤ ≤ ⊤ := fun ⦃x⦄ _ ↦ trivial \n  exact Subgroup.relindex_eq_zero_of_le_right this eq_zero\n",
    "informalProof": "Proof. \n1. For all $n ∈ N ∩ K$ and $g ∈ G$, we need to show that $gng⁻¹ ∈ N$ and $gng⁻¹ ∈ K$.\n2. $gng⁻¹ ∈ N$ as $N$ is normal\n3. $gng⁻¹ ∈ K$ as $K$ is normal\n4. We know that $Id_G(H ∩ K) = |G : H ∩ K|$\n5. And $|G : H ∩ K| = |G : K||K : H ∩ K|$\n6. From the assumption, $|G : K| ≠ 0$, so we have to show that $|K : H ∩ K| ≠ 0$\n7. Assume $|K : H ∩ K| = 0$ for contradiction\n8. Thus $|G : H| = 0$, which contradicts the assumption $|G : H| ≠ 0$."
  },
  {
    "id": 6123,
    "title": "UnexploredExercise_6583",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "9. Prove that every subgroup of a solvable group is solvable.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-\nProve that every subgroup of a solvable group is solvable.\n-/\nexample {G : Type*} [Group G] [IsSolvable G] (H : Subgroup G) : IsSolvable H := by\n  -- This has been proven in Mathlib.\n  exact subgroup_solvable_of_solvable H",
    "informalProof": "Proof:\n\n1. This has been proven in Mathlib."
  },
  {
    "id": 7125,
    "title": "UnexploredExercise_7587",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "6. Let $f: R \\rightarrow S$ be a ring homomorphism,with $R$ and $S$ commutative. If $P$ is a prime ideal of $S$, show that the preimage $f^{-1}(P)$ is a prime ideal of $R$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\n#check Ideal.comap_isPrime\n\nexample {R S : Type*} [CommRing R] [CommRing S] (f : R →+* S) (P : Ideal S) (HP : Ideal.IsPrime P) : Ideal.IsPrime (Ideal.comap f P) := by\n  exact Ideal.comap_isPrime f P\n",
    "informalProof": ""
  },
  {
    "id": 7358,
    "title": "UnexploredExercise_8020",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1. Show that an $R$-module is $M$ cyclic if and only if $M$ is isomorphic to $R / I$ for some left ideal $I$, and in this case we can take $I$ to be ann $(M)$, the annihilator of $M$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "/-Show that an $R$-module $M$ is cyclic if and only if $M$ is isomorphic to $R / I$ for some left ideal $I$, and in this case we can take $I$ to be ann $(M)$, the annihilator of $M$.-/\nclass IsCycM {R M : Type*} [Ring R] [AddCommGroup M] [Module R M] : Prop where\n  cyc : ∃ m : M, ∀ x : M, ∃ r : R, r • m = x\n\nexample {R M : Type*} [CommRing R] [AddCommGroup M] [Module R M] : (IsCycM (R := R) (M := M)) ↔ Nonempty ((R⧸(Module.annihilator R M)) ≃ₗ[R] M) := by \n  constructor \n  · /-First we prove if $M$ is cyclic, then $M$ is isomorphic to $R / ann(M)$.-/\n    intro cyc \n    rcases cyc with ⟨m ,hm⟩\n    /-Suppose $M = Rm$. We define a module homomorphism $f:r\\mapsto r\\cdot m$.-/\n    let f : LinearMap (RingHom.id R) R M := {\n      toFun := fun (r : R) ↦ (r • m)\n      map_add' := by\n        intro x y \n        exact Module.add_smul x y m\n      map_smul' := by \n        intro n x \n        exact mul_smul n x m\n    }\n    /-Then we prove $ker(f)=ann(M)$. -/\n    have fker: LinearMap.ker f = (Module.annihilator R M) := by \n      ext x \n      constructor\n      · /-If $x\\in ker(f)$, then $x\\cdot m=0$.-/\n        intro h \n        unfold_let at h\n        simp only [LinearMap.mem_ker, LinearMap.coe_mk, AddHom.coe_mk] at h   \n        apply Module.mem_annihilator.mpr\n        /-Thus $\\forall n\\in M$, $n=r\\cdot m$, $x\\cdot n=x\\cdot r\\cdot m=r\\cdot x\\cdot m=0$. So $x\\in ann(M)$.-/\n        intro n \n        rcases hm n with ⟨s, hs⟩\n        rw [← hs, smul_smul, mul_comm, ← smul_smul, h, smul_zero]\n      · /-If $x\\in ann(M), x\\cdot m=0$, so $x\\in ker(f)$.-/\n        intro h \n        apply Module.mem_annihilator.mp at h\n        exact h m\n    rw [← fker]\n    /-And $f$ is surjective because $M=Rm$.-/\n    have fsur: Function.Surjective f := by \n      intro n \n      exact hm n \n    /-Use the first isomorphism theorem, we have $M$ is isomorphic to $R / ann(M)$. -/\n    exact Nonempty.intro (LinearMap.quotKerEquivOfSurjective f fsur)\n  · /-Second we prove if $M$ is isomorphic to $R / ann(M)$, then $M$ is cyclic. -/\n    intro ⟨f⟩ \n    /-Suppose the isomorphism is $f$. We prove $M=Rf(1)$. -/\n    use f 1 \n    /-For all $m\\in M$, $\\exists r\\in R, r\\cdot ann(M)=f^{-1}(m).$-/\n    intro m \n    set mq := f.invFun m\n    set r := Quotient.out' mq with hr\n    use r \n    rw [(LinearEquiv.map_smul f r 1).symm]\n    /-I.e. $r\\cdot f(1) = f(r\\cdot ann(M)) = m$. So $M$ is cyclic.-/\n    have : m = f mq := by exact (LinearEquiv.symm_apply_eq f).mp rfl\n    rw [this]\n    apply LinearEquiv.congr_arg\n    rw [← Quotient.out_eq' mq, ← hr]\n    have : (1 : (R ⧸ Module.annihilator R M)) = Quotient.mk'' 1 := rfl\n    rw [this]\n    simp only [Submodule.Quotient.mk''_eq_mk]\n    rw [← Submodule.Quotient.mk_smul]\n    simp only [smul_eq_mul, mul_one, Ideal.Quotient.mk_eq_mk]",
    "informalProof": "Show that an $R$-module $M$ is cyclic if and only if $M$ is isomorphic to $R / I$ for some left ideal $I$, and in this case we can take $I$ to be ann $(M)$, the annihilator of $M$.\n\nProof:\n1. First we prove if $M$ is cyclic, then $M$ is isomorphic to $R / ann(M)$.\n2. Suppose $M = Rm$. We define a module homomorphism $f:r\\mapsto r\\cdot m$.\n3. Then we prove $ker(f)=ann(M)$.  If $x\\in ker(f)$, then $x\\cdot m=0$. Thus $\\forall n\\in M$, $n=r\\cdot m$, $x\\cdot n=x\\cdot r\\cdot m=r\\cdot x\\cdot m=0$. So $x\\in ann(M)$. If $x\\in ann(M), x\\cdot m=0$, so $x\\in ker(f)$.\n4. And $f$ is surjective because $M=Rm$. Use the first isomorphism theorem, we have $M$ is isomorphic to $R / ann(M)$. \n5. Second we prove if $M$ is isomorphic to $R / ann(M)$, then $M$ is cyclic. \n Suppose the isomorphism is $f$. We prove $M=Rf(1)$. \n6. For all $m\\in M$, $\\exists r\\in R, r\\cdot ann(M)=f^{-1}(m).$\nI.e. $r\\cdot f(1) = f(r\\cdot ann(M)) = m$. So $M$ is cyclic."
  },
  {
    "id": 7415,
    "title": "Example_8004B",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $G$ be a group, and $a, b \\in G$. For any positive integer $n$ we define $a$ has an $n$th root in $G$ if $a=z^{n}$ for some $z \\in G$. Prove the following: If $a^{3}=e$, then $a$ has a square root.\n",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {G : Type} [Group G] (a:G) (h:a^3=1) :∃ x:G,x^2=a :=by\n  --由于a^4=a^3*a=a,想到用a^2\n  use a^2\n  calc\n  _ = a^3*a :=by group\n  _ = _ :=by simp only [h, one_mul]",
    "informalProof": "1、由于a^4=a^3*a=a,想到用a^2\n\n2、由于a^3=a，想到用a"
  },
  {
    "id": 7438,
    "title": "Exercise_1694",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "Let $G$ be a finite group, and let $H$ and $K$ be subgroups of $G$. Prove the following: Suppose $H$ and $K$ are not equal, and both have order the same prime number $p$. Then $H \\cap K=\\{e\\}$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\nimport Mathlib.Algebra.Group.Defs\nimport Mathlib.Algebra.Group.Subgroup.Basic\n\n\nopen Fintype Classical\nvariable {G : Type} [Group G] [Fintype G]\n\nexample [Group G] [Fintype G] (p : ℕ)  (H K : Subgroup G)  (hp :Fact p.Prime)\n  (hH : Fintype.card H = p) (hK : Fintype.card K = p) (h : H ≠ K): H ⊓ K = (⊥: Subgroup G) := by\n  --We show that elements in H⊓K is exact 1.\n  apply Subgroup.ext\n  intro x\n  constructor\n  --If x ∈ H⊓K,  we prove x = 1 by construction.\n  · intro ⟨h1, h2⟩\n    apply Subgroup.mem_bot.mpr\n    by_contra h'\n    simp only [Subgroup.coe_toSubmonoid, SetLike.mem_coe] at h1\n    simp only [Subgroup.coe_toSubmonoid, SetLike.mem_coe] at h2\n    rw [← Ne.eq_def] at h'\n    contrapose! h\n    --Notice that |H| =|K| = p is prime, so H, K are cyclic groups, and each element not 1 in H is a grnerator, so as K.\n    apply Subgroup.ext\n    have thatH : ∀ y ∈ Subgroup.zpowers x , y ∈ H := by\n      have : Subgroup.zpowers x ≤ H := by\n        exact Subgroup.zpowers_le_of_mem h1\n      exact fun y a => this a\n    have thatK : ∀ y ∈ Subgroup.zpowers x , y ∈ K := by\n      have : Subgroup.zpowers x ≤ K := by\n        exact Subgroup.zpowers_le_of_mem h2\n      exact fun y a => this a\n    have thisK:∀ a : K, a ∈ Subgroup.zpowers ⟨x, h2⟩ := by\n        intro a\n        apply @mem_zpowers_of_prime_card K (K.toGroup) _ p hp _\n        · exact Ne.symm (Subtype.coe_ne_coe.mp (id (Ne.symm h')))\n        · exact setFintype (K : Set G)\n        · exact hK\n    have thisH:∀ a : H, a ∈ Subgroup.zpowers ⟨x, h1⟩  := by\n        intro a\n        apply @mem_zpowers_of_prime_card H (H.toGroup) _ p hp _\n        · exact Ne.symm (Subtype.coe_ne_coe.mp (id (Ne.symm h')))\n        · exact setFintype (H : Set G)\n        · exact hH\n    -- So if  x ∈ H⊓K ≠ 1, we have ⟨x⟩ ∈ H⊓K, which means H = ⟨x⟩ = K, contradiction.\n    intro x1\n    constructor\n    · intro h\n      specialize thisH ⟨x1, h⟩\n      specialize thatK (x1)\n      rcases thisH with ⟨gh, hgh⟩\n      dsimp at hgh\n      have : x1 ∈ Subgroup.zpowers x := by\n        rw [@Subtype.ext_iff] at hgh\n        simp only [SubgroupClass.coe_zpow] at hgh\n        refine Subgroup.mem_zpowers_iff.mpr ?_\n        use gh\n      specialize thatK (this)\n      exact thatK\n    · intro h\n      specialize thisK ⟨x1, h⟩\n      specialize thatH (x1)\n      rcases thisK with ⟨gk, hgk⟩\n      dsimp at hgk\n      have : x1 ∈ Subgroup.zpowers x := by\n        rw [@Subtype.ext_iff] at hgk\n        simp only [SubgroupClass.coe_zpow] at hgk\n        refine Subgroup.mem_zpowers_iff.mpr ?_\n        use gk\n      specialize thatH (this)\n      exact thatH\n  --If x = 1, it's in H⊓K because  H⊓K is a subgroup of G.\n  · intro h\n    apply Subgroup.mem_bot.mp at h\n    simp only [Subgroup.mem_inf]\n    rw [h]\n    exact ⟨Subgroup.one_mem H, Subgroup.one_mem K⟩",
    "informalProof": "Proof  \r\n1. We show that elements in H⊓K is exact 1.\r\n2. If x ∈ H⊓K,  we prove x = 1 by construction.\r\n3. Notice that |H| =|K| = p is prime, so H, K are cyclic groups, and each element not 1 in H is a grnerator, so as K.\r\n4. So if  x ∈ H⊓K ≠ 1, we have ⟨x⟩ ∈ H⊓K, which means H = ⟨x⟩ = K, contradiction.\r\n5. If x = 1, it's in H⊓K because  H⊓K is a subgroup of G.\r\n6. Simply we know that |H⊓K| ∣ |H|,  |H⊓K| ∣ |K|, And |G| = |H| * p, |G| = |K| * q.\r\n7. So ∃ a b ∈ ℕ, s.t. |H| = a * |H⊓K| → |G| = a * p * |H⊓K|.\r\n8. And |K| = b * |H⊓K| → |G| = b * q * |H⊓K|,So a * p = b * q.\r\n9. Because b doesn't divide q and b ∣ (b * q), so ∃ k ∈ ℕ, b = k * p.\r\n10. So we have |G| = k * p * q * |H⊓K|, which means that the index of H∩K is a multiple of pq.\r\n11. We prove the function is an is an automorphism.\r\n12. By Bézout's lemma, ∃ a b ∈ ℤ, 1 = m * a + n * b.\r\n13. Define it's inverse as x ^ a.\r\n14. The left inverse is just a calculation (x ^ a) ^ m = x ^ (a * m) = x ^ (1 - n * b) = x * x^ (n * b) = x.\r\n15. The right inverse is just a calculation (x ^ m) ^ a = x ^ (a * m) = x ^ (1 - n * b) = x * x^ (n * b) = x."
  },
  {
    "id": 7466,
    "title": "Exercise_1736a",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "1 Prove that the order of any $p$-group is a power of $p$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.Order.Filter.Basic\nimport Mathlib.Topology.Order\nimport Mathlib.Tactic\nimport Mathlib.Algebra.Group.Subgroup.Finite\nimport Mathlib.Data.Set.Card\nimport Mathlib.GroupTheory.Subgroup.Center\nimport Mathlib.Data.SetLike.Fintype\nimport Mathlib.GroupTheory.PGroup\nimport Mathlib.GroupTheory.Sylow\n\nopen Function MulOpposite Set\nopen QuotientGroup\nopen Fintype Classical\n\n--一，证明：任意p-群G的阶为p的幂次\nexample {p : ℕ} {G : Type*} [h₁ : Group G] [Fact (Nat.Prime p)] [h₂ : Fintype G] (h : IsPGroup p G) : ∃ n : ℕ, card G = p ^ n := by\n  --有G非空\n  have hG : card G ≠ 0 := card_ne_zero\n  --而p-群阶的素因子只有p，故成立\n  have : ∀ q ∈ Nat.factors (card G), q = p := by\n    intro q hq\n    rcases (Nat.mem_factors hG).mp hq with ⟨hq1, hq2⟩\n    have : Fact q.Prime := ⟨hq1⟩\n    rcases @exists_prime_orderOf_dvd_card G h₁ h₂ q this hq2 with ⟨g, hg⟩\n    rcases (IsPGroup.iff_orderOf.mp h) g with ⟨k, hk⟩\n    have : p ^ k = q := by\n      rw [← hg, hk]\n    exact ((@Nat.Prime.pow_eq_iff q p k hq1).mp this).1.symm\n  use (card G).factors.length\n  rw [← List.prod_replicate, ← List.eq_replicate_of_mem this, Nat.prod_factors hG]\n",
    "informalProof": "一，证明：任意$p-$群$G$的阶为$p$的幂次  \n  （1）有$G$非空  \n  （2）而$p-$群阶的素因子只有$p$，故成立  \n\n二，证明$∀\\ g : G$及$G$的$Sylow-p$群$P$有$g * P * g⁻¹$依然为$Sylow-p$群  \n  Ⅰ，$g * P * g⁻¹$为$P$的共轭，为$G$的子群  \n  Ⅱ，$g * P * g⁻¹$为$p-$群  \n    （1）只需证$∃\\ n : ℕ,\\ ∀\\ x : g * P * g⁻¹, orderOf\\ x\\ |\\ p ^ n$  \n    （2）取$p ^ n = |P|$  \n    （3）由$∀\\ q : P, (g * q * g⁻¹) ^ k = g * q ^ k * g⁻¹ = 1$可得  \n  Ⅲ，$g * P * g⁻¹$为最大$p-$群  \n    （1）设$Q$为包含$g * P * g⁻¹$的$p-$群  \n    （2）有$g⁻¹ * (g * P * g⁻¹) * g = P$  \n    （3）记$g⁻¹ * Q * g = Q'$  \n    （4）$Q'$为$p-$群  \n    （5）而$P ≤ Q'$，故$P = Q'$  \n    （6）故$g * P * g⁻¹ = Q$，得证  \n\n定义了群$N(P) = N$  \n定义了$N$中的子群$K = N ∩ P$  \n$K$正规  \n设$a : N(P)$且$∃\\ k : ℕ, orderOf\\ Ka = p ^ k$  \n定义了$N$的子群$S = ⟨Ka⟩ * K$  \n定义了$S$的子群$P' = S ∩ P$  \n有$P'$正规  \n$S ≅ ⟨Ka⟩ × K$，自然定义即可  \n\n三，$S$为$p-$群  \n  （1）$|P| = |⟨Ka⟩ × K| = |⟨Ka⟩| * |K|$  \n  （2）下证$|K| = |P|$  \n  （3）由$P ≤ N$可得$  \n  （4）由$|⟨Ka⟩| = orderOf\\ ⟨Ka⟩ = p ^ k，P$为$p-$群知成立  \n\n四，$S / P'$为$p-$群  \n  （1）由三知$S$为$p-$群，故成立  \n\n$S$为$N$的子群为$G$的子群  \n\n五，$S = K$  \n  （1）先证$S ≤ K$  \n  （2）只需证$S = P$  \n  （3）先证$P ≤ S$  \n  （4）由$P ≤ N$知成立  \n  （5）又由三知$S$为$p-$群，故$P = S$  \n  （6）再证$K ≤ S$  \n  （7）由$1 * K ≤ S$知成立  \n\n六，$Ka = K$  \n  （1）先证$|⟨Ka⟩| = 1$  \n  （2）$|⟨Ka⟩| = |S| / |K|$  \n  （3）而由四知$S = K$，故$|S| = |K|$  \n  （4）故$|⟨Ka⟩| = 1$  \n  （5）故$Ka = 1$  "
  },
  {
    "id": 7476,
    "title": "Exercise_8007",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": " 设 $R$ 为一交换环。\n    证明：\n    若 $f(x)\\in R[x]$ 是一个零因子，\n    则存在 $a\\in R^*$, \n    使得 $af(x)=0$.\n    反之显然。",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nsection Exercise_8007\nopen Polynomial BigOperators Finset\n#check lcm_eq_zero_iff\n#check Classical.choose\n#check Nat.find\n#check DecidablePred\n#check Nat.find_spec\n#check Nat.find_min\n#check Nat.find_min'\n#check Nat.findGreatest\n#check Nat.findGreatest_is_greatest\n#check natDegree_lt_iff_degree_lt\n#check degree_lt_iff_coeff_zero\n\n\n#check coeff_eq_zero_of_natDegree_lt\n#check as_sum_range_C_mul_X_pow\n#check Polynomial.mul_eq_sum_sum\n#check Polynomial.coeff_mul\n#check Polynomial.coeff_C_mul\n#check Polynomial.degree_mul\n\n#check Polynomial.leadingCoeff_ne_zero\n#check Polynomial.C_mul\n\n\n#check mem_antidiagonal\n#check sum_congr\n#check sum_sdiff\n#check sum_filter\n#check Finset.cons\n#check sum_eq_zero\n#check sum_singleton\n#check Finset.sum_filter_add_sum_filter_not\n#check Nonempty\n#check Set.compl\n#check Set.toFinset\n#check lt_iff_le_and_ne\n#check antidiagonal\n#check Set.eq_empty_iff_forall_not_mem\n#check antidiagonal_congr\n#check Set.mem_singleton\n\n--以下我们设f的系数为a[i],g的系数为b[j],f*g的系数为c[k]\nexample {R:Type*} [CommRing R] (f : R[X]) (_ : f ≠ 0) (exist_g : ∃ g : R[X], g ≠ 0 ∧ g * f = 0) : ∃ a : R, a ≠ 0 ∧ C a * f = 0 := by\n  classical\n  have ⟨g, g_ne_0, gf_zero,⟩ := exist_g\n  have exists_degg : ∃ n : ℕ, ∃ g : R[X], n = natDegree g ∧ g ≠ 0 ∧ g * f = 0 := ⟨natDegree g, ⟨g, ⟨rfl, g_ne_0, gf_zero⟩⟩⟩\n  clear g_ne_0 gf_zero exist_g\n  --使用满足f*g=0的次数最小的g，其有次数n\n  set n := Nat.find exists_degg with hn\n  let ⟨g, hgn, g_nonzero, gf_nonzero⟩ := Nat.find_spec exists_degg\n  let coeff_g_nonzero : ℕ → Prop := fun i ↦ (C (coeff f i) * g ≠ 0)\n  by_cases hexm : ∃ m ≤ (natDegree f), coeff_g_nonzero m\n  · --这里假设存在a[m] 使得 a[m]*g≠0\n    have ⟨m',hle',hm'⟩ := hexm\n    --于是可以使用最大的满足条件的m\n    set m := Nat.findGreatest coeff_g_nonzero (natDegree f) with hmeq\n    let hm := Nat.findGreatest_spec hle' hm'\n    rw [← hmeq] at hm\n    clear hexm m' hle' hm'\n    --我们要计算f的系数a[m],g的最高项系数b[k],f* g的系数c[m+k]满足a[m]*b[k]=c[m+k]=0\n    --由于c[m+k]=∑ a[i]*b[j]，我们可以得到其他的系数乘积为0，这是因为m的最大性\n    have ca : (f * g).coeff (m + natDegree g) = f.coeff m * g.coeff (natDegree g) := by\n      rw [coeff_mul]\n      set zero_part : Set (antidiagonal (m + g.natDegree)) := {x | x.val.1 ≠ m} with hs0\n      let s0 := zero_part.toFinset\n      have partition : ∑ x : antidiagonal (m + g.natDegree), f.coeff x.val.1 * g.coeff x.val.2 = ∑ x ∈ s0ᶜ, f.coeff x.val.1 * g.coeff x.val.2 + ∑ x ∈ s0, f.coeff x.val.1 * g.coeff x.val.2 := (Finset.sum_compl_add_sum _ _).symm\n      have : ∑ x : antidiagonal (m + g.natDegree), f.coeff x.val.1 * g.coeff x.val.2 = ∑ x ∈ antidiagonal (m + g.natDegree), f.coeff x.1 * g.coeff x.2 := Finset.sum_coe_sort (Finset.antidiagonal (m + g.natDegree)) (fun x => f.coeff x.1 * g.coeff x.2)\n      rw [← this, partition]\n      clear partition this\n      have zero_part_eq_zero : ∑ x ∈ s0, f.coeff x.val.1 * g.coeff x.val.2 = 0 := by\n        apply Finset.sum_eq_zero\n        intro y hx\n        --simp at hx\n        have lt_vanish: ∀ x ∈ antidiagonal (m + natDegree g ), x.1 ≠ m → f.coeff x.1 * g.coeff x.2 = 0 := by\n          intro x hxina hxnem\n          by_cases hxltm : x.1 < m\n          · have hxgt : x.2 > natDegree g :=by\n              linarith[mem_antidiagonal.mp hxina]\n            let hxgt' := coeff_eq_zero_of_natDegree_lt hxgt\n            simp only [hxgt', mul_zero]\n          have hmltx : m < x.1 :=by\n            apply lt_iff_le_and_ne.mpr\n            constructor\n            · exact Nat.le_of_not_lt hxltm\n            · exact hxnem.symm\n          by_cases hxlt : x.1 > natDegree f\n          · let hxgt' := coeff_eq_zero_of_natDegree_lt hxlt\n            simp only [hxgt', zero_mul]\n          · push_neg at hxlt\n            let hcfg0 := Nat.findGreatest_is_greatest hmltx hxlt\n            unfold_let at hcfg0\n            simp only [ne_eq, Decidable.not_not] at hcfg0\n            have hcfg0':(C (f.coeff x.1) * g).coeff x.2 = 0 :=by\n              simp only [hcfg0, coeff_zero]\n            simp only [coeff_C_mul] at hcfg0'\n            exact hcfg0'\n        apply lt_vanish y (Finset.coe_mem _)\n        · have := hs0 ▸ (Set.mem_toFinset.1 hx)\n          exact this\n          -- ??!! term_proof Question\n          -- ??!!``apply Set.mem_setOf`` works but exact fails\n      rw [zero_part_eq_zero, add_zero]\n      clear zero_part_eq_zero\n\n      have hmina:(m,natDegree g) ∈ antidiagonal (m + natDegree g) :=by\n        apply mem_antidiagonal.mpr\n        simp only\n      have hsceq_sing:s0ᶜ = {⟨(m,natDegree g),hmina⟩} :=by\n        ext x\n        constructor\n        · intro hxsc\n          dsimp [s0, zero_part] at hxsc\n          simp only [Set.toFinset_setOf, univ_eq_attach, mem_compl, mem_filter, mem_attach,true_and, Decidable.not_not] at hxsc\n          have hxeqm:x = ⟨(m,natDegree g),hmina⟩ := antidiagonal_subtype_ext hxsc\n          rw[← hxeqm]\n          exact mem_singleton.mpr rfl\n        · intro hxeqm\n          simp only [mem_singleton] at hxeqm\n          unfold_let s0 zero_part\n          simp only [ne_eq, Set.mem_setOf_eq, Set.toFinset_setOf, univ_eq_attach, mem_compl,mem_filter, mem_attach, true_and, Decidable.not_not]\n          simp only [hxeqm]\n\n      simp only [hsceq_sing, sum_singleton, coeff_natDegree]\n\n    have h0: f.coeff m * g.coeff (natDegree g) = 0 :=by\n      rw[← ca,mul_comm]\n      exact\n        Mathlib.Tactic.ComputeDegree.coeff_congr\n          (congrFun (congrArg coeff gf_nonzero) (m + g.natDegree)) rfl rfl\n    --我们得到a[m] * b[k]=0后。就可得a[m] * g的次数小于g的次数=n\n    have hnew_lt: natDegree (C (f.coeff m) * g) < n :=by\n      simp only [hn, ne_eq, hgn]\n      apply (natDegree_lt_natDegree_iff hm).mpr\n      have hdgsame: degree g = natDegree g :=degree_eq_natDegree g_nonzero\n      rw[hdgsame]\n      apply (degree_lt_iff_coeff_zero (C (f.coeff m) * g) g.natDegree).mpr\n      intro d hgled\n      simp only [coeff_C_mul]\n      by_cases hgltd: g.natDegree < d\n      · apply mul_eq_zero_of_right (f.coeff m)\n        exact coeff_eq_zero_of_natDegree_lt hgltd\n      · have hgeqd: g.natDegree = d :=by linarith[hgltd,hgled]\n        rw[← hgeqd,h0]\n    --但是由于n的最小性，a[m] * g次数 < n使得a[m]* g * f ≠ 0 ，这导出矛盾\n    have hnew_lt':=Nat.find_min exists_degg hnew_lt\n    push_neg at hnew_lt'\n    have hmul_ne_0:= hnew_lt' (C (f.coeff m) * g) rfl hm\n    have :C (f.coeff m) * g * f = 0:=by\n      simp only [mul_assoc, gf_nonzero, mul_zero]\n    tauto\n  --若对任意m都有a[m]*g=0\n  push_neg at hexm\n  push_neg at hexm\n  --直接使用g的首项系数b[k]\n  use g.coeff (natDegree g)\n  constructor\n  · exact leadingCoeff_ne_zero.mpr g_nonzero\n  · rw[ as_sum_range_C_mul_X_pow f,mul_sum]\n    apply sum_eq_zero\n    intro m hm\n    have hmlef: m ≤ f.natDegree := mem_range_succ_iff.mp hm\n    rw[← mul_assoc,← C_mul]\n    --我们由a[m] * g=0得到a[m] * b[k]=0，对应系数后得到f * b[k] = 0\n    have :g.coeff (natDegree g) * f.coeff m = 0 :=by\n      rw[mul_comm]\n      have :=hexm m hmlef\n      rw[← coeff_C_mul]\n      exact\n        Mathlib.Tactic.ComputeDegree.coeff_congr\n          (congrFun (congrArg coeff this) (Nat.find exists_degg)) hgn rfl\n    rw[this]\n    simp only [map_zero, zero_mul]\n",
    "informalProof": "以下我们设f的系数为a[i],g的系数为b[j],f*g的系数为c[k]\n\n1、使用满足f*g=0的次数最小的g，其有次数n\n\n2.1、这里假设存在a[m] 使得 a[m]*g≠0\n\n2.2、于是可以使用最大的满足条件的m\n\n2.3.1、我们要计算f的系数a[m],g的最高项系数b[k],f* g的系数c[m+k]满足a[m]*b[k]=c[m+k]=0\n\n2.3.2、由于c[m+k]=∑ a[i]*b[j]，我们可以得到其他的系数乘积为0，这是因为m的最大性\n\n2.4、我们得到a[m] * b[k]=0后。就可得a[m] * g的次数小于g的次数=n\n\n2.5、但是由于n的最小性，a[m] * g次数 < n使得a[m]* g * f ≠ 0 ，这导出矛盾\n\n3.1、若对任意m都有a[m]*g=0\n\n3.2、直接使用g的首项系数b[k]\n\n3.3、我们由a[m] * g=0得到a[m] * b[k]=0，对应系数后得到f * b[k] = 0\n"
  },
  {
    "id": 7485,
    "title": "Exercise_9002",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "\n    设 $|G|=p^2q$.\n    若 $p>q,$ 取 $G$ 的Sylow $p-$ 子群，则其正规。\\\\\n\n",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib.GroupTheory.Sylow\nimport Mathlib.Topology.MetricSpace.Basic\n\n#check Sylow.unique_of_normal\n#check card_sylow_dvd_index\n#check card_sylow_modEq_one\n\nopen Classical\n\nexample {G : Type} [Group G] [Fintype G] [Fintype (Sylow p G)]\n{p q : ℕ} [Fact p.Prime] [Fact q.Prime] (pp : Nat.Prime p) ( pq : Nat.Prime q)\n(h₁ : Fintype.card G = p ^ 2 * q) (h₂ : q < p) (P : Sylow p G): P.toSubgroup.Normal := by\n--Suppse $n_p$ denotes the number of Sylow $P$ subgroups of $G$.\n--By Sylow's third thereom $n_p\\equiv 1\\pmod{p}$ and $n_p | q$ If $n_p=q,$\n--then by $p>q$ we have $n_p=q\\equiv 1\\pmod{p},$ contradictory\n  have c₁: (Nat.factorization (Fintype.card G)) p = 2 := by\n      rw [h₁, Nat.factorization_mul (Ne.symm (NeZero.ne' (p ^ 2))) (Nat.ne_of_gt <| Nat.Prime.pos pq)]\n      simp only [Finsupp.coe_add, Pi.add_apply]\n      rw [pow_two, Nat.factorization_mul]\n      simp only [Finsupp.coe_add, Pi.add_apply]\n      have := Function.mt (@Nat.Prime.eq_of_factorization_pos q p pq)\n      push_neg at this\n      rw [this (Nat.ne_of_lt h₂)]\n      rw [Nat.Prime.factorization_self pp]\n      exact Nat.Prime.ne_zero pp\n      exact Nat.Prime.ne_zero pp\n  have: (Fintype.card G).factorization p = (Nat.factorization (Fintype.card G)) p := by exact rfl\n  have c₂: Nat.card (Sylow p G) ∣ q := by\n    apply dvd_trans (b := P.index)\n    apply Sylow.card_dvd_index\n    rw [Subgroup.index_eq_card]\n    have: Fintype.card (G ⧸ P.toSubgroup) = Fintype.card G / Fintype.card P.toSubgroup := by\n      apply Nat.eq_div_of_mul_eq_right\n      have: Nonempty P := by exact One.instNonempty\n      apply Fintype.card_ne_zero\n      rw [← Nat.card_eq_fintype_card, ← Nat.card_eq_fintype_card, ← Nat.card_eq_fintype_card]\n      rw [← Subgroup.index_eq_card, mul_comm]\n      apply Subgroup.index_mul_card\n    rw [h₁, ← Nat.card_eq_fintype_card (α := P.toSubgroup), Sylow.card_eq_multiplicity, Nat.card_eq_fintype_card, c₁] at this\n    rw [Nat.card_eq_fintype_card, this]\n    have: p ^ 2 * q / p ^ 2 = q := by\n      apply Eq.symm\n      apply Nat.eq_div_of_mul_eq_right\n      exact Ne.symm (NeZero.ne' (p ^ 2))\n      exact rfl\n    rw [this]\n  have c₃: Nat.card (Sylow p G) = 1 := by\n    have := Sylow.card_dvd_index P\n    rw [Nat.dvd_prime pq] at c₂\n    have h1 := card_sylow_modEq_one p G\n    rw [Nat.card_eq_fintype_card]\n    exact Or.elim c₂ (by simp) (fun hx => (by\n    rw [hx] at h1\n    have := Nat.ModEq.eq_of_lt_of_lt h1 h₂ (Nat.Prime.one_lt pp)\n    exfalso\n    exact ne_of_gt (Nat.Prime.one_lt pq) this\n    ))\n----Thus $n_p=1.$ Suppose $P$ is the Sylow P subgroup.\n--Then for any $g\\in G, gPg^{-1}$ is a Sylow P subgroup thus must be the same as $P$\n  have: Unique (Sylow p G) := {\n    default := P\n    uniq := by\n      rw [Nat.card_eq_fintype_card] at c₃\n      have h2 := Fintype.card_eq_one_iff.1 c₃\n      rcases h2 with ⟨P',hP⟩\n      exact fun a => (Eq.trans (hP a) (eq_comm.1 (hP P)))\n  }\n  constructor\n  intro n ninP g\n  let Q := g • P\n  have h1: Q = this.default := this.uniq Q\n  have h2: P = this.default := this.uniq P\n  have : P=Q :=by rw [h1, ←h2]\n  rw [this]\n  dsimp [Q]\n  rw [Sylow.smul_def, Sylow.pointwise_smul_def, Subgroup.pointwise_smul_def]\n  simpa",
    "informalProof": "设 $|G|=p^2q$.\n    若 $p>q,$ 取 $G$ 的Sylow $p-$ 子群，则其正规。  \nProof .  \n    Suppse $n_p$ denotes the number of Sylow $P$ subgroups of $G$. By Sylow's third thereom $n_p\\equiv 1\\pmod{p}$ and $n_p | q$ If $n_p=q,$ then by $p>q$ we have $n_p=q\\equiv 1\\pmod{p},$ contradictory.  \n    Thus $n_p=1.$ Suppose $P$ is the Sylow P subgroup. Then for any $g\\in G, gPg^{-1}$ is a Sylow P subgroup thus must be the same as $P$.       \n"
  },
  {
    "id": 7486,
    "title": "Exercise_9003",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "设 $R$ 为一交换环，$a$ 为一个不可逆元。\n证明：\n$R$ 有一个含 $a$ 的极大理想 $M$.",
    "comment": "",
    "suggestion": "",
    "formalProof": "example {R : Type*} [CommRing R] (a : R) {h₁ : ¬IsUnit a} : \n∃ (I : Ideal R), a ∈ I ∧ Ideal.IsMaximal I := by  \n--By **Krull's theorem**: if `I` is an ideal that is not the whole ring, then it is included in some maximal ideal.   \n--It suffices to find an Ideal which not the whole ring and contain $a$. Use $aR$ here.\n  let I' := Ideal.span {a}\n  rcases Ideal.exists_le_maximal I' (Ideal.span_singleton_ne_top h₁) with ⟨M,hM1,hM2⟩\n  use M\n  constructor\n  exact (Submodule.span_singleton_le_iff_mem a M).mp hM2 \n  exact hM1",
    "informalProof": "设 $R$ 为一交换环，$a$ 为一个不可逆元。证明：$R$ 有一个含 $a$ 的极大理想 $M$.\nProof.  \n    Suppose $S=\\{I : a \\in I, I \\ne R\\}$ where $I$ is ideal of $R$. And the set $S$ is not empty by $a$ is not invertible.     \n    Suppose $A=\\{I_j \\in S : j\\in J\\}$ is a chain in $S$. Then $\\bigcup_{j\\in J}I_j \\in S$ and is an upper bound of $A$.  \n    1. For any $x \\in \\bigcup_{j\\in J}I_j, r \\in R, \\exist j\\in J,s.t. x\\in I_j,$ by $I_j$ is an ideal $xr\\in I_j \\subseteq \\bigcup_{j\\in J}I_j$ Thus $\\bigcup_{j\\in J}I_j$ is an ideal.  \n    2. If $\\bigcup_{j\\in J}I_j=R$, then $1\\in\\bigcup_{j\\in J}I_j,i.e.\\exist j\\in J,s.t.1\\in I_j \\implies I_j=R$ which is contradictory to $I_j\\ne R$.  \n    3.$\\forall j\\in J,I_j\\subseteq \\bigcup_{j\\in J}I_j$.  \n    Thus $\\bigcup_{j\\in J}I_j$ is an upper bound.  \n    By zorn's lemma there exist $M\\in S,s.t.\\forall I\\in S, M\\subseteq I\\implies M=I$.  \nBy **Krull's theorem**: if `I` is an ideal that is not the whole ring, then it is included in some maximal ideal.   \nIt suffices to find an Ideal which not the whole ring and contain $a$. Use $aR$ here.  "
  },
  {
    "id": 7488,
    "title": "Exercise_9004",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "设 $R$ 为一个交换环， \n    $r(R)$ 为它的诣零根。\n    证明以下等价：\n\n1. $R$ 有且只有一个素理想\n\n2. $R$ 的每个元素不是单位便是幂零元",
    "comment": "",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nopen Set Function\nopen Pointwise\nopen BigOperators\nopen Finset\n\nexample {R : Type*} [CommRing R] (I : Ideal R) {h₁ : Ideal.IsPrime I} {h₀ : (1 : R) ≠ 0}\n {h₂ : {J | J.IsPrime} = {I} }: ∀ (r : R), IsNilpotent r ∨ IsUnit r := by\n--Part 1:\"$(1)\\implies (2)$\" Use The fact that the nilradical of a commutative ring is the intersection of all prime ideals.\n--Then we have $r(R)$ is exact the prime ideal.\n  have c₁: nilradical R = I := by\n    rw [nilradical_eq_sInf, h₂]\n    exact sInf_singleton\n  intro r\n  --Consider the maximal ideal which contains $r(R),$ (The existence can be concluded from **Krull's theorem**:\n  --if `I` is an ideal that is not the whole ring, then it is included in some maximal ideal)\n  --the maximal ideal is also a prime ideal,thus $r(R)$ is also a maximal ideal.\n  by_cases h : r ∈ nilradical R\n  left\n  exact h\n  right\n  by_contra h'\n--For any element $x\\notin r(R),i.e.x$ is not nilpotent $xR=R\\vee xR \\in$ some maximal ideal $i.e. r(R)$.\n--And the second case is not gonna happen because $x\\notin r(R)\\implies xR=R,\\implies \\exist r \\in R xr=1$ thus $x$ is unit\n  let I' := Ideal.span {r}\n  rcases Ideal.exists_le_maximal I' (Ideal.span_singleton_ne_top h') with ⟨M,hM1,hM2⟩\n  have c₂: M ∈ {J | J.IsPrime} := by apply Ideal.IsMaximal.isPrime hM1\n  have c₃: M = I := by\n    rw [h₂] at c₂\n    exact c₂\n  have c₄: r ∈ nilradical R := by\n    rw [c₁, ← c₃]\n    exact (Submodule.span_singleton_le_iff_mem r M).mp hM2\n  apply h c₄",
    "informalProof": "设 $R$ 为一个交换环， $r(R)$ 为它的诣零根。\n    证明以下三条等价：   \n    (1)$R$ 有且只有一个素理想.  \n    (2)$R$ 的每个元素不是单位便是幂零元.  \n    (3)$R/r(R)$ 是一个域.  \nProof.  \n    Part 1:\"$(1)\\implies (2)$\" Use The fact that the nilradical of a commutative ring is the intersection of all prime ideals.  \n    Then we have $r(R)$ is exact the prime ideal.   \n    Consider the maximal ideal which contains $r(R),$ (The existence can be concluded from **Krull's theorem**: if `I` is an ideal that is not the whole ring, then it is included in some maximal ideal) the maximal ideal is also a prime ideal,thus $r(R)$ is also a maximal ideal.   \n    For any element $x\\notin r(R),i.e.x$ is not nilpotent $xR=R\\vee xR \\in$ some maximal ideal $i.e. r(R)$.   \n    And the second case is not gonna happen because $x\\notin r(R)\\implies xR=R,\\implies \\exist r \\in R xr=1$ thus $x$ is unit.  \n    Part 2:\"$(2)\\implies (3)$\" It suffices to show that $r(R)$ is a maximal ideal.  \n    By $1^n=1$ holds for $\\forall n \\in\\mathbb N, 1\\notin r(R)$ Thus $r(R)\\ne R$.  \n    For any ideal $I$ of $R,s.t.r(R)\\subseteq I$ and $r(R)\\ne I,\\exist x\\in I,s.t.x\\notin r(R),$ by the condition $x$ is unit implies $I=R \\implies r(R)$ is a maximal ideal.  \n    Prat 3:\"$(3)\\implies (1)$\" By the condition, we have $r(R)$ is a maximal ideal.  \n    By the nilradical of a commutative ring is the intersection of all prime ideals. We have $\\forall I, I$ is a prime ideal, $r(R)\\subseteq I$. By the $r(R)$ is maximal, we have $I=r(R)$ holds for all prime ideal $I,$ So we have (1).   \n"
  },
  {
    "id": 7492,
    "title": "Exercise_8011",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "在环 $\\mathscr{R}$ 内，\n若 $u$ 有多于一个的右逆，\n则它有无穷多个右逆。",
    "comment": "30分了！！",
    "suggestion": "",
    "formalProof": "import Mathlib\n\nvariable {R : Type*} [Ring R]\n\n-- Define a predicate to check if v is a right inverse of u\ndef is_right_inverse (u v : R) : Prop := u * v = 1\n\n-- Prove that if u has more than one right inverse, then it has infinitely many right inverses\nexample {u : R} (h : ∃ v₁ v₂ : R, is_right_inverse u v₁ ∧ is_right_inverse u v₂ ∧ v₁ ≠ v₂) : Set.Infinite {v : R | is_right_inverse u v} := by\n  -- Extract the two distinct right inverses from the hypothesis\n  rcases h with ⟨ v₁, ⟨ v₂, ⟨ Hv₁, ⟨ Hv₂, Hv ⟩ ⟩ ⟩ ⟩\n  unfold is_right_inverse at *\n\n  -- Define a function generating a sequence of right inverses\n  let f := fun n : ℕ ↦ v₁ + (1 - v₁ * u) * u ^ n\n\n  -- Prove that no element v in R such that v * u = 1 exists\n  have H₀ : ∀ v : R, v * u ≠ 1 := by\n    by_contra h\n    have h' : ∃ v : R, v * u = 1 := Classical.not_forall_not.mp h\n    rcases h' with ⟨ v, hv ⟩\n    have h₁ : v = v₁ := by\n      calc\n        _ = v * 1 := Eq.symm (MulOneClass.mul_one v)\n        _ = v * (u * v₁) := congrArg (HMul.hMul v) (id (Eq.symm Hv₁))\n        _ = _ := by rw [← mul_assoc,hv,one_mul]\n    have h₂ : v = v₂ := by\n      calc\n        _ = v * 1 := Eq.symm (MulOneClass.mul_one v)\n        _ = v * (u * v₂) := congrArg (HMul.hMul v) (id (Eq.symm Hv₂))\n        _ = _ := by rw [← mul_assoc,hv,one_mul]\n    have h₃ : v₁ = v₂ := by rw [h₁.symm,h₂]\n    exact Hv h₃\n\n  -- Prove that the function f is injective\n  have H₁ : Function.Injective f := by\n    unfold Function.Injective\n    by_contra h\n    have h' : ∃ n m : ℕ, n ≠ m ∧ f n = f m := by\n      simp only [ne_eq, add_right_inj, not_forall, Classical.not_imp, f] at *\n      obtain ⟨w, h⟩ := h\n      obtain ⟨w_1, h⟩ := h\n      obtain ⟨left, right⟩ := h\n      apply Exists.intro\n      · apply Exists.intro\n        · apply And.intro\n          on_goal 2 => {exact left}\n          · simp_all only [not_false_eq_true]\n    rcases h' with ⟨ n, ⟨ m, hn, hm ⟩ ⟩\n    have hm' : (1 - v₁ * u) * u ^ n = (1 - v₁ * u) * u ^ m := by\n      calc\n        _ = v₁ + (1 - v₁ * u) * u ^ n - v₁ := by simp only [add_sub_cancel_left]\n        _ = v₁ + (1 - v₁ * u) * u ^ m - v₁ := (sub_eq_sub_iff_comm v₁ (v₁ + (1 - v₁ * u) * u ^ n) v₁).mp (congrArg (HSub.hSub v₁) hm)\n        _ = _ := by simp only [add_sub_cancel_left]\n    have hn' : n < m ∨ m < n := Nat.lt_or_gt_of_ne hn\n    cases hn' with\n    | inl hn₁ =>\n      have h₁ : u ^ n * v₁ ^ n = 1 := by\n        exact pow_mul_pow_eq_one n Hv₁\n      have h₂ : u ^ m * v₁ ^ n = u ^ (m - n - 1) * u := by\n        calc\n          _ = u ^ (m - n - 1) * u * u ^ n * v₁ ^ n := by\n            have : m = m - n - 1 + 1 + n := by\n              refine (Nat.sub_eq_iff_eq_add ?h).mp ?_\n              · exact Nat.le_of_succ_le hn₁\n              · refine Eq.symm (Nat.sub_add_cancel (Nat.le_sub_of_add_le' hn₁))\n            have hh : u ^ m = u ^ (m - n - 1) * u * u ^ n := by\n              nth_rw 3 [← pow_one u]\n              rw[← pow_add u (m - n - 1) 1,← pow_add u (m - n - 1 + 1) n, this]\n              simp only [add_tsub_cancel_right]\n            exact congrFun (congrArg HMul.hMul hh) (v₁ ^ n)\n          _ = _ := by rw [mul_assoc,h₁,mul_one]\n      have h₃ : ((1 - v₁ * u) * u ^ (m - n - 1) + v₁) * u = 1 := by\n        rw [add_mul,mul_assoc,← h₂,← mul_assoc,← hm',mul_assoc,h₁,mul_one,sub_add_cancel]\n      exact H₀ ((1 - v₁ * u) * u ^ (m - n - 1) + v₁) h₃\n    | inr hn₂ =>\n      have h₁ : u ^ m * v₁ ^ m = 1 := by\n        exact pow_mul_pow_eq_one m Hv₁\n      have h₂ : u ^ n * v₁ ^ m = u ^ (n - m - 1) * u := by\n        calc\n          _ = u ^ (n - m - 1) * u * u ^ m * v₁ ^ m := by\n            have : n = n - m - 1 + 1 + m := by\n              refine (Nat.sub_eq_iff_eq_add (Nat.le_of_succ_le hn₂)).mp ?_\n              refine Eq.symm (Nat.sub_add_cancel (Nat.le_sub_of_add_le' hn₂))\n            have hh : u ^ n = u ^ (n - m - 1) * u * u ^ m := by\n              nth_rw 3 [← pow_one u]\n              rw[← pow_add u (n - m - 1) 1,← pow_add u (n - m - 1 + 1) m, this]\n              simp only [add_tsub_cancel_right]\n            exact congrFun (congrArg HMul.hMul hh) (v₁ ^ m)\n          _ = _ := by rw [mul_assoc,h₁,mul_one]\n      have h₃ : ((1 - v₁ * u) * u ^ (n - m - 1) + v₁) * u = 1 := by\n        rw [add_mul,mul_assoc,← h₂,← mul_assoc,hm',mul_assoc,h₁,mul_one,sub_add_cancel]\n      exact H₀ ((1 - v₁ * u) * u ^ (n - m - 1) + v₁) h₃\n\n  -- Prove that the image of the function f is an infinite set\n  have H₂ : Set.Infinite (f '' {n | n : ℕ}) := by\n    refine Set.Infinite.image (fun ⦃x₁⦄ _ ⦃x₂⦄ _ ↦ ?_2) ?_1\n    · exact fun a ↦ H₁ a\n    show {n | n : ℕ}.Infinite\n    simp only [exists_eq, Set.setOf_true]\n    exact Set.infinite_univ\n\n  -- Prove that every element in the image of f is a right inverse of u\n  have H₃ : (f '' {n | n : ℕ}) ≤ {v : R | is_right_inverse u v} := by\n    show ∀ y ∈ (f '' {n | n : ℕ}), y ∈ {v : R | is_right_inverse u v}\n    intro y hy\n    rcases hy with ⟨ n, _, hn ⟩\n    have : y = v₁ + (1 - v₁ * u) * u ^ n := id (Eq.symm hn)\n    dsimp\n    unfold is_right_inverse\n    calc\n      _ = u * (v₁ + (1 - v₁ * u) * u ^ n) := congrArg (HMul.hMul u) (id (Eq.symm hn))\n      _ =  _ := by rw [mul_add,← mul_assoc,mul_sub,mul_one,← mul_assoc,Hv₁,one_mul,sub_self,zero_mul,add_zero]\n\n  -- Conclude the proof by applying the monotonicity of infinite sets\n  exact Set.Infinite.mono H₃ H₂\n",
    "informalProof": ""
  },
  {
    "id": 7532,
    "title": "UnexploredExercise_4323_1",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "(i) If $H$ is a subgroup of $G$ and if $x \\in H$, prove that\n\n$$\n\nC_{H}(x)=H \\cap C_{G}(x) .\n\n$$\n",
    "comment": "",
    "suggestion": "",
    "formalProof": "open Fintype\nopen Classical\nopen Subgroup\n\nvariable {G : Type*} [Group G] [Fintype G] (H : Subgroup G) (x : G) (h : x ∈ H)\n\nexample : ∀ g : H, g ∈ Subgroup.centralizer ({⟨x, h⟩} : Set H) <-> (g: G) ∈ Subgroup.centralizer {x} := by\n  intro g\n  constructor\n  --We divide the problem into two parts by definition.\n  · intro h1 y h2\n    simp at h2\n    rw [h2]\n    --For the first part, we can eaily get that y = x. After that, the problem becomes x * g = g * x.\n    have h3 := h1 ⟨x, h⟩ (by simp)\n    apply_fun (fun x ↦ x.1) at h3\n    exact h3\n    --Then we can easily reach the conclusion by using the given information.\n  · intro h1 y h2\n    simp at h2\n    apply_fun (fun x ↦ x.1) at *\n    simp at h2\n    --For the second part, we simplify the problem by definition and get y = x.\n    change (y : G) * g = g * (y : G)\n    have h3 := h1 x\n    simp at h3\n    rw [h2]\n    exact h3\n    exact Subtype.val_injective\n    --After that, by using the given information, we can easily get the conclusion we need.\n  --This finishes the whole proof.",
    "informalProof": "Proof:\n1. We divide the problem into two parts by definition.\n2. For the first part, we can eaily get that y = x. After that, the problem becomes x * g = g * x.\n3. Then we can easily reach the conclusion by using the given information.\n4. For the second part, we simplify the problem by definition and get y = x.\n5. After that, by using the given information, we can easily get the conclusion we need.\n6. This finishes the whole proof."
  },
  {
    "id": 7533,
    "title": "UnexploredExercise_3165_1",
    "lean_difficulty": "",
    "math_difficulty": "",
    "md": "4. Show that $m \\mathbb{Z}$ is a subgroup of $n \\mathbb{Z}$ if and only if $n$ divides $m$. (See Example 7.7.)",
    "comment": "",
    "suggestion": "",
    "formalProof": "example (m n : ℤ) : (AddSubgroup.zmultiples m : Set ℤ) ≤ AddSubgroup.zmultiples n ↔ n ∣ m := by\n  constructor\n  --Firstly, we divide the problem into two parts by definition.\n  · intro h1\n    have : m ∈ (AddSubgroup.zmultiples m) := by exact AddSubgroup.mem_zmultiples m\n    --For the first part, we prove that m is in (AddSubgroup.zmultiples m), so it is in (AddSubgroup.zmultiples n).\n    exact Int.mem_zmultiples_iff.mp (h1 this)\n    --Therefore, we can prove n ∣ m.\n  · intro h3 x h4\n    have : m ∣ x := by exact Int.mem_zmultiples_iff.mp h4\n    have : n ∣ x := by exact Int.dvd_trans h3 this\n    --For the second part, by using the given information, we can get that m ∣ x, so n ∣ x.\n    refine SetLike.mem_coe.mpr ?mpr.a\n    exact Int.mem_zmultiples_iff.mpr this\n    --After that, we can get x is in AddSubgroup.zmultiples n, which means (AddSubgroup.zmultiples m) ≤ (AddSubgroup.zmultiples n).\n  --This finishes the whole proof.",
    "informalProof": "Proof:\n1. Firstly, we divide the problem into two parts by definition.\n2. For the first part, we prove that m is in (AddSubgroup.zmultiples m), so it is in (AddSubgroup.zmultiples n).\n3. Therefore, we can prove n ∣ m.\n4. For the second part, by using the given information, we can get that m ∣ x, so n ∣ x.\n5. After that, we can get x is in AddSubgroup.zmultiples n, which means (AddSubgroup.zmultiples m) ≤ (AddSubgroup.zmultiples n).\n6. This finishes the whole proof."
  }
]